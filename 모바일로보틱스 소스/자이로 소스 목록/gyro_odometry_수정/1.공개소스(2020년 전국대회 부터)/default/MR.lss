
MR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  0000713e  000071d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000713e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  008001fe  008001fe  000072d0  2**0
                  ALLOC
  3 .stab         000046ec  00000000  00000000  000072d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001034  00000000  00000000  0000b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  0000c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008b1  00000000  00000000  0000caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000038f6  00000000  00000000  0000d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000dc9  00000000  00000000  00010c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000031d2  00000000  00000000  00011a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b0  00000000  00000000  00014c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000064f  00000000  00000000  000150e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d04  00000000  00000000  00015733  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001cd  00000000  00000000  00019437  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00019604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_14>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 af 30 	jmp	0x615e	; 0x615e <__vector_18>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_30>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 00       	.word	0x003f	; ????

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e1       	ldi	r29, 0x10	; 16
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ee e3       	ldi	r30, 0x3E	; 62
      ec:	f1 e7       	ldi	r31, 0x71	; 113
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ae 3f       	cpi	r26, 0xFE	; 254
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	13 e0       	ldi	r17, 0x03	; 3
     100:	ae ef       	ldi	r26, 0xFE	; 254
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a1 35       	cpi	r26, 0x51	; 81
     10a:	b1 07       	cpc	r27, r17
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 42 02 	call	0x484	; 0x484 <main>
     112:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <read_gyro>:

unsigned char read_gyro(unsigned char addr){
	unsigned char data=0;

	// 矫累
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     11a:	94 ea       	ldi	r25, 0xA4	; 164
     11c:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     120:	90 91 74 00 	lds	r25, 0x0074
     124:	97 ff       	sbrs	r25, 7
     126:	fc cf       	rjmp	.-8      	; 0x120 <read_gyro+0x6>
	
	// 林家 傈价
	TWDR = 0x05 << 1;
     128:	9a e0       	ldi	r25, 0x0A	; 10
     12a:	90 93 73 00 	sts	0x0073, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
     12e:	94 e8       	ldi	r25, 0x84	; 132
     130:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     134:	90 91 74 00 	lds	r25, 0x0074
     138:	97 ff       	sbrs	r25, 7
     13a:	fc cf       	rjmp	.-8      	; 0x134 <read_gyro+0x1a>
	
	TWDR = addr;
     13c:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     140:	84 e8       	ldi	r24, 0x84	; 132
     142:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     146:	80 91 74 00 	lds	r24, 0x0074
     14a:	87 ff       	sbrs	r24, 7
     14c:	fc cf       	rjmp	.-8      	; 0x146 <read_gyro+0x2c>

	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     14e:	84 e9       	ldi	r24, 0x94	; 148
     150:	80 93 74 00 	sts	0x0074, r24
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     154:	84 ea       	ldi	r24, 0xA4	; 164
     156:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     15a:	80 91 74 00 	lds	r24, 0x0074
     15e:	87 ff       	sbrs	r24, 7
     160:	fc cf       	rjmp	.-8      	; 0x15a <read_gyro+0x40>
	
	TWDR = (0x05 << 1)|0x01;
     162:	8b e0       	ldi	r24, 0x0B	; 11
     164:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     168:	84 e8       	ldi	r24, 0x84	; 132
     16a:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     16e:	80 91 74 00 	lds	r24, 0x0074
     172:	87 ff       	sbrs	r24, 7
     174:	fc cf       	rjmp	.-8      	; 0x16e <read_gyro+0x54>
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     176:	84 e8       	ldi	r24, 0x84	; 132
     178:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     17c:	80 91 74 00 	lds	r24, 0x0074
     180:	87 ff       	sbrs	r24, 7
     182:	fc cf       	rjmp	.-8      	; 0x17c <read_gyro+0x62>
	data = TWDR;
     184:	80 91 73 00 	lds	r24, 0x0073

	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     188:	94 e9       	ldi	r25, 0x94	; 148
     18a:	90 93 74 00 	sts	0x0074, r25
	

	return data;
}
     18e:	08 95       	ret

00000190 <write_gyro>:

void write_gyro(unsigned char addr, unsigned char data){
	// 矫累
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     190:	94 ea       	ldi	r25, 0xA4	; 164
     192:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     196:	90 91 74 00 	lds	r25, 0x0074
     19a:	97 ff       	sbrs	r25, 7
     19c:	fc cf       	rjmp	.-8      	; 0x196 <write_gyro+0x6>
	
	// 林家 傈价
	TWDR = (0x05 << 1)|0x00;
     19e:	9a e0       	ldi	r25, 0x0A	; 10
     1a0:	90 93 73 00 	sts	0x0073, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
     1a4:	94 e8       	ldi	r25, 0x84	; 132
     1a6:	90 93 74 00 	sts	0x0074, r25
	while(!(TWCR & (1 << TWINT)));
     1aa:	90 91 74 00 	lds	r25, 0x0074
     1ae:	97 ff       	sbrs	r25, 7
     1b0:	fc cf       	rjmp	.-8      	; 0x1aa <write_gyro+0x1a>

	//data = TWDR;
	TWDR=addr;
     1b2:	80 93 73 00 	sts	0x0073, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
     1b6:	84 e8       	ldi	r24, 0x84	; 132
     1b8:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     1bc:	80 91 74 00 	lds	r24, 0x0074
     1c0:	87 ff       	sbrs	r24, 7
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <write_gyro+0x2c>
	
	//data = TWDR;
	TWDR=data;
     1c4:	60 93 73 00 	sts	0x0073, r22
	TWCR = (1 << TWINT) | (1 << TWEN);
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & (1 << TWINT)));
     1ce:	80 91 74 00 	lds	r24, 0x0074
     1d2:	87 ff       	sbrs	r24, 7
     1d4:	fc cf       	rjmp	.-8      	; 0x1ce <write_gyro+0x3e>
	
	// 沥瘤
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     1d6:	84 e9       	ldi	r24, 0x94	; 148
     1d8:	80 93 74 00 	sts	0x0074, r24
}
     1dc:	08 95       	ret

000001de <MCU_init>:
	// USART1 initialization
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	UCSR1A=0x00;
     1de:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x98;
     1e2:	88 e9       	ldi	r24, 0x98	; 152
     1e4:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H=0x00;
     1ee:	10 92 98 00 	sts	0x0098, r1
	//UBRR1L=0x07; // USART1 Baud Rate: 115200
	UBRR1L=0x5F; // USART1 Baud Rate: 9600
     1f2:	8f e5       	ldi	r24, 0x5F	; 95
     1f4:	80 93 99 00 	sts	0x0099, r24

	sei();
     1f8:	78 94       	sei
}
     1fa:	08 95       	ret

000001fc <Interface_init>:

// Function  : LCD, LED, Buzzer, Switch甫 荤侩窍扁 困秦 檬扁拳
// Parameter : 绝澜
// Return    : 绝澜
void Interface_init(void)
{
     1fc:	1f 93       	push	r17
    // LCD / EX I/O Expander
	TWDR = 0xFF;
     1fe:	1f ef       	ldi	r17, 0xFF	; 255
     200:	10 93 73 00 	sts	0x0073, r17
	TWBR = 0x41; /// 捞芭 41 = 100khz烙 
     204:	81 e4       	ldi	r24, 0x41	; 65
     206:	80 93 70 00 	sts	0x0070, r24

	LM629_HW_Reset();
     20a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LM629_HW_Reset>
	Sensor_init();
     20e:	0e 94 9b 30 	call	0x6136	; 0x6136 <Sensor_init>
	MCU_init();
     212:	0e 94 ef 00 	call	0x1de	; 0x1de <MCU_init>
	Motor_init();
     216:	0e 94 48 06 	call	0xc90	; 0xc90 <Motor_init>

	TCCR1A=0x00; TCCR1B=0x05;
     21a:	1f bc       	out	0x2f, r1	; 47
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0xFF; TCNT1L=0x70;
     220:	1d bd       	out	0x2d, r17	; 45
     222:	80 e7       	ldi	r24, 0x70	; 112
     224:	8c bd       	out	0x2c, r24	; 44
	TIMSK=0x04;
     226:	84 e0       	ldi	r24, 0x04	; 4
     228:	87 bf       	out	0x37, r24	; 55
	sei();
     22a:	78 94       	sei
	
	DDRB=0x0F;
     22c:	8f e0       	ldi	r24, 0x0F	; 15
     22e:	87 bb       	out	0x17, r24	; 23
	DDRD&=~0x0F;
     230:	81 b3       	in	r24, 0x11	; 17
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	81 bb       	out	0x11, r24	; 17

	DDRC |= 0xf0; ///// 眠啊 
     236:	84 b3       	in	r24, 0x14	; 20
     238:	80 6f       	ori	r24, 0xF0	; 240
     23a:	84 bb       	out	0x14, r24	; 20
	PORTB = 0; ///// 眠啊 
     23c:	18 ba       	out	0x18, r1	; 24
}
     23e:	1f 91       	pop	r17
     240:	08 95       	ret

00000242 <__vector_30>:
	UBRR1L=0x5F; // USART1 Baud Rate: 9600

	sei();
}

ISR(USART1_RX_vect){
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	8f 93       	push	r24
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	0f 92       	push	r0
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     volatile unsigned char data;
	
     data=UDR1;
     258:	80 91 9c 00 	lds	r24, 0x009C
     25c:	89 83       	std	Y+1, r24	; 0x01
     while(!(UCSR1A&0xB8)); //荐脚肯丰 棺 俊矾 八免登瘤 臼阑矫
     25e:	80 91 9b 00 	lds	r24, 0x009B
     262:	88 7b       	andi	r24, 0xB8	; 184
     264:	e1 f3       	breq	.-8      	; 0x25e <__vector_30+0x1c>
     rx1_flg=1;              //荐脚肯丰 敲饭弊 set
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 fe 01 	sts	0x01FE, r24
     rx1_buff=data;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	80 93 ff 01 	sts	0x01FF, r24
}
     272:	0f 90       	pop	r0
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	8f 91       	pop	r24
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <getchar1>:

char getchar1(void)  //uart 荐脚窍扁
{
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	0f 92       	push	r0
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char data;
	
	data=rx1_buff;
     28e:	80 91 ff 01 	lds	r24, 0x01FF
     292:	89 83       	std	Y+1, r24	; 0x01
	rx1_buff=0;
     294:	10 92 ff 01 	sts	0x01FF, r1
	cli();           //臂肺国 牢磐反飘 disable
     298:	f8 94       	cli
	rx1_flg=0;       //荐脚肯丰 敲饭弊 reset
     29a:	10 92 fe 01 	sts	0x01FE, r1
	sei();           //臂肺国 牢磐反飘 enable          
     29e:	78 94       	sei
	return data;     //荐脚单捞磐 馆券
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
}
     2a2:	0f 90       	pop	r0
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	08 95       	ret

000002aa <putchar1>:

void putchar1(char data) //uart 价脚拳扁
{
	while(!(UCSR1A&0x20));  //价脚 霖厚 肯丰矫
     2aa:	90 91 9b 00 	lds	r25, 0x009B
     2ae:	95 ff       	sbrs	r25, 5
     2b0:	fc cf       	rjmp	.-8      	; 0x2aa <putchar1>
	UDR1=data;              //价脚 滚欺俊 单捞磐 静扁
     2b2:	80 93 9c 00 	sts	0x009C, r24
}
     2b6:	08 95       	ret

000002b8 <lcd_write_data>:

// Function  : I2C甫 荤侩窍咯 LCD葛碘肺 茄官捞飘 傈价
// Parameter :
//          data - 傈价且 茄官捞飘 单捞磐
// Return    : 绝澜
void lcd_write_data(unsigned char data){
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     int n=0;

     // 矫累
     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     2bc:	e4 e7       	ldi	r30, 0x74	; 116
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	94 ea       	ldi	r25, 0xA4	; 164
     2c2:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c4:	a1 ee       	ldi	r26, 0xE1	; 225
     2c6:	b2 e0       	ldi	r27, 0x02	; 2
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_write_data+0x10>
     2cc:	00 00       	nop
     // 霖厚惑怕 眉农
     _delay_us(200); ///// while巩 _delay_us(200)栏肺 函版 
     // 林家 傈价
     TWDR = SLA << 1;
     2ce:	a3 e7       	ldi	r26, 0x73	; 115
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	9e e0       	ldi	r25, 0x0E	; 14
     2d4:	9c 93       	st	X, r25
     TWCR = (1 << TWINT) | (1 << TWEN);
     2d6:	94 e8       	ldi	r25, 0x84	; 132
     2d8:	90 83       	st	Z, r25
     2da:	c1 ee       	ldi	r28, 0xE1	; 225
     2dc:	d2 e0       	ldi	r29, 0x02	; 2
     2de:	21 97       	sbiw	r28, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_write_data+0x26>
     2e2:	00 00       	nop
     n=0;
     _delay_us(200); ///// while巩 _delay_us(200)栏肺 函版 
     TWDR = data;
     2e4:	8c 93       	st	X, r24
     TWCR = (1 << TWINT) | (1 << TWEN);
     2e6:	90 83       	st	Z, r25
     2e8:	81 ee       	ldi	r24, 0xE1	; 225
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_write_data+0x34>
     2f0:	00 00       	nop
     n=0;
     _delay_us(200); ///// while巩 _delay_us(200)栏肺 函版 
     // 沥瘤
     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     2f2:	84 e9       	ldi	r24, 0x94	; 148
     2f4:	80 83       	st	Z, r24
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <LCD>:
// Return    : 绝澜


//// lcd_display_str => LCD肺 函版窍扁 
void LCD(unsigned char Y_line, unsigned char X_line,char *string) //lcd 胶飘傅单捞磐 静扁
{
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	00 d0       	rcall	.+0      	; 0x30a <LCD+0xe>
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	08 2f       	mov	r16, r24
     310:	16 2f       	mov	r17, r22
    int i=X_line;

	if((Y_line<4) && (X_line<20)){
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	70 f5       	brcc	.+92     	; 0x372 <LCD+0x76>
     316:	64 31       	cpi	r22, 0x14	; 20
     318:	60 f5       	brcc	.+88     	; 0x372 <LCD+0x76>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     31a:	8b e1       	ldi	r24, 0x1B	; 27
     31c:	49 83       	std	Y+1, r20	; 0x01
     31e:	5a 83       	std	Y+2, r21	; 0x02
     320:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     324:	8c e4       	ldi	r24, 0x4C	; 76
     326:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     32a:	81 2f       	mov	r24, r17
     32c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     330:	80 2f       	mov	r24, r16
     332:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     336:	80 e7       	ldi	r24, 0x70	; 112
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD+0x3e>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD+0x44>
     340:	e1 2e       	mov	r14, r17
     342:	ff 24       	eor	r15, r15
     344:	49 81       	ldd	r20, Y+1	; 0x01
     346:	5a 81       	ldd	r21, Y+2	; 0x02
     348:	04 2f       	mov	r16, r20
     34a:	15 2f       	mov	r17, r21
     34c:	06 c0       	rjmp	.+12     	; 0x35a <LCD+0x5e>
		_delay_us(100);
    	while(((i++)<20)&&*string){
        	lcd_write_data(*string++);
     34e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     352:	94 ec       	ldi	r25, 0xC4	; 196
     354:	9a 95       	dec	r25
     356:	f1 f7       	brne	.-4      	; 0x354 <LCD+0x58>
     358:	00 c0       	rjmp	.+0      	; 0x35a <LCD+0x5e>

	if((Y_line<4) && (X_line<20)){
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
		lcd_write_data(X_line); lcd_write_data(Y_line);
		_delay_us(100);
    	while(((i++)<20)&&*string){
     35a:	e4 e1       	ldi	r30, 0x14	; 20
     35c:	ee 16       	cp	r14, r30
     35e:	f1 04       	cpc	r15, r1
     360:	44 f4       	brge	.+16     	; 0x372 <LCD+0x76>
     362:	f8 01       	movw	r30, r16
     364:	81 91       	ld	r24, Z+
     366:	8f 01       	movw	r16, r30
     368:	08 94       	sec
     36a:	e1 1c       	adc	r14, r1
     36c:	f1 1c       	adc	r15, r1
     36e:	88 23       	and	r24, r24
     370:	71 f7       	brne	.-36     	; 0x34e <LCD+0x52>
        	lcd_write_data(*string++);
			_delay_us(40);
		}
    }
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	08 95       	ret

00000384 <write_lcd_data>:

void write_lcd_data(unsigned char Y_line, unsigned char X_line, long data) //lcd单捞磐 静扁
{
     384:	1f 93       	push	r17
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	00 d0       	rcall	.+0      	; 0x38c <write_lcd_data+0x8>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	18 2f       	mov	r17, r24
    if(Y_line<4 && X_line<20){
     392:	84 30       	cpi	r24, 0x04	; 4
     394:	f0 f4       	brcc	.+60     	; 0x3d2 <write_lcd_data+0x4e>
     396:	64 31       	cpi	r22, 0x14	; 20
     398:	e0 f4       	brcc	.+56     	; 0x3d2 <write_lcd_data+0x4e>
		lcd_write_data(0x1B);   lcd_write_data(0x4C);
     39a:	8b e1       	ldi	r24, 0x1B	; 27
     39c:	2a 83       	std	Y+2, r18	; 0x02
     39e:	69 83       	std	Y+1, r22	; 0x01
     3a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     3a4:	8c e4       	ldi	r24, 0x4C	; 76
     3a6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
		lcd_write_data(X_line); lcd_write_data(Y_line);
     3aa:	69 81       	ldd	r22, Y+1	; 0x01
     3ac:	86 2f       	mov	r24, r22
     3ae:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     3b2:	81 2f       	mov	r24, r17
     3b4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <write_lcd_data+0x38>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <write_lcd_data+0x3e>
		_delay_us(100);
		lcd_write_data(data);
     3c2:	2a 81       	ldd	r18, Y+2	; 0x02
     3c4:	82 2f       	mov	r24, r18
     3c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     3ca:	94 ec       	ldi	r25, 0xC4	; 196
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <write_lcd_data+0x48>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <write_lcd_data+0x4e>
		_delay_us(40);
    }
}
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	1f 91       	pop	r17
     3dc:	08 95       	ret

000003de <lcd_clear_screen>:

void lcd_clear_screen(void){ lcd_write_data(0x1B); lcd_write_data(0x43); _delay_ms(20); } //lcd傈眉拳搁 努府绢
     3de:	8b e1       	ldi	r24, 0x1B	; 27
     3e0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
     3e4:	83 e4       	ldi	r24, 0x43	; 67
     3e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ea:	86 e6       	ldi	r24, 0x66	; 102
     3ec:	96 ee       	ldi	r25, 0xE6	; 230
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	a0 40       	sbci	r26, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <lcd_clear_screen+0x12>
     3f8:	08 95       	ret

000003fa <display_char>:
void display_char(unsigned char line, unsigned char col, unsigned char data) ////lcd char 单捞磐 钎矫
{
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	18 2f       	mov	r17, r24
     404:	f6 2e       	mov	r15, r22
     406:	e4 2e       	mov	r14, r20
    unsigned char val=0, val_buff=0;

	val=data;   

	val_buff=val/100;             
     408:	84 2f       	mov	r24, r20
     40a:	64 e6       	ldi	r22, 0x64	; 100
     40c:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <__udivmodqi4>
     410:	08 2f       	mov	r16, r24
	write_lcd_data(line, col, val_buff+'0' );
     412:	28 2f       	mov	r18, r24
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	20 5d       	subi	r18, 0xD0	; 208
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	44 27       	eor	r20, r20
     41c:	37 fd       	sbrc	r19, 7
     41e:	40 95       	com	r20
     420:	54 2f       	mov	r21, r20
     422:	81 2f       	mov	r24, r17
     424:	6f 2d       	mov	r22, r15
     426:	0e 94 c2 01 	call	0x384	; 0x384 <write_lcd_data>
	val=val-(100*val_buff);
     42a:	8c e9       	ldi	r24, 0x9C	; 156
     42c:	08 9f       	mul	r16, r24
     42e:	00 2d       	mov	r16, r0
     430:	11 24       	eor	r1, r1
     432:	0e 0d       	add	r16, r14

	val_buff=val/10;
     434:	80 2f       	mov	r24, r16
     436:	6a e0       	ldi	r22, 0x0A	; 10
     438:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <__udivmodqi4>
     43c:	e8 2e       	mov	r14, r24
	write_lcd_data(line, 1+col, val_buff+'0' );
     43e:	6f 2d       	mov	r22, r15
     440:	6f 5f       	subi	r22, 0xFF	; 255
     442:	28 2f       	mov	r18, r24
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	20 5d       	subi	r18, 0xD0	; 208
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	44 27       	eor	r20, r20
     44c:	37 fd       	sbrc	r19, 7
     44e:	40 95       	com	r20
     450:	54 2f       	mov	r21, r20
     452:	81 2f       	mov	r24, r17
     454:	0e 94 c2 01 	call	0x384	; 0x384 <write_lcd_data>
	val=val-(10*val_buff);

	write_lcd_data(line, 2+col, val+'0');
     458:	6f 2d       	mov	r22, r15
     45a:	6e 5f       	subi	r22, 0xFE	; 254
	write_lcd_data(line, col, val_buff+'0' );
	val=val-(100*val_buff);

	val_buff=val/10;
	write_lcd_data(line, 1+col, val_buff+'0' );
	val=val-(10*val_buff);
     45c:	26 ef       	ldi	r18, 0xF6	; 246
     45e:	e2 9e       	mul	r14, r18
     460:	20 2d       	mov	r18, r0
     462:	11 24       	eor	r1, r1
     464:	20 0f       	add	r18, r16

	write_lcd_data(line, 2+col, val+'0');
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	20 5d       	subi	r18, 0xD0	; 208
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	44 27       	eor	r20, r20
     46e:	37 fd       	sbrc	r19, 7
     470:	40 95       	com	r20
     472:	54 2f       	mov	r21, r20
     474:	81 2f       	mov	r24, r17
     476:	0e 94 c2 01 	call	0x384	; 0x384 <write_lcd_data>
}
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <main>:
int key= 0, key_puck;



int main(void)
{
     484:	2f 92       	push	r2
     486:	3f 92       	push	r3
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	df 93       	push	r29
     4a6:	cf 93       	push	r28
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <main+0x26>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x28>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62

    Interface_init();
     4b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Interface_init>

	write_gyro(0x1E, 1); // 瘤磊扁 OFF
     4b4:	8e e1       	ldi	r24, 0x1E	; 30
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 c8 00 	call	0x190	; 0x190 <write_gyro>
	write_gyro(0x1E, 5); // 磊捞肺 500dps	
     4bc:	8e e1       	ldi	r24, 0x1E	; 30
     4be:	65 e0       	ldi	r22, 0x05	; 5
     4c0:	0e 94 c8 00 	call	0x190	; 0x190 <write_gyro>
	write_gyro(0x1E, 20); // 瓷悼利 柳悼己盒力芭 OFF
     4c4:	8e e1       	ldi	r24, 0x1E	; 30
     4c6:	64 e1       	ldi	r22, 0x14	; 20
     4c8:	0e 94 c8 00 	call	0x190	; 0x190 <write_gyro>

	write_gyro(0x1E, 16); // 磊捞肺 焊沥
     4cc:	8e e1       	ldi	r24, 0x1E	; 30
     4ce:	60 e1       	ldi	r22, 0x10	; 16
     4d0:	0e 94 c8 00 	call	0x190	; 0x190 <write_gyro>

	Camera_init();
     4d4:	0e 94 46 30 	call	0x608c	; 0x608c <Camera_init>
	Setting(11);
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	0e 94 7e 30 	call	0x60fc	; 0x60fc <Setting>
	TM(80);
     4de:	80 e5       	ldi	r24, 0x50	; 80
     4e0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TM>
	V3
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	63 e1       	ldi	r22, 0x13	; 19
     4e8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
     4ec:	88 23       	and	r24, r24
     4ee:	d1 f3       	breq	.-12     	; 0x4e4 <main+0x60>
     4f0:	0f ef       	ldi	r16, 0xFF	; 255
     4f2:	1f e7       	ldi	r17, 0x7F	; 127
     4f4:	26 e1       	ldi	r18, 0x16	; 22
     4f6:	01 50       	subi	r16, 0x01	; 1
     4f8:	10 40       	sbci	r17, 0x00	; 0
     4fa:	20 40       	sbci	r18, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <main+0x72>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <main+0x7c>
     500:	00 00       	nop

	_delay_ms(500);

	set
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	dc 01       	movw	r26, r24
     508:	80 93 60 02 	sts	0x0260, r24
     50c:	90 93 61 02 	sts	0x0261, r25
     510:	a0 93 62 02 	sts	0x0262, r26
     514:	b0 93 63 02 	sts	0x0263, r27
     518:	20 91 60 02 	lds	r18, 0x0260
     51c:	30 91 61 02 	lds	r19, 0x0261
     520:	40 91 62 02 	lds	r20, 0x0262
     524:	50 91 63 02 	lds	r21, 0x0263
     528:	20 93 5c 02 	sts	0x025C, r18
     52c:	30 93 5d 02 	sts	0x025D, r19
     530:	40 93 5e 02 	sts	0x025E, r20
     534:	50 93 5f 02 	sts	0x025F, r21
     538:	20 91 5c 02 	lds	r18, 0x025C
     53c:	30 91 5d 02 	lds	r19, 0x025D
     540:	40 91 5e 02 	lds	r20, 0x025E
     544:	50 91 5f 02 	lds	r21, 0x025F
     548:	20 93 58 02 	sts	0x0258, r18
     54c:	30 93 59 02 	sts	0x0259, r19
     550:	40 93 5a 02 	sts	0x025A, r20
     554:	50 93 5b 02 	sts	0x025B, r21
     558:	80 93 6c 02 	sts	0x026C, r24
     55c:	90 93 6d 02 	sts	0x026D, r25
     560:	a0 93 6e 02 	sts	0x026E, r26
     564:	b0 93 6f 02 	sts	0x026F, r27
     568:	80 91 6c 02 	lds	r24, 0x026C
     56c:	90 91 6d 02 	lds	r25, 0x026D
     570:	a0 91 6e 02 	lds	r26, 0x026E
     574:	b0 91 6f 02 	lds	r27, 0x026F
     578:	80 93 68 02 	sts	0x0268, r24
     57c:	90 93 69 02 	sts	0x0269, r25
     580:	a0 93 6a 02 	sts	0x026A, r26
     584:	b0 93 6b 02 	sts	0x026B, r27
	ResetEncoder();
     588:	0e 94 b1 0a 	call	0x1562	; 0x1562 <ResetEncoder>

	LED_ON(3);
     58c:	c3 9a       	sbi	0x18, 3	; 24
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	3f e7       	ldi	r19, 0x7F	; 127
     592:	44 e0       	ldi	r20, 0x04	; 4
     594:	21 50       	subi	r18, 0x01	; 1
     596:	30 40       	sbci	r19, 0x00	; 0
     598:	40 40       	sbci	r20, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <main+0x110>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0x11a>
     59e:	00 00       	nop
	_delay_ms(100);
	LED_OFF(3);
     5a0:	c3 98       	cbi	0x18, 3	; 24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	e3 2e       	mov	r14, r19
     5a6:	31 e0       	ldi	r19, 0x01	; 1
     5a8:	f3 2e       	mov	r15, r19
     5aa:	29 e1       	ldi	r18, 0x19	; 25
     5ac:	c2 2e       	mov	r12, r18
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	d2 2e       	mov	r13, r18
		}
		else{
			lcd(0,0,"%03d %03d %03d %03d %03d",psd[2],psd[1],psd[0],psd[8],psd[7]);
			lcd(1,0,"%03d %03d      %03d %03d",psd[3],psd[4],psd[5],psd[6]);
		}
		key_puck = abs(key) %9;
     5b2:	99 e0       	ldi	r25, 0x09	; 9
     5b4:	49 2e       	mov	r4, r25
     5b6:	51 2c       	mov	r5, r1

		get_gyro();
		lcd(2,0,"C%d X%3d Y%3d S%2d",key_puck,Cmd(key_puck,102),Cmd(key_puck,103),Cmd(key_puck,104));		
     5b8:	82 e3       	ldi	r24, 0x32	; 50
     5ba:	28 2e       	mov	r2, r24
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	38 2e       	mov	r3, r24
	_delay_ms(100);
	LED_OFF(3);

	while(1)
	{		
	    if(SW1)
     5c0:	b4 99       	sbic	0x16, 4	; 22
     5c2:	10 c0       	rjmp	.+32     	; 0x5e4 <main+0x160>
		{
			key--;
     5c4:	80 91 00 02 	lds	r24, 0x0200
     5c8:	90 91 01 02 	lds	r25, 0x0201
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	90 93 01 02 	sts	0x0201, r25
     5d2:	80 93 00 02 	sts	0x0200, r24
     5d6:	46 e6       	ldi	r20, 0x66	; 102
     5d8:	56 e2       	ldi	r21, 0x26	; 38
     5da:	63 e0       	ldi	r22, 0x03	; 3
     5dc:	41 50       	subi	r20, 0x01	; 1
     5de:	50 40       	sbci	r21, 0x00	; 0
     5e0:	60 40       	sbci	r22, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x158>
			_delay_ms(70);
		}
	    if(SW3)
     5e4:	b6 99       	sbic	0x16, 6	; 22
     5e6:	10 c0       	rjmp	.+32     	; 0x608 <main+0x184>
		{
			key++;
     5e8:	80 91 00 02 	lds	r24, 0x0200
     5ec:	90 91 01 02 	lds	r25, 0x0201
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	90 93 01 02 	sts	0x0201, r25
     5f6:	80 93 00 02 	sts	0x0200, r24
     5fa:	66 e6       	ldi	r22, 0x66	; 102
     5fc:	76 e2       	ldi	r23, 0x26	; 38
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	61 50       	subi	r22, 0x01	; 1
     602:	70 40       	sbci	r23, 0x00	; 0
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <main+0x17c>
			_delay_ms(70);
		}
		
		
	    if(SW2)
     608:	b5 99       	sbic	0x16, 5	; 22
     60a:	0f c0       	rjmp	.+30     	; 0x62a <main+0x1a6>
		{
			lcd_clear_screen();
     60c:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_clear_screen>

			switch(key)
     610:	80 91 00 02 	lds	r24, 0x0200
     614:	90 91 01 02 	lds	r25, 0x0201
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	91 05       	cpc	r25, r1
     61c:	30 f4       	brcc	.+12     	; 0x62a <main+0x1a6>





SS();
     61e:	0e 94 20 11 	call	0x2240	; 0x2240 <SS>
while(!SW2);
     622:	b5 99       	sbic	0x16, 5	; 22
     624:	fe cf       	rjmp	.-4      	; 0x622 <main+0x19e>
while(SW2);
     626:	b5 9b       	sbis	0x16, 5	; 22
     628:	fe cf       	rjmp	.-4      	; 0x626 <main+0x1a2>

			}
		}

		if(key){
     62a:	80 91 00 02 	lds	r24, 0x0200
     62e:	90 91 01 02 	lds	r25, 0x0201
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	09 f4       	brne	.+2      	; 0x638 <main+0x1b4>
     636:	42 c0       	rjmp	.+132    	; 0x6bc <main+0x238>
			lcd(0,0,"%03d %03d %03d %03d %03d",g_psd[2],g_psd[1],g_psd[0],g_psd[8],g_psd[7]);
     638:	40 91 20 02 	lds	r20, 0x0220
     63c:	30 91 1f 02 	lds	r19, 0x021F
     640:	20 91 1e 02 	lds	r18, 0x021E
     644:	90 91 26 02 	lds	r25, 0x0226
     648:	80 91 25 02 	lds	r24, 0x0225
     64c:	ad b7       	in	r26, 0x3d	; 61
     64e:	be b7       	in	r27, 0x3e	; 62
     650:	1e 97       	sbiw	r26, 0x0e	; 14
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	be bf       	out	0x3e, r27	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	ad bf       	out	0x3d, r26	; 61
     65c:	ed b7       	in	r30, 0x3d	; 61
     65e:	fe b7       	in	r31, 0x3e	; 62
     660:	31 96       	adiw	r30, 0x01	; 1
     662:	07 e1       	ldi	r16, 0x17	; 23
     664:	13 e0       	ldi	r17, 0x03	; 3
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	1c 93       	st	X, r17
     66a:	0e 93       	st	-X, r16
     66c:	11 97       	sbiw	r26, 0x01	; 1
     66e:	f3 82       	std	Z+3, r15	; 0x03
     670:	e2 82       	std	Z+2, r14	; 0x02
     672:	44 83       	std	Z+4, r20	; 0x04
     674:	15 82       	std	Z+5, r1	; 0x05
     676:	36 83       	std	Z+6, r19	; 0x06
     678:	17 82       	std	Z+7, r1	; 0x07
     67a:	20 87       	std	Z+8, r18	; 0x08
     67c:	11 86       	std	Z+9, r1	; 0x09
     67e:	92 87       	std	Z+10, r25	; 0x0a
     680:	13 86       	std	Z+11, r1	; 0x0b
     682:	84 87       	std	Z+12, r24	; 0x0c
     684:	15 86       	std	Z+13, r1	; 0x0d
     686:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     68a:	2d b7       	in	r18, 0x3d	; 61
     68c:	3e b7       	in	r19, 0x3e	; 62
     68e:	22 5f       	subi	r18, 0xF2	; 242
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	3e bf       	out	0x3e, r19	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	2d bf       	out	0x3d, r18	; 61
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	a8 01       	movw	r20, r16
     6a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
			lcd(1,0,"%03d %03d      %03d %03d",g_psd[3],g_psd[4],g_psd[5],g_psd[6]);
     6aa:	30 91 21 02 	lds	r19, 0x0221
     6ae:	20 91 22 02 	lds	r18, 0x0222
     6b2:	90 91 23 02 	lds	r25, 0x0223
     6b6:	80 91 24 02 	lds	r24, 0x0224
     6ba:	44 c0       	rjmp	.+136    	; 0x744 <main+0x2c0>
		}
		else{
			lcd(0,0,"%03d %03d %03d %03d %03d",psd[2],psd[1],psd[0],psd[8],psd[7]);
     6bc:	40 91 34 02 	lds	r20, 0x0234
     6c0:	30 91 33 02 	lds	r19, 0x0233
     6c4:	20 91 32 02 	lds	r18, 0x0232
     6c8:	90 91 3a 02 	lds	r25, 0x023A
     6cc:	80 91 39 02 	lds	r24, 0x0239
     6d0:	0d b7       	in	r16, 0x3d	; 61
     6d2:	1e b7       	in	r17, 0x3e	; 62
     6d4:	0e 50       	subi	r16, 0x0E	; 14
     6d6:	10 40       	sbci	r17, 0x00	; 0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	1e bf       	out	0x3e, r17	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0d bf       	out	0x3d, r16	; 61
     6e2:	ed b7       	in	r30, 0x3d	; 61
     6e4:	fe b7       	in	r31, 0x3e	; 62
     6e6:	31 96       	adiw	r30, 0x01	; 1
     6e8:	07 e1       	ldi	r16, 0x17	; 23
     6ea:	13 e0       	ldi	r17, 0x03	; 3
     6ec:	ad b7       	in	r26, 0x3d	; 61
     6ee:	be b7       	in	r27, 0x3e	; 62
     6f0:	12 96       	adiw	r26, 0x02	; 2
     6f2:	1c 93       	st	X, r17
     6f4:	0e 93       	st	-X, r16
     6f6:	11 97       	sbiw	r26, 0x01	; 1
     6f8:	f3 82       	std	Z+3, r15	; 0x03
     6fa:	e2 82       	std	Z+2, r14	; 0x02
     6fc:	44 83       	std	Z+4, r20	; 0x04
     6fe:	15 82       	std	Z+5, r1	; 0x05
     700:	36 83       	std	Z+6, r19	; 0x06
     702:	17 82       	std	Z+7, r1	; 0x07
     704:	20 87       	std	Z+8, r18	; 0x08
     706:	11 86       	std	Z+9, r1	; 0x09
     708:	92 87       	std	Z+10, r25	; 0x0a
     70a:	13 86       	std	Z+11, r1	; 0x0b
     70c:	84 87       	std	Z+12, r24	; 0x0c
     70e:	15 86       	std	Z+13, r1	; 0x0d
     710:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     714:	2d b7       	in	r18, 0x3d	; 61
     716:	3e b7       	in	r19, 0x3e	; 62
     718:	22 5f       	subi	r18, 0xF2	; 242
     71a:	3f 4f       	sbci	r19, 0xFF	; 255
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	3e bf       	out	0x3e, r19	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	2d bf       	out	0x3d, r18	; 61
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	a8 01       	movw	r20, r16
     730:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
			lcd(1,0,"%03d %03d      %03d %03d",psd[3],psd[4],psd[5],psd[6]);
     734:	30 91 35 02 	lds	r19, 0x0235
     738:	20 91 36 02 	lds	r18, 0x0236
     73c:	90 91 37 02 	lds	r25, 0x0237
     740:	80 91 38 02 	lds	r24, 0x0238
     744:	4d b7       	in	r20, 0x3d	; 61
     746:	5e b7       	in	r21, 0x3e	; 62
     748:	4c 50       	subi	r20, 0x0C	; 12
     74a:	50 40       	sbci	r21, 0x00	; 0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	5e bf       	out	0x3e, r21	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	4d bf       	out	0x3d, r20	; 61
     756:	ed b7       	in	r30, 0x3d	; 61
     758:	fe b7       	in	r31, 0x3e	; 62
     75a:	31 96       	adiw	r30, 0x01	; 1
     75c:	ad b7       	in	r26, 0x3d	; 61
     75e:	be b7       	in	r27, 0x3e	; 62
     760:	12 96       	adiw	r26, 0x02	; 2
     762:	1c 93       	st	X, r17
     764:	0e 93       	st	-X, r16
     766:	11 97       	sbiw	r26, 0x01	; 1
     768:	d3 82       	std	Z+3, r13	; 0x03
     76a:	c2 82       	std	Z+2, r12	; 0x02
     76c:	34 83       	std	Z+4, r19	; 0x04
     76e:	15 82       	std	Z+5, r1	; 0x05
     770:	26 83       	std	Z+6, r18	; 0x06
     772:	17 82       	std	Z+7, r1	; 0x07
     774:	90 87       	std	Z+8, r25	; 0x08
     776:	11 86       	std	Z+9, r1	; 0x09
     778:	82 87       	std	Z+10, r24	; 0x0a
     77a:	13 86       	std	Z+11, r1	; 0x0b
     77c:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     780:	ed b7       	in	r30, 0x3d	; 61
     782:	fe b7       	in	r31, 0x3e	; 62
     784:	3c 96       	adiw	r30, 0x0c	; 12
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	fe bf       	out	0x3e, r31	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	ed bf       	out	0x3d, r30	; 61
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	a8 01       	movw	r20, r16
     79a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
		}
		key_puck = abs(key) %9;
     79e:	80 91 00 02 	lds	r24, 0x0200
     7a2:	90 91 01 02 	lds	r25, 0x0201
     7a6:	97 ff       	sbrs	r25, 7
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <main+0x32c>
     7aa:	90 95       	com	r25
     7ac:	81 95       	neg	r24
     7ae:	9f 4f       	sbci	r25, 0xFF	; 255
     7b0:	b2 01       	movw	r22, r4
     7b2:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
     7b6:	90 93 57 02 	sts	0x0257, r25
     7ba:	80 93 56 02 	sts	0x0256, r24

		get_gyro();
     7be:	0e 94 46 08 	call	0x108c	; 0x108c <get_gyro>
		lcd(2,0,"C%d X%3d Y%3d S%2d",key_puck,Cmd(key_puck,102),Cmd(key_puck,103),Cmd(key_puck,104));		
     7c2:	80 91 56 02 	lds	r24, 0x0256
     7c6:	66 e6       	ldi	r22, 0x66	; 102
     7c8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
     7cc:	88 2e       	mov	r8, r24
     7ce:	80 91 56 02 	lds	r24, 0x0256
     7d2:	67 e6       	ldi	r22, 0x67	; 103
     7d4:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
     7d8:	a8 2e       	mov	r10, r24
     7da:	00 91 56 02 	lds	r16, 0x0256
     7de:	60 90 57 02 	lds	r6, 0x0257
     7e2:	80 2f       	mov	r24, r16
     7e4:	68 e6       	ldi	r22, 0x68	; 104
     7e6:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
     7ea:	2d b7       	in	r18, 0x3d	; 61
     7ec:	3e b7       	in	r19, 0x3e	; 62
     7ee:	2c 50       	subi	r18, 0x0C	; 12
     7f0:	30 40       	sbci	r19, 0x00	; 0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	3e bf       	out	0x3e, r19	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	2d bf       	out	0x3d, r18	; 61
     7fc:	ed b7       	in	r30, 0x3d	; 61
     7fe:	fe b7       	in	r31, 0x3e	; 62
     800:	31 96       	adiw	r30, 0x01	; 1
     802:	27 e1       	ldi	r18, 0x17	; 23
     804:	33 e0       	ldi	r19, 0x03	; 3
     806:	ad b7       	in	r26, 0x3d	; 61
     808:	be b7       	in	r27, 0x3e	; 62
     80a:	12 96       	adiw	r26, 0x02	; 2
     80c:	3c 93       	st	X, r19
     80e:	2e 93       	st	-X, r18
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	33 82       	std	Z+3, r3	; 0x03
     814:	22 82       	std	Z+2, r2	; 0x02
     816:	04 83       	std	Z+4, r16	; 0x04
     818:	65 82       	std	Z+5, r6	; 0x05
     81a:	86 82       	std	Z+6, r8	; 0x06
     81c:	17 82       	std	Z+7, r1	; 0x07
     81e:	a0 86       	std	Z+8, r10	; 0x08
     820:	11 86       	std	Z+9, r1	; 0x09
     822:	82 87       	std	Z+10, r24	; 0x0a
     824:	13 86       	std	Z+11, r1	; 0x0b
     826:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     82a:	4d b7       	in	r20, 0x3d	; 61
     82c:	5e b7       	in	r21, 0x3e	; 62
     82e:	44 5f       	subi	r20, 0xF4	; 244
     830:	5f 4f       	sbci	r21, 0xFF	; 255
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	5e bf       	out	0x3e, r21	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	4d bf       	out	0x3d, r20	; 61
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	47 e1       	ldi	r20, 0x17	; 23
     846:	53 e0       	ldi	r21, 0x03	; 3
     848:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
		lcd(3,0,"%d%d%d%d%d|%d%d G%04d",IR_4,IR_1,IR_2,IR_3,IR_5,IND_1,IND_2, (int)gyro);
     84c:	20 91 85 02 	lds	r18, 0x0285
     850:	30 91 86 02 	lds	r19, 0x0286
     854:	60 91 87 02 	lds	r22, 0x0287
     858:	70 91 88 02 	lds	r23, 0x0288
     85c:	7a 83       	std	Y+2, r23	; 0x02
     85e:	69 83       	std	Y+1, r22	; 0x01
     860:	80 91 83 02 	lds	r24, 0x0283
     864:	90 91 84 02 	lds	r25, 0x0284
     868:	9c 83       	std	Y+4, r25	; 0x04
     86a:	8b 83       	std	Y+3, r24	; 0x03
     86c:	a0 91 3d 03 	lds	r26, 0x033D
     870:	b0 91 3e 03 	lds	r27, 0x033E
     874:	a0 90 11 03 	lds	r10, 0x0311
     878:	b0 90 12 03 	lds	r11, 0x0312
     87c:	80 90 8d 02 	lds	r8, 0x028D
     880:	90 90 8e 02 	lds	r9, 0x028E
     884:	60 90 81 02 	lds	r6, 0x0281
     888:	70 90 82 02 	lds	r7, 0x0282
     88c:	60 91 68 02 	lds	r22, 0x0268
     890:	70 91 69 02 	lds	r23, 0x0269
     894:	80 91 6a 02 	lds	r24, 0x026A
     898:	90 91 6b 02 	lds	r25, 0x026B
     89c:	ed b7       	in	r30, 0x3d	; 61
     89e:	fe b7       	in	r31, 0x3e	; 62
     8a0:	74 97       	sbiw	r30, 0x14	; 20
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	fe bf       	out	0x3e, r31	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	ed bf       	out	0x3d, r30	; 61
     8ac:	0d b7       	in	r16, 0x3d	; 61
     8ae:	1e b7       	in	r17, 0x3e	; 62
     8b0:	0f 5f       	subi	r16, 0xFF	; 255
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	47 e1       	ldi	r20, 0x17	; 23
     8b6:	53 e0       	ldi	r21, 0x03	; 3
     8b8:	52 83       	std	Z+2, r21	; 0x02
     8ba:	41 83       	std	Z+1, r20	; 0x01
     8bc:	45 e4       	ldi	r20, 0x45	; 69
     8be:	51 e0       	ldi	r21, 0x01	; 1
     8c0:	f8 01       	movw	r30, r16
     8c2:	53 83       	std	Z+3, r21	; 0x03
     8c4:	42 83       	std	Z+2, r20	; 0x02
     8c6:	35 83       	std	Z+5, r19	; 0x05
     8c8:	24 83       	std	Z+4, r18	; 0x04
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	3a 81       	ldd	r19, Y+2	; 0x02
     8ce:	37 83       	std	Z+7, r19	; 0x07
     8d0:	26 83       	std	Z+6, r18	; 0x06
     8d2:	4b 81       	ldd	r20, Y+3	; 0x03
     8d4:	5c 81       	ldd	r21, Y+4	; 0x04
     8d6:	51 87       	std	Z+9, r21	; 0x09
     8d8:	40 87       	std	Z+8, r20	; 0x08
     8da:	b3 87       	std	Z+11, r27	; 0x0b
     8dc:	a2 87       	std	Z+10, r26	; 0x0a
     8de:	b5 86       	std	Z+13, r11	; 0x0d
     8e0:	a4 86       	std	Z+12, r10	; 0x0c
     8e2:	97 86       	std	Z+15, r9	; 0x0f
     8e4:	86 86       	std	Z+14, r8	; 0x0e
     8e6:	71 8a       	std	Z+17, r7	; 0x11
     8e8:	60 8a       	std	Z+16, r6	; 0x10
     8ea:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
     8ee:	d8 01       	movw	r26, r16
     8f0:	53 96       	adiw	r26, 0x13	; 19
     8f2:	7c 93       	st	X, r23
     8f4:	6e 93       	st	-X, r22
     8f6:	52 97       	sbiw	r26, 0x12	; 18
     8f8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     8fc:	ed b7       	in	r30, 0x3d	; 61
     8fe:	fe b7       	in	r31, 0x3e	; 62
     900:	74 96       	adiw	r30, 0x14	; 20
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	fe bf       	out	0x3e, r31	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	ed bf       	out	0x3d, r30	; 61
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	47 e1       	ldi	r20, 0x17	; 23
     916:	53 e0       	ldi	r21, 0x03	; 3
     918:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
		lcd(3,16,"k:%02d",key);
     91c:	00 d0       	rcall	.+0      	; 0x91e <main+0x49a>
     91e:	00 d0       	rcall	.+0      	; 0x920 <main+0x49c>
     920:	00 d0       	rcall	.+0      	; 0x922 <main+0x49e>
     922:	ed b7       	in	r30, 0x3d	; 61
     924:	fe b7       	in	r31, 0x3e	; 62
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	07 e1       	ldi	r16, 0x17	; 23
     92a:	13 e0       	ldi	r17, 0x03	; 3
     92c:	ad b7       	in	r26, 0x3d	; 61
     92e:	be b7       	in	r27, 0x3e	; 62
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	1c 93       	st	X, r17
     934:	0e 93       	st	-X, r16
     936:	11 97       	sbiw	r26, 0x01	; 1
     938:	2b e5       	ldi	r18, 0x5B	; 91
     93a:	31 e0       	ldi	r19, 0x01	; 1
     93c:	33 83       	std	Z+3, r19	; 0x03
     93e:	22 83       	std	Z+2, r18	; 0x02
     940:	80 91 00 02 	lds	r24, 0x0200
     944:	90 91 01 02 	lds	r25, 0x0201
     948:	95 83       	std	Z+5, r25	; 0x05
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
     950:	4d b7       	in	r20, 0x3d	; 61
     952:	5e b7       	in	r21, 0x3e	; 62
     954:	4a 5f       	subi	r20, 0xFA	; 250
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	5e bf       	out	0x3e, r21	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	4d bf       	out	0x3d, r20	; 61
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	60 e1       	ldi	r22, 0x10	; 16
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	a8 01       	movw	r20, r16
     96c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	}
     970:	27 ce       	rjmp	.-946    	; 0x5c0 <main+0x13c>

00000972 <ReadData>:
unsigned char ReadData(unsigned char motor)
{
    unsigned char data;

    // Status Byte狼 Busy Bit 眉农
    CHECK_BUSY(motor, status);
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	b0 96       	adiw	r30, 0x20	; 32
     978:	fe 2f       	mov	r31, r30
     97a:	ee 27       	eor	r30, r30
     97c:	20 81       	ld	r18, Z
     97e:	20 93 7c 02 	sts	0x027C, r18
     982:	20 fd       	sbrc	r18, 0
     984:	fb cf       	rjmp	.-10     	; 0x97c <ReadData+0xa>
    // 单捞磐 涝仿
    data = MOTOR_DATA(motor);
     986:	88 96       	adiw	r24, 0x28	; 40
     988:	b8 2f       	mov	r27, r24
     98a:	aa 27       	eor	r26, r26
     98c:	8c 91       	ld	r24, X

	CHECK_BUSY(motor, status);
     98e:	90 81       	ld	r25, Z
     990:	90 93 7c 02 	sts	0x027C, r25
     994:	90 fd       	sbrc	r25, 0
     996:	fb cf       	rjmp	.-10     	; 0x98e <ReadData+0x1c>
    // 涝仿等 单捞磐 府畔
    return data;
}    
     998:	08 95       	ret

0000099a <WriteCommand>:
// Return    : 绝澜

void WriteCommand(unsigned char motor, unsigned char cmd)
{
    // Status Byte狼 Busy Bit 眉农
    CHECK_BUSY(motor, status);
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	80 96       	adiw	r24, 0x20	; 32
     99e:	f8 2f       	mov	r31, r24
     9a0:	ee 27       	eor	r30, r30
     9a2:	80 81       	ld	r24, Z
     9a4:	80 93 7c 02 	sts	0x027C, r24
     9a8:	80 fd       	sbrc	r24, 0
     9aa:	fb cf       	rjmp	.-10     	; 0x9a2 <WriteCommand+0x8>
    // 目盖靛 免仿
    MOTOR_CMD(motor) = cmd;
     9ac:	60 83       	st	Z, r22

	CHECK_BUSY(motor, status);
     9ae:	80 81       	ld	r24, Z
     9b0:	80 93 7c 02 	sts	0x027C, r24
     9b4:	80 fd       	sbrc	r24, 0
     9b6:	fb cf       	rjmp	.-10     	; 0x9ae <WriteCommand+0x14>
}
     9b8:	08 95       	ret

000009ba <StartMotion>:
// Parameter : 绝澜
// Return    : 绝澜
void StartMotion(void)

{
    WriteCommand(MOTOR0, STT);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    WriteCommand(MOTOR2, STT);
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    WriteCommand(MOTOR1, STT);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
}
     9d2:	08 95       	ret

000009d4 <WriteDataTwoByte>:
//      data  - 镜 单捞磐
// Return    : 绝澜
void WriteDataTwoByte(unsigned char motor, int data)
{
    // Status Byte狼 Busy Bit 眉农
    CHECK_BUSY(motor, status);
     9d4:	a8 2f       	mov	r26, r24
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	fd 01       	movw	r30, r26
     9da:	b0 96       	adiw	r30, 0x20	; 32
     9dc:	fe 2f       	mov	r31, r30
     9de:	ee 27       	eor	r30, r30
     9e0:	80 81       	ld	r24, Z
     9e2:	80 93 7c 02 	sts	0x027C, r24
     9e6:	80 fd       	sbrc	r24, 0
     9e8:	fb cf       	rjmp	.-10     	; 0x9e0 <WriteDataTwoByte+0xc>
    // 2 官捞飘 单捞磐 免仿
    MOTOR_DATA(motor) = (uint8_t)((data >> 8)&0xFF);
     9ea:	98 96       	adiw	r26, 0x28	; 40
     9ec:	ba 2f       	mov	r27, r26
     9ee:	aa 27       	eor	r26, r26
     9f0:	87 2f       	mov	r24, r23
     9f2:	99 27       	eor	r25, r25
     9f4:	87 fd       	sbrc	r24, 7
     9f6:	9a 95       	dec	r25
     9f8:	8c 93       	st	X, r24
	CHECK_BUSY(motor, status);
     9fa:	80 81       	ld	r24, Z
     9fc:	80 93 7c 02 	sts	0x027C, r24
     a00:	80 fd       	sbrc	r24, 0
     a02:	fb cf       	rjmp	.-10     	; 0x9fa <WriteDataTwoByte+0x26>
    MOTOR_DATA(motor) = (uint8_t)(data&0xFF);
     a04:	6c 93       	st	X, r22
	CHECK_BUSY(motor, status);
     a06:	80 81       	ld	r24, Z
     a08:	80 93 7c 02 	sts	0x027C, r24
     a0c:	80 fd       	sbrc	r24, 0
     a0e:	fb cf       	rjmp	.-10     	; 0xa06 <WriteDataTwoByte+0x32>
}
     a10:	08 95       	ret

00000a12 <StopMotion>:

// Function  : 葛电 葛磐狼 葛记阑 沥瘤茄促.
// Parameter : 绝澜
// Return    : 绝澜
void StopMotion(uint16_t mode)
{
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	18 2f       	mov	r17, r24
    // Motor1 沥瘤
    // LTRJ 目盖靛 免仿
    WriteCommand(MOTOR0, LTRJ);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	6f e1       	ldi	r22, 0x1F	; 31
     a1e:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿
    WriteDataTwoByte(MOTOR0, (1 << mode));
     a22:	c1 e0       	ldi	r28, 0x01	; 1
     a24:	d0 e0       	ldi	r29, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <StopMotion+0x1a>
     a28:	cc 0f       	add	r28, r28
     a2a:	dd 1f       	adc	r29, r29
     a2c:	1a 95       	dec	r17
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <StopMotion+0x16>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	be 01       	movw	r22, r28
     a34:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>

    // Motor2 沥瘤
    // LTRJ 目盖靛 免仿
    WriteCommand(MOTOR1, LTRJ);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	6f e1       	ldi	r22, 0x1F	; 31
     a3c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿
    WriteDataTwoByte(MOTOR1, (1 << mode));
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	be 01       	movw	r22, r28
     a44:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>

    // Motor3 沥瘤
    // LTRJ 目盖靛 免仿
    WriteCommand(MOTOR2, LTRJ);
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	6f e1       	ldi	r22, 0x1F	; 31
     a4c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿
    WriteDataTwoByte(MOTOR2, (1 << mode));
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	be 01       	movw	r22, r28
     a54:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>

    // 葛记 沥瘤
    WriteCommand(MOTOR0, STT);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    WriteCommand(MOTOR2, STT);
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    WriteCommand(MOTOR1, STT);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	08 95       	ret

00000a78 <WriteDataFourByte>:
// Parameter :
//      motor - 急琶且 葛磐
//      data  - 镜 单捞磐
// Return    : 绝澜
void WriteDataFourByte(unsigned char motor, long data)
{
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	d8 2e       	mov	r13, r24
     a84:	7a 01       	movw	r14, r20
     a86:	8b 01       	movw	r16, r22
    // 4 官捞飘狼 单捞磐甫 笛肺 唱穿绢辑 WriteDataTwoByte窃荐甫 滴锅 龋免
    WriteDataTwoByte(motor, (int16_t)(data >> 16));
     a88:	9b 01       	movw	r18, r22
     a8a:	55 27       	eor	r21, r21
     a8c:	37 fd       	sbrc	r19, 7
     a8e:	50 95       	com	r21
     a90:	45 2f       	mov	r20, r21
     a92:	b9 01       	movw	r22, r18
     a94:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    WriteDataTwoByte(motor, (int16_t)(data));
     a98:	8d 2d       	mov	r24, r13
     a9a:	b7 01       	movw	r22, r14
     a9c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
}
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	08 95       	ret

00000aac <Motor_Reset>:
// Function  : LM629甫 府悸茄促.
// Parameter :
//      motor - 急琶且 葛磐
// Return    : 绝澜
void Motor_Reset(uint8_t motor)
{
     aac:	1f 93       	push	r17
     aae:	18 2f       	mov	r17, r24
    // RESET 目盖靛 免仿
    WriteCommand(motor, RESET);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
     ab6:	8c ec       	ldi	r24, 0xCC	; 204
     ab8:	9c e1       	ldi	r25, 0x1C	; 28
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <Motor_Reset+0xe>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <Motor_Reset+0x14>
     ac0:	00 00       	nop
    // 府悸捞 肯丰瞪 锭鳖瘤 弥家 1.5ms捞惑 措扁
    _delay_ms(2);
	// Morot1 牢磐反飘 付胶农 府悸
    WriteCommand(motor, RSTI);
     ac2:	81 2f       	mov	r24, r17
     ac4:	6d e1       	ldi	r22, 0x1D	; 29
     ac6:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    WriteDataTwoByte(motor, 0x0000);
     aca:	81 2f       	mov	r24, r17
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
}
     ad4:	1f 91       	pop	r17
     ad6:	08 95       	ret

00000ad8 <SetGain>:
//      kp    - P蔼
//      ki    - I蔼
//      kd    - D蔼
// Return    : 绝澜
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
{
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	f8 2e       	mov	r15, r24
     aee:	6b 01       	movw	r12, r22
     af0:	ea 01       	movw	r28, r20
     af2:	89 01       	movw	r16, r18
//      motor - 急琶且 葛磐
//      kp    - P蔼
//      ki    - I蔼
//      kd    - D蔼
// Return    : 绝澜
void SetGain(uint8_t motor, int16_t kp, int16_t ki, int16_t kd)
     af4:	aa 24       	eor	r10, r10
     af6:	a3 94       	inc	r10
     af8:	61 15       	cp	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	09 f4       	brne	.+2      	; 0xb00 <SetGain+0x28>
     afe:	aa 24       	eor	r10, r10
     b00:	bb 24       	eor	r11, r11
     b02:	b3 94       	inc	r11
     b04:	20 97       	sbiw	r28, 0x00	; 0
     b06:	09 f4       	brne	.+2      	; 0xb0a <SetGain+0x32>
     b08:	bb 24       	eor	r11, r11
     b0a:	ee 24       	eor	r14, r14
     b0c:	e3 94       	inc	r14
     b0e:	01 15       	cp	r16, r1
     b10:	11 05       	cpc	r17, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <SetGain+0x3e>
     b14:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 目盖靛 免仿
    WriteCommand(motor, LFIL);
     b16:	8f 2d       	mov	r24, r15
     b18:	6e e1       	ldi	r22, 0x1E	; 30
     b1a:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿, sampling interval篮 341us 绊沥
    WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1)  );
     b1e:	6b 2d       	mov	r22, r11
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	66 0f       	add	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	8a 2d       	mov	r24, r10
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	43 e0       	ldi	r20, 0x03	; 3
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	4a 95       	dec	r20
     b36:	e1 f7       	brne	.-8      	; 0xb30 <SetGain+0x58>
     b38:	68 2b       	or	r22, r24
     b3a:	79 2b       	or	r23, r25
     b3c:	8e 2d       	mov	r24, r14
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	68 2b       	or	r22, r24
     b46:	79 2b       	or	r23, r25
     b48:	8f 2d       	mov	r24, r15
     b4a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    ////////////////////////////
	// P蔼 免仿
	if(kp)WriteDataTwoByte(motor, kp);
     b4e:	aa 20       	and	r10, r10
     b50:	21 f0       	breq	.+8      	; 0xb5a <SetGain+0x82>
     b52:	8f 2d       	mov	r24, r15
     b54:	b6 01       	movw	r22, r12
     b56:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // I蔼 免仿
    if(ki)WriteDataTwoByte(motor, ki);
     b5a:	bb 20       	and	r11, r11
     b5c:	21 f0       	breq	.+8      	; 0xb66 <SetGain+0x8e>
     b5e:	8f 2d       	mov	r24, r15
     b60:	be 01       	movw	r22, r28
     b62:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // D蔼 免仿
    if(kd)WriteDataTwoByte(motor, kd);
     b66:	ee 20       	and	r14, r14
     b68:	21 f0       	breq	.+8      	; 0xb72 <SetGain+0x9a>
     b6a:	8f 2d       	mov	r24, r15
     b6c:	b8 01       	movw	r22, r16
     b6e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // 鞘磐 诀单捞飘
    WriteCommand(motor, UDF);
     b72:	8f 2d       	mov	r24, r15
     b74:	64 e0       	ldi	r22, 0x04	; 4
     b76:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	08 95       	ret

00000b90 <SetGain2>:

void SetGain2(uint8_t motor, int16_t kp, int16_t ki, int16_t kd, int16_t iL)
{
     b90:	8f 92       	push	r8
     b92:	9f 92       	push	r9
     b94:	af 92       	push	r10
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	f8 2e       	mov	r15, r24
     baa:	4b 01       	movw	r8, r22
     bac:	6a 01       	movw	r12, r20
     bae:	e9 01       	movw	r28, r18
    if(kd)WriteDataTwoByte(motor, kd);
    // 鞘磐 诀单捞飘
    WriteCommand(motor, UDF);
}

void SetGain2(uint8_t motor, int16_t kp, int16_t ki, int16_t kd, int16_t iL)
     bb0:	aa 24       	eor	r10, r10
     bb2:	a3 94       	inc	r10
     bb4:	61 15       	cp	r22, r1
     bb6:	71 05       	cpc	r23, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <SetGain2+0x2c>
     bba:	aa 24       	eor	r10, r10
     bbc:	bb 24       	eor	r11, r11
     bbe:	b3 94       	inc	r11
     bc0:	c1 14       	cp	r12, r1
     bc2:	d1 04       	cpc	r13, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <SetGain2+0x38>
     bc6:	bb 24       	eor	r11, r11
     bc8:	ee 24       	eor	r14, r14
     bca:	e3 94       	inc	r14
     bcc:	20 97       	sbiw	r28, 0x00	; 0
     bce:	09 f4       	brne	.+2      	; 0xbd2 <SetGain2+0x42>
     bd0:	ee 24       	eor	r14, r14
	if(ki)LD_ki=1;
	else LD_ki=0;
	if(kd)LD_kd=1;
	else LD_kd=0;
	// LFIL 目盖靛 免仿
	WriteCommand(motor, LFIL);
     bd2:	8f 2d       	mov	r24, r15
     bd4:	6e e1       	ldi	r22, 0x1E	; 30
     bd6:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
	// 牧飘费 况靛 免仿, sampling interval篮 341us 绊沥
	WriteDataTwoByte(motor, (0x0000) | (LD_kp << 3) | (LD_ki << 2) | (LD_kd << 1) | 0x01  );
     bda:	6a 2d       	mov	r22, r10
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	a3 e0       	ldi	r26, 0x03	; 3
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	aa 95       	dec	r26
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <SetGain2+0x50>
     be8:	61 60       	ori	r22, 0x01	; 1
     bea:	8b 2d       	mov	r24, r11
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	68 2b       	or	r22, r24
     bf8:	79 2b       	or	r23, r25
     bfa:	8e 2d       	mov	r24, r14
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	68 2b       	or	r22, r24
     c04:	79 2b       	or	r23, r25
     c06:	8f 2d       	mov	r24, r15
     c08:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
	////////////////////////////
	// P蔼 免仿
	if(kp)WriteDataTwoByte(motor, kp);
     c0c:	aa 20       	and	r10, r10
     c0e:	21 f0       	breq	.+8      	; 0xc18 <SetGain2+0x88>
     c10:	8f 2d       	mov	r24, r15
     c12:	b4 01       	movw	r22, r8
     c14:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
	// I蔼 免仿
	if(ki)WriteDataTwoByte(motor, ki);
     c18:	bb 20       	and	r11, r11
     c1a:	21 f0       	breq	.+8      	; 0xc24 <SetGain2+0x94>
     c1c:	8f 2d       	mov	r24, r15
     c1e:	b6 01       	movw	r22, r12
     c20:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
	// D蔼 免仿
	if(kd)WriteDataTwoByte(motor, kd);
     c24:	ee 20       	and	r14, r14
     c26:	21 f0       	breq	.+8      	; 0xc30 <SetGain2+0xa0>
     c28:	8f 2d       	mov	r24, r15
     c2a:	be 01       	movw	r22, r28
     c2c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
	
	WriteDataTwoByte(motor, iL);
     c30:	8f 2d       	mov	r24, r15
     c32:	b8 01       	movw	r22, r16
     c34:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
	
	// 鞘磐 诀单捞飘
	WriteCommand(motor, UDF);
     c38:	8f 2d       	mov	r24, r15
     c3a:	64 e0       	ldi	r22, 0x04	; 4
     c3c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	08 95       	ret

00000c5a <SetAcceleration>:
// Parameter :
//      motor - 急琶且 葛磐
//      acc   - 啊加档蔼
// Return    : 绝澜
void SetAcceleration(uint8_t motor, int32_t acc)
{
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	d8 2e       	mov	r13, r24
     c66:	7a 01       	movw	r14, r20
     c68:	8b 01       	movw	r16, r22
    // LTRJ 目盖靛 免仿
    WriteCommand(motor, LTRJ);
     c6a:	6f e1       	ldi	r22, 0x1F	; 31
     c6c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿
    WriteDataTwoByte(motor, (1 << ACC_LOAD));
     c70:	8d 2d       	mov	r24, r13
     c72:	60 e2       	ldi	r22, 0x20	; 32
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // 啊加档蔼 免仿
    WriteDataFourByte(motor, acc);
     c7a:	8d 2d       	mov	r24, r13
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	0e 94 3c 05 	call	0xa78	; 0xa78 <WriteDataFourByte>
}
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	08 95       	ret

00000c90 <Motor_init>:
// Function  : 葛磐 檬扁拳
// Parameter : 绝澜
// Return    : 绝澜
void Motor_init(void)
{
    SetGain(MOTOR0, 16, 0, 64); ////////////// 16, 0, 64肺 傈何 函版
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	60 e1       	ldi	r22, 0x10	; 16
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	20 e4       	ldi	r18, 0x40	; 64
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	0e 94 6c 05 	call	0xad8	; 0xad8 <SetGain>
    SetGain(MOTOR1, 16, 0, 64);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	20 e4       	ldi	r18, 0x40	; 64
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	0e 94 6c 05 	call	0xad8	; 0xad8 <SetGain>
    SetGain(MOTOR2, 16, 0, 64);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	60 e1       	ldi	r22, 0x10	; 16
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	20 e4       	ldi	r18, 0x40	; 64
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	0e 94 6c 05 	call	0xad8	; 0xad8 <SetGain>
	SetGain2(0,100,30,100,0x7FFF);
	SetGain2(1,100,30,100,0x7FFF);
	SetGain2(2,100,30,100,0x7FFF);
	*/
		
    SetAcceleration(MOTOR0, 0x3FFFFFFF);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	4f ef       	ldi	r20, 0xFF	; 255
     cca:	5f ef       	ldi	r21, 0xFF	; 255
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	7f e3       	ldi	r23, 0x3F	; 63
     cd0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SetAcceleration>
    SetAcceleration(MOTOR1, 0x3FFFFFFF);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	4f ef       	ldi	r20, 0xFF	; 255
     cd8:	5f ef       	ldi	r21, 0xFF	; 255
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	7f e3       	ldi	r23, 0x3F	; 63
     cde:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SetAcceleration>
    SetAcceleration(MOTOR2, 0x3FFFFFFF);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	4f ef       	ldi	r20, 0xFF	; 255
     ce6:	5f ef       	ldi	r21, 0xFF	; 255
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	7f e3       	ldi	r23, 0x3F	; 63
     cec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SetAcceleration>
}
     cf0:	08 95       	ret

00000cf2 <SetVelocity>:
// Parameter :
//      motor    - 急琶且 葛磐
//      velocity - 加档 汲沥  (0 ~ 1,073,741,823) 澜荐 涝仿矫 开规氢栏肺 雀傈
// Return    : 绝澜
void SetVelocity(uint8_t motor, int32_t velocity)
{
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	d8 2e       	mov	r13, r24
     d08:	7a 01       	movw	r14, r20
     d0a:	8b 01       	movw	r16, r22
	unsigned char dir=1;

	if(velocity<0){
     d0c:	77 ff       	sbrs	r23, 7
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <SetVelocity+0x32>
		velocity*=(-1);
     d10:	10 95       	com	r17
     d12:	00 95       	com	r16
     d14:	f0 94       	com	r15
     d16:	e0 94       	com	r14
     d18:	e1 1c       	adc	r14, r1
     d1a:	f1 1c       	adc	r15, r1
     d1c:	01 1d       	adc	r16, r1
     d1e:	11 1d       	adc	r17, r1
		dir=0;
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <SetVelocity+0x34>
//      motor    - 急琶且 葛磐
//      velocity - 加档 汲沥  (0 ~ 1,073,741,823) 澜荐 涝仿矫 开规氢栏肺 雀傈
// Return    : 绝澜
void SetVelocity(uint8_t motor, int32_t velocity)
{
	unsigned char dir=1;
     d24:	91 e0       	ldi	r25, 0x01	; 1
	if(velocity<0){
		velocity*=(-1);
		dir=0;
	}
    // LTRJ 目盖靛 免仿
    WriteCommand(motor, LTRJ);        
     d26:	8d 2d       	mov	r24, r13
     d28:	6f e1       	ldi	r22, 0x1F	; 31
     d2a:	99 83       	std	Y+1, r25	; 0x01
     d2c:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿        
    WriteDataTwoByte(motor,  (dir << FORWARD_DIR) | (1 << VELOCITY_MODE) | (1 << VELOCITY_LOAD));
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	79 2f       	mov	r23, r25
     d34:	72 95       	swap	r23
     d36:	70 7f       	andi	r23, 0xF0	; 240
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	68 60       	ori	r22, 0x08	; 8
     d3c:	78 60       	ori	r23, 0x08	; 8
     d3e:	8d 2d       	mov	r24, r13
     d40:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // 加档蔼 免仿
    WriteDataFourByte(motor, velocity);
     d44:	8d 2d       	mov	r24, r13
     d46:	b8 01       	movw	r22, r16
     d48:	a7 01       	movw	r20, r14
     d4a:	0e 94 3c 05 	call	0xa78	; 0xa78 <WriteDataFourByte>
}
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	08 95       	ret

00000d60 <MOTOR_CTR>:
    WriteCommand(MOTOR2, STT);
    WriteCommand(MOTOR1, STT);
}


void MOTOR_CTR(long MT0,long MT1,long MT2){
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2c 97       	sbiw	r28, 0x0c	; 12
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	59 01       	movw	r10, r18
     d86:	6a 01       	movw	r12, r20
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};
     d88:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
     d8c:	69 83       	std	Y+1, r22	; 0x01
     d8e:	7a 83       	std	Y+2, r23	; 0x02
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	c6 01       	movw	r24, r12
     d96:	b5 01       	movw	r22, r10
     d98:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
     d9c:	6d 83       	std	Y+5, r22	; 0x05
     d9e:	7e 83       	std	Y+6, r23	; 0x06
     da0:	8f 83       	std	Y+7, r24	; 0x07
     da2:	98 87       	std	Y+8, r25	; 0x08
     da4:	c8 01       	movw	r24, r16
     da6:	b7 01       	movw	r22, r14
     da8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
     dac:	69 87       	std	Y+9, r22	; 0x09
     dae:	7a 87       	std	Y+10, r23	; 0x0a
     db0:	8b 87       	std	Y+11, r24	; 0x0b
     db2:	9c 87       	std	Y+12, r25	; 0x0c
     db4:	8e 01       	movw	r16, r28
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	1f 4f       	sbci	r17, 0xFF	; 255

	for(i=0;i<3;++i){
     dba:	ee 24       	eor	r14, r14
		
		V[i]=V[i]*0.2728;
     dbc:	f8 01       	movw	r30, r16
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	21 e7       	ldi	r18, 0x71	; 113
     dc8:	3c ea       	ldi	r19, 0xAC	; 172
     dca:	4b e8       	ldi	r20, 0x8B	; 139
     dcc:	5e e3       	ldi	r21, 0x3E	; 62
     dce:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	f8 01       	movw	r30, r16
     dd8:	21 93       	st	Z+, r18
     dda:	31 93       	st	Z+, r19
     ddc:	41 93       	st	Z+, r20
     dde:	51 93       	st	Z+, r21
     de0:	8f 01       	movw	r16, r30

		SetVelocity(i, V[i]*65536);
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	57 e4       	ldi	r21, 0x47	; 71
     dea:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
     dee:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
     df2:	ab 01       	movw	r20, r22
     df4:	bc 01       	movw	r22, r24
     df6:	8e 2d       	mov	r24, r14
     df8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SetVelocity>
void MOTOR_CTR(long MT0,long MT1,long MT2){
	
	unsigned char i=0;
	double V[3]={MT0,MT1,MT2};

	for(i=0;i<3;++i){
     dfc:	e3 94       	inc	r14
     dfe:	fe 2d       	mov	r31, r14
     e00:	f3 30       	cpi	r31, 0x03	; 3
     e02:	e1 f6       	brne	.-72     	; 0xdbc <MOTOR_CTR+0x5c>
		
		V[i]=V[i]*0.2728;

		SetVelocity(i, V[i]*65536);
	}
	StartMotion();	
     e04:	0e 94 dd 04 	call	0x9ba	; 0x9ba <StartMotion>
}
     e08:	2c 96       	adiw	r28, 0x0c	; 12
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	08 95       	ret

00000e2a <SetPosition>:
//		acc   - 啊加档 汲沥  (0 ~ 1,073,741,823)
//   velocity - 加档 汲沥    (0 ~ 1,073,741,823)
//   position - 葛磐困摹汲沥 (-1,073,741,824 ~ 1,073,741,823)counts
// Return    : 绝澜
void SetPosition(uint8_t motor, uint8_t mode, int32_t acc,int32_t velocity,int32_t position)
{
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	98 2e       	mov	r9, r24
     e48:	86 2e       	mov	r8, r22
     e4a:	29 01       	movw	r4, r18
     e4c:	3a 01       	movw	r6, r20
    // LTRJ 目盖靛 免仿
    WriteCommand(motor, LTRJ);
     e4e:	6f e1       	ldi	r22, 0x1F	; 31
     e50:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    // 牧飘费 况靛 免仿
    // mode : 0 - Absolute Position, 1 - Relative Position
    // Position Mode肺 汲沥
    
	WriteDataTwoByte(motor, (1 << ACC_LOAD) | (1 << VELOCITY_LOAD) | (1 << POSITION_LOAD) | (mode << POSITION_RELATIVE) );//WriteDataTwoByte(motor, 0x2A|mode);
     e54:	68 2d       	mov	r22, r8
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	6a 62       	ori	r22, 0x2A	; 42
     e5a:	89 2d       	mov	r24, r9
     e5c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
    // 困摹蔼 免仿
	WriteDataFourByte(motor, acc);    
     e60:	89 2d       	mov	r24, r9
     e62:	b3 01       	movw	r22, r6
     e64:	a2 01       	movw	r20, r4
     e66:	0e 94 3c 05 	call	0xa78	; 0xa78 <WriteDataFourByte>
	WriteDataFourByte(motor, velocity);
     e6a:	89 2d       	mov	r24, r9
     e6c:	b8 01       	movw	r22, r16
     e6e:	a7 01       	movw	r20, r14
     e70:	0e 94 3c 05 	call	0xa78	; 0xa78 <WriteDataFourByte>
    WriteDataFourByte(motor, position);
     e74:	89 2d       	mov	r24, r9
     e76:	b6 01       	movw	r22, r12
     e78:	a5 01       	movw	r20, r10
     e7a:	0e 94 3c 05 	call	0xa78	; 0xa78 <WriteDataFourByte>
}
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	7f 90       	pop	r7
     e94:	6f 90       	pop	r6
     e96:	5f 90       	pop	r5
     e98:	4f 90       	pop	r4
     e9a:	08 95       	ret

00000e9c <LM629_HW_Reset>:

// Function  : LM629 H/W Reset. 弥檬 傈盔 牢啊矫 馆靛矫 角青秦具茄促.
// Parameter : 绝澜
// Return    : 绝澜
void LM629_HW_Reset(void){
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <LM629_HW_Reset+0x1a>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	unsigned char status[3]={0, }, i=0, step=0;
	
	DDRA=0x00;
     ebc:	1a ba       	out	0x1a, r1	; 26

	PORTC=0x00;
     ebe:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	84 bb       	out	0x14, r24	; 20

	PORTG=0x00;
     ec4:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x03;
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	80 93 64 00 	sts	0x0064, r24
			}
		}
		
		if(step==1){
			// SRE : 寇何 单捞磐 皋葛府 康开 劝己拳
			MCUCR = (1 << SRE) | (0 << SRW10);
     ece:	00 e8       	ldi	r16, 0x80	; 128
     ed0:	a0 2e       	mov	r10, r16
		    // SRL(0) : Upper Sector肺父 荤侩 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 脚龋俊 2俺狼 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
     ed2:	12 e0       	ldi	r17, 0x02	; 2
     ed4:	b1 2e       	mov	r11, r17
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8鳖瘤父 寇何 皋葛府 器飘肺 荤侩
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
     ed6:	b4 e8       	ldi	r27, 0x84	; 132
     ed8:	9b 2e       	mov	r9, r27
     eda:	6e 01       	movw	r12, r28
     edc:	08 94       	sec
     ede:	c1 1c       	adc	r12, r1
     ee0:	d1 1c       	adc	r13, r1
	DDRG=0x03;

	while(1){
		if(step==0){
			while(1){
				PORTC |= 0x05; //Hw Rst Hi(decoder = Low)
     ee2:	85 b3       	in	r24, 0x15	; 21
     ee4:	85 60       	ori	r24, 0x05	; 5
     ee6:	85 bb       	out	0x15, r24	; 21
     ee8:	83 e3       	ldi	r24, 0x33	; 51
     eea:	9b e2       	ldi	r25, 0x2B	; 43
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <LM629_HW_Reset+0x50>
				_delay_ms(3);
				PORTC &= ~0x05; //Hw Rst Low(decoder = Hi)
     ef0:	85 b3       	in	r24, 0x15	; 21
     ef2:	8a 7f       	andi	r24, 0xFA	; 250
     ef4:	85 bb       	out	0x15, r24	; 21
     ef6:	ec ec       	ldi	r30, 0xCC	; 204
     ef8:	fc e1       	ldi	r31, 0x1C	; 28
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <LM629_HW_Reset+0x5e>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <LM629_HW_Reset+0x64>
     f00:	00 00       	nop
				_delay_ms(2);

				PORTG &= ~0x02; //RD low
     f02:	80 91 65 00 	lds	r24, 0x0065
     f06:	8d 7f       	andi	r24, 0xFD	; 253
     f08:	80 93 65 00 	sts	0x0065, r24
				PORTC &= ~0x08; //PS low
     f0c:	ab 98       	cbi	0x15, 3	; 21
		
				PORTC &=~0x07;	//cs motor0
     f0e:	85 b3       	in	r24, 0x15	; 21
     f10:	88 7f       	andi	r24, 0xF8	; 248
     f12:	85 bb       	out	0x15, r24	; 21
				status[0]=PINA; //Read status motor0
     f14:	99 b3       	in	r25, 0x19	; 25
     f16:	99 83       	std	Y+1, r25	; 0x01
				
				PORTC |=0x01;	//cs motor1
     f18:	a8 9a       	sbi	0x15, 0	; 21
				status[1]=PINA; //Read status motor0
     f1a:	19 b3       	in	r17, 0x19	; 25
				
				PORTC = (PORTC&0xF8)|0x02; 	//cs motor2
     f1c:	85 b3       	in	r24, 0x15	; 21
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	85 bb       	out	0x15, r24	; 21
				status[2]=PINA;  //Read status motor0
     f24:	09 b3       	in	r16, 0x19	; 25


				if( (status[0]==0xC4||status[0]==0x84) ){
     f26:	94 3c       	cpi	r25, 0xC4	; 196
     f28:	09 f4       	brne	.+2      	; 0xf2c <LM629_HW_Reset+0x90>
     f2a:	a7 c0       	rjmp	.+334    	; 0x107a <LM629_HW_Reset+0x1de>
     f2c:	94 38       	cpi	r25, 0x84	; 132
     f2e:	09 f4       	brne	.+2      	; 0xf32 <LM629_HW_Reset+0x96>
     f30:	a4 c0       	rjmp	.+328    	; 0x107a <LM629_HW_Reset+0x1de>
						step=1;
						break;
				}
				else{
					PORTC=0x00;
     f32:	15 ba       	out	0x15, r1	; 21
					LCD(0,0,"STEP1");
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	42 e6       	ldi	r20, 0x62	; 98
     f3e:	51 e0       	ldi	r21, 0x01	; 1
     f40:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
					LCD(1,0,"Error1. Restart");
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	48 e6       	ldi	r20, 0x68	; 104
     f4e:	51 e0       	ldi	r21, 0x01	; 1
     f50:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
				}
				if((status[1]==0xC4||status[1]==0x84)){
     f54:	14 3c       	cpi	r17, 0xC4	; 196
     f56:	09 f4       	brne	.+2      	; 0xf5a <LM629_HW_Reset+0xbe>
     f58:	90 c0       	rjmp	.+288    	; 0x107a <LM629_HW_Reset+0x1de>
     f5a:	14 38       	cpi	r17, 0x84	; 132
     f5c:	09 f4       	brne	.+2      	; 0xf60 <LM629_HW_Reset+0xc4>
     f5e:	8d c0       	rjmp	.+282    	; 0x107a <LM629_HW_Reset+0x1de>
					step=1;
					break;
				}
				else{
					PORTC=0x00;
     f60:	15 ba       	out	0x15, r1	; 21
					LCD(0,0,"STEP1");
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	42 e6       	ldi	r20, 0x62	; 98
     f6c:	51 e0       	ldi	r21, 0x01	; 1
     f6e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
					LCD(2,0,"Error2. Restart");
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	48 e7       	ldi	r20, 0x78	; 120
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
				}
				if( (status[2]==0xC4||status[2]==0x84) ){
     f82:	04 3c       	cpi	r16, 0xC4	; 196
     f84:	09 f4       	brne	.+2      	; 0xf88 <LM629_HW_Reset+0xec>
     f86:	79 c0       	rjmp	.+242    	; 0x107a <LM629_HW_Reset+0x1de>
     f88:	04 38       	cpi	r16, 0x84	; 132
     f8a:	09 f4       	brne	.+2      	; 0xf8e <LM629_HW_Reset+0xf2>
     f8c:	76 c0       	rjmp	.+236    	; 0x107a <LM629_HW_Reset+0x1de>
					step=1;
					break;
				}
				else{
					PORTC=0x00;
     f8e:	15 ba       	out	0x15, r1	; 21
					LCD(0,0,"STEP1");
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	42 e6       	ldi	r20, 0x62	; 98
     f9a:	51 e0       	ldi	r21, 0x01	; 1
     f9c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
					LCD(3,0,"Error3. Restart");
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	48 e8       	ldi	r20, 0x88	; 136
     faa:	51 e0       	ldi	r21, 0x01	; 1
     fac:	2d c0       	rjmp	.+90     	; 0x1008 <LM629_HW_Reset+0x16c>
				}
			}
     fae:	8e 2c       	mov	r8, r14
     fb0:	8c 18       	sub	r8, r12
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8鳖瘤父 寇何 皋葛府 器飘肺 荤侩
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
		        	WriteCommand(i, RSTI);
     fb2:	88 2d       	mov	r24, r8
     fb4:	6d e1       	ldi	r22, 0x1D	; 29
     fb6:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
					WriteDataTwoByte(i, 0x0000);
     fba:	88 2d       	mov	r24, r8
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <WriteDataTwoByte>
					READ_STATUS(i, status[i]);
     fc4:	f8 01       	movw	r30, r16
     fc6:	80 81       	ld	r24, Z
     fc8:	f7 01       	movw	r30, r14
     fca:	81 93       	st	Z+, r24
     fcc:	7f 01       	movw	r14, r30
     fce:	00 50       	subi	r16, 0x00	; 0
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
		    // SRW11:SRW10(1:0) - Read/Write 脚龋俊 2俺狼 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8鳖瘤父 寇何 皋葛府 器飘肺 荤侩
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
			while(1){
				for(i=0;i<3;++i){
     fd2:	f3 e2       	ldi	r31, 0x23	; 35
     fd4:	00 30       	cpi	r16, 0x00	; 0
     fd6:	1f 07       	cpc	r17, r31
     fd8:	51 f7       	brne	.-44     	; 0xfae <LM629_HW_Reset+0x112>
		        	WriteCommand(i, RSTI);
					WriteDataTwoByte(i, 0x0000);
					READ_STATUS(i, status[i]);
				}
				
				if( (status[0]==0xC0||status[0]==0x80) ){
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	80 3c       	cpi	r24, 0xC0	; 192
     fde:	b9 f0       	breq	.+46     	; 0x100e <LM629_HW_Reset+0x172>
     fe0:	80 38       	cpi	r24, 0x80	; 128
     fe2:	a9 f0       	breq	.+42     	; 0x100e <LM629_HW_Reset+0x172>
					step=2;
					break;
				}
				else{	//促矫 贸澜何磐 LM629檬扁拳
					step=0;	
					MCUCR &= ~(1 << SRE) & ~(1 << SRW10);
     fe4:	85 b7       	in	r24, 0x35	; 53
     fe6:	8f 73       	andi	r24, 0x3F	; 63
     fe8:	85 bf       	out	0x35, r24	; 53
					PORTC=0x00;
     fea:	15 ba       	out	0x15, r1	; 21
					LCD(0,0,"STEP2");
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	48 e9       	ldi	r20, 0x98	; 152
     ff6:	51 e0       	ldi	r21, 0x01	; 1
     ff8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
					LCD(1,0,"Error1. Restart");
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	48 e6       	ldi	r20, 0x68	; 104
    1006:	51 e0       	ldi	r21, 0x01	; 1
    1008:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
    100c:	6a cf       	rjmp	.-300    	; 0xee2 <LM629_HW_Reset+0x46>
					break;
				}
			}
		}
		if(step==2){
			LCD(0,0,"Initialize success.");
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	4e e9       	ldi	r20, 0x9E	; 158
    1018:	51 e0       	ldi	r21, 0x01	; 1
    101a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
			for(i=0;i<3;++i){
    101e:	80 e0       	ldi	r24, 0x00	; 0
				PORTB|=0x07;
    1020:	98 b3       	in	r25, 0x18	; 24
    1022:	97 60       	ori	r25, 0x07	; 7
    1024:	98 bb       	out	0x18, r25	; 24
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	3f eb       	ldi	r19, 0xBF	; 191
    102a:	46 e0       	ldi	r20, 0x06	; 6
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	30 40       	sbci	r19, 0x00	; 0
    1030:	40 40       	sbci	r20, 0x00	; 0
    1032:	e1 f7       	brne	.-8      	; 0x102c <LM629_HW_Reset+0x190>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <LM629_HW_Reset+0x19a>
    1036:	00 00       	nop
				_delay_ms(150);
				PORTB&=~0x07;
    1038:	98 b3       	in	r25, 0x18	; 24
    103a:	98 7f       	andi	r25, 0xF8	; 248
    103c:	98 bb       	out	0x18, r25	; 24
    103e:	2f ef       	ldi	r18, 0xFF	; 255
    1040:	3f eb       	ldi	r19, 0xBF	; 191
    1042:	46 e0       	ldi	r20, 0x06	; 6
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	40 40       	sbci	r20, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <LM629_HW_Reset+0x1a8>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <LM629_HW_Reset+0x1b2>
    104e:	00 00       	nop
				}
			}
		}
		if(step==2){
			LCD(0,0,"Initialize success.");
			for(i=0;i<3;++i){
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	29 f7       	brne	.-54     	; 0x1020 <LM629_HW_Reset+0x184>
				PORTB|=0x07;
				_delay_ms(150);
				PORTB&=~0x07;
				_delay_ms(150);
			}
			lcd_clear_screen();
    1056:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_clear_screen>
			break;
		}
	}
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	08 95       	ret
			}
		}
		
		if(step==1){
			// SRE : 寇何 单捞磐 皋葛府 康开 劝己拳
			MCUCR = (1 << SRE) | (0 << SRW10);
    107a:	a5 be       	out	0x35, r10	; 53
		    // SRL(0) : Upper Sector肺父 荤侩 0x1100 ~ 0xFFFF(Upper)
		    // SRW11:SRW10(1:0) - Read/Write 脚龋俊 2俺狼 Wait
			XMCRA = (0 << SRL2) | (0 << SRL1) | (0 << SRL0) | (1 << SRW11);
    107c:	b0 92 6d 00 	sts	0x006D, r11
		    //XMBK : Bus Keeper Enable, XMM(0x4) - A11 ~ A8鳖瘤父 寇何 皋葛府 器飘肺 荤侩
			XMCRB = (1 << XMBK) | (1 << XMM2) | (0 << XMM1) | (0 << XMM0);
    1080:	90 92 6c 00 	sts	0x006C, r9
    1084:	76 01       	movw	r14, r12
    1086:	00 e0       	ldi	r16, 0x00	; 0
    1088:	10 e2       	ldi	r17, 0x20	; 32
    108a:	91 cf       	rjmp	.-222    	; 0xfae <LM629_HW_Reset+0x112>

0000108c <get_gyro>:

volatile double front, gyro,rearGyro,pos[3];



void get_gyro(){
    108c:	4f 92       	push	r4
    108e:	5f 92       	push	r5
    1090:	6f 92       	push	r6
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
	retry:
	yaw=read_gyro(0x04);//YAW 惑困8厚飘
	yaw<<=8;
	yaw|=read_gyro(0x05);//YAW 窍困8厚飘
	
	now = yaw/100;
    10ac:	84 e6       	ldi	r24, 0x64	; 100
    10ae:	88 2e       	mov	r8, r24
    10b0:	91 2c       	mov	r9, r1
void get_gyro(){
	int yaw;
	double now;

	retry:
	yaw=read_gyro(0x04);//YAW 惑困8厚飘
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	0e 94 8d 00 	call	0x11a	; 0x11a <read_gyro>
	yaw<<=8;
    10b8:	98 2f       	mov	r25, r24
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	ec 01       	movw	r28, r24
	yaw|=read_gyro(0x05);//YAW 窍困8厚飘
    10be:	85 e0       	ldi	r24, 0x05	; 5
    10c0:	0e 94 8d 00 	call	0x11a	; 0x11a <read_gyro>
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	8c 2b       	or	r24, r28
    10c8:	9d 2b       	or	r25, r29
	
	now = yaw/100;
    10ca:	b4 01       	movw	r22, r8
    10cc:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    10d0:	88 27       	eor	r24, r24
    10d2:	77 fd       	sbrc	r23, 7
    10d4:	80 95       	com	r24
    10d6:	98 2f       	mov	r25, r24
    10d8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    10dc:	f6 2e       	mov	r15, r22
    10de:	07 2f       	mov	r16, r23
    10e0:	18 2f       	mov	r17, r24
    10e2:	e9 2e       	mov	r14, r25
    10e4:	46 2e       	mov	r4, r22
    10e6:	57 2e       	mov	r5, r23
    10e8:	68 2e       	mov	r6, r24
    10ea:	79 2e       	mov	r7, r25

	if(fabs(now) > 180) goto retry;
    10ec:	63 01       	movw	r12, r6
    10ee:	52 01       	movw	r10, r4
    10f0:	e8 94       	clt
    10f2:	d7 f8       	bld	r13, 7
    10f4:	c6 01       	movw	r24, r12
    10f6:	b5 01       	movw	r22, r10
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	44 e3       	ldi	r20, 0x34	; 52
    10fe:	53 e4       	ldi	r21, 0x43	; 67
    1100:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    1104:	18 16       	cp	r1, r24
    1106:	ac f2       	brlt	.-86     	; 0x10b2 <get_gyro+0x26>

	if(front == now) return;
    1108:	60 91 64 02 	lds	r22, 0x0264
    110c:	70 91 65 02 	lds	r23, 0x0265
    1110:	80 91 66 02 	lds	r24, 0x0266
    1114:	90 91 67 02 	lds	r25, 0x0267
    1118:	2f 2d       	mov	r18, r15
    111a:	30 2f       	mov	r19, r16
    111c:	41 2f       	mov	r20, r17
    111e:	5e 2d       	mov	r21, r14
    1120:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <__stack+0x2b>
    1128:	e5 c0       	rjmp	.+458    	; 0x12f4 <__stack+0x1f5>

	if(now < 0 && front > 0){
    112a:	6f 2d       	mov	r22, r15
    112c:	70 2f       	mov	r23, r16
    112e:	81 2f       	mov	r24, r17
    1130:	9e 2d       	mov	r25, r14
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    113c:	87 ff       	sbrs	r24, 7
    113e:	5d c0       	rjmp	.+186    	; 0x11fa <__stack+0xfb>
    1140:	60 91 64 02 	lds	r22, 0x0264
    1144:	70 91 65 02 	lds	r23, 0x0265
    1148:	80 91 66 02 	lds	r24, 0x0266
    114c:	90 91 67 02 	lds	r25, 0x0267
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    115a:	18 16       	cp	r1, r24
    115c:	0c f0       	brlt	.+2      	; 0x1160 <__stack+0x61>
    115e:	4d c0       	rjmp	.+154    	; 0x11fa <__stack+0xfb>
		if( ( fabs(now) + fabs(front) ) < 180)  gyro += now - front;
    1160:	20 91 64 02 	lds	r18, 0x0264
    1164:	30 91 65 02 	lds	r19, 0x0265
    1168:	40 91 66 02 	lds	r20, 0x0266
    116c:	50 91 67 02 	lds	r21, 0x0267
    1170:	5f 77       	andi	r21, 0x7F	; 127
    1172:	c6 01       	movw	r24, r12
    1174:	b5 01       	movw	r22, r10
    1176:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	44 e3       	ldi	r20, 0x34	; 52
    1180:	53 e4       	ldi	r21, 0x43	; 67
    1182:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    1186:	87 ff       	sbrs	r24, 7
    1188:	15 c0       	rjmp	.+42     	; 0x11b4 <__stack+0xb5>
    118a:	a0 90 68 02 	lds	r10, 0x0268
    118e:	b0 90 69 02 	lds	r11, 0x0269
    1192:	c0 90 6a 02 	lds	r12, 0x026A
    1196:	d0 90 6b 02 	lds	r13, 0x026B
    119a:	20 91 64 02 	lds	r18, 0x0264
    119e:	30 91 65 02 	lds	r19, 0x0265
    11a2:	40 91 66 02 	lds	r20, 0x0266
    11a6:	50 91 67 02 	lds	r21, 0x0267
    11aa:	6f 2d       	mov	r22, r15
    11ac:	70 2f       	mov	r23, r16
    11ae:	81 2f       	mov	r24, r17
    11b0:	9e 2d       	mov	r25, r14
    11b2:	1c c0       	rjmp	.+56     	; 0x11ec <__stack+0xed>
		else								 	gyro += 359-(front-now);
    11b4:	a0 90 68 02 	lds	r10, 0x0268
    11b8:	b0 90 69 02 	lds	r11, 0x0269
    11bc:	c0 90 6a 02 	lds	r12, 0x026A
    11c0:	d0 90 6b 02 	lds	r13, 0x026B
    11c4:	60 91 64 02 	lds	r22, 0x0264
    11c8:	70 91 65 02 	lds	r23, 0x0265
    11cc:	80 91 66 02 	lds	r24, 0x0266
    11d0:	90 91 67 02 	lds	r25, 0x0267
    11d4:	2f 2d       	mov	r18, r15
    11d6:	30 2f       	mov	r19, r16
    11d8:	41 2f       	mov	r20, r17
    11da:	5e 2d       	mov	r21, r14
    11dc:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    11e0:	9b 01       	movw	r18, r22
    11e2:	ac 01       	movw	r20, r24
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e8       	ldi	r23, 0x80	; 128
    11e8:	83 eb       	ldi	r24, 0xB3	; 179
    11ea:	93 e4       	ldi	r25, 0x43	; 67
    11ec:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	c6 01       	movw	r24, r12
    11f6:	b5 01       	movw	r22, r10
    11f8:	69 c0       	rjmp	.+210    	; 0x12cc <__stack+0x1cd>
	}

	else if(now > 0 && front < 0){
    11fa:	c3 01       	movw	r24, r6
    11fc:	b2 01       	movw	r22, r4
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    1208:	18 16       	cp	r1, r24
    120a:	0c f0       	brlt	.+2      	; 0x120e <__stack+0x10f>
    120c:	47 c0       	rjmp	.+142    	; 0x129c <__stack+0x19d>
    120e:	60 91 64 02 	lds	r22, 0x0264
    1212:	70 91 65 02 	lds	r23, 0x0265
    1216:	80 91 66 02 	lds	r24, 0x0266
    121a:	90 91 67 02 	lds	r25, 0x0267
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    1228:	87 ff       	sbrs	r24, 7
    122a:	38 c0       	rjmp	.+112    	; 0x129c <__stack+0x19d>
		if( ( fabs(now) + fabs(front) ) < 180)	gyro += now-front;
    122c:	20 91 64 02 	lds	r18, 0x0264
    1230:	30 91 65 02 	lds	r19, 0x0265
    1234:	40 91 66 02 	lds	r20, 0x0266
    1238:	50 91 67 02 	lds	r21, 0x0267
    123c:	5f 77       	andi	r21, 0x7F	; 127
    123e:	c6 01       	movw	r24, r12
    1240:	b5 01       	movw	r22, r10
    1242:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	44 e3       	ldi	r20, 0x34	; 52
    124c:	53 e4       	ldi	r21, 0x43	; 67
    124e:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    1252:	87 fd       	sbrc	r24, 7
    1254:	23 c0       	rjmp	.+70     	; 0x129c <__stack+0x19d>
		else									gyro -= 359-(now-front);
    1256:	e0 90 68 02 	lds	r14, 0x0268
    125a:	f0 90 69 02 	lds	r15, 0x0269
    125e:	00 91 6a 02 	lds	r16, 0x026A
    1262:	10 91 6b 02 	lds	r17, 0x026B
    1266:	20 91 64 02 	lds	r18, 0x0264
    126a:	30 91 65 02 	lds	r19, 0x0265
    126e:	40 91 66 02 	lds	r20, 0x0266
    1272:	50 91 67 02 	lds	r21, 0x0267
    1276:	c3 01       	movw	r24, r6
    1278:	b2 01       	movw	r22, r4
    127a:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    127e:	9b 01       	movw	r18, r22
    1280:	ac 01       	movw	r20, r24
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e8       	ldi	r23, 0x80	; 128
    1286:	83 eb       	ldi	r24, 0xB3	; 179
    1288:	93 e4       	ldi	r25, 0x43	; 67
    128a:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    128e:	9b 01       	movw	r18, r22
    1290:	ac 01       	movw	r20, r24
    1292:	c8 01       	movw	r24, r16
    1294:	b7 01       	movw	r22, r14
    1296:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    129a:	1a c0       	rjmp	.+52     	; 0x12d0 <__stack+0x1d1>
	}

	else
		gyro += now - front;
    129c:	e0 90 68 02 	lds	r14, 0x0268
    12a0:	f0 90 69 02 	lds	r15, 0x0269
    12a4:	00 91 6a 02 	lds	r16, 0x026A
    12a8:	10 91 6b 02 	lds	r17, 0x026B
    12ac:	20 91 64 02 	lds	r18, 0x0264
    12b0:	30 91 65 02 	lds	r19, 0x0265
    12b4:	40 91 66 02 	lds	r20, 0x0266
    12b8:	50 91 67 02 	lds	r21, 0x0267
    12bc:	c3 01       	movw	r24, r6
    12be:	b2 01       	movw	r22, r4
    12c0:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	c8 01       	movw	r24, r16
    12ca:	b7 01       	movw	r22, r14
    12cc:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	20 93 68 02 	sts	0x0268, r18
    12d8:	30 93 69 02 	sts	0x0269, r19
    12dc:	40 93 6a 02 	sts	0x026A, r20
    12e0:	50 93 6b 02 	sts	0x026B, r21

	front = now;
    12e4:	40 92 64 02 	sts	0x0264, r4
    12e8:	50 92 65 02 	sts	0x0265, r5
    12ec:	60 92 66 02 	sts	0x0266, r6
    12f0:	70 92 67 02 	sts	0x0267, r7
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	9f 90       	pop	r9
    130a:	8f 90       	pop	r8
    130c:	7f 90       	pop	r7
    130e:	6f 90       	pop	r6
    1310:	5f 90       	pop	r5
    1312:	4f 90       	pop	r4
    1314:	08 95       	ret

00001316 <speed>:




void speed(double fy, double fx, double fz, double w_a) 
{
    1316:	2f 92       	push	r2
    1318:	3f 92       	push	r3
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	62 97       	sbiw	r28, 0x12	; 18
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	69 83       	std	Y+1, r22	; 0x01
    134c:	7a 83       	std	Y+2, r23	; 0x02
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	3e 83       	std	Y+6, r19	; 0x06
    1356:	4f 83       	std	Y+7, r20	; 0x07
    1358:	58 87       	std	Y+8, r21	; 0x08
    135a:	37 01       	movw	r6, r14
    135c:	48 01       	movw	r8, r16
   double v[3] ,ra1[3],ra2[3],da1=720-w_a,da2;
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	84 e3       	ldi	r24, 0x34	; 52
    1364:	94 e4       	ldi	r25, 0x44	; 68
    1366:	a6 01       	movw	r20, r12
    1368:	95 01       	movw	r18, r10
    136a:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    136e:	16 2f       	mov	r17, r22
    1370:	07 2f       	mov	r16, r23
    1372:	f8 2e       	mov	r15, r24
    1374:	e9 2e       	mov	r14, r25
   int a=150;
   sgx=fx,sgy=fy,sga=w_a;
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	af 81       	ldd	r26, Y+7	; 0x07
    137c:	b8 85       	ldd	r27, Y+8	; 0x08
    137e:	80 93 7d 02 	sts	0x027D, r24
    1382:	90 93 7e 02 	sts	0x027E, r25
    1386:	a0 93 7f 02 	sts	0x027F, r26
    138a:	b0 93 80 02 	sts	0x0280, r27
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	ab 81       	ldd	r26, Y+3	; 0x03
    1394:	bc 81       	ldd	r27, Y+4	; 0x04
    1396:	80 93 13 03 	sts	0x0313, r24
    139a:	90 93 14 03 	sts	0x0314, r25
    139e:	a0 93 15 03 	sts	0x0315, r26
    13a2:	b0 93 16 03 	sts	0x0316, r27
    13a6:	a0 92 89 02 	sts	0x0289, r10
    13aa:	b0 92 8a 02 	sts	0x028A, r11
    13ae:	c0 92 8b 02 	sts	0x028B, r12
    13b2:	d0 92 8c 02 	sts	0x028C, r13

   if(w_a<=180)   da1 -= 360;
    13b6:	c6 01       	movw	r24, r12
    13b8:	b5 01       	movw	r22, r10
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	44 e3       	ldi	r20, 0x34	; 52
    13c0:	53 e4       	ldi	r21, 0x43	; 67
    13c2:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    13c6:	18 16       	cp	r1, r24
    13c8:	84 f0       	brlt	.+32     	; 0x13ea <speed+0xd4>
    13ca:	a8 01       	movw	r20, r16
    13cc:	97 01       	movw	r18, r14
    13ce:	65 2f       	mov	r22, r21
    13d0:	74 2f       	mov	r23, r20
    13d2:	83 2f       	mov	r24, r19
    13d4:	92 2f       	mov	r25, r18
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	44 eb       	ldi	r20, 0xB4	; 180
    13dc:	53 e4       	ldi	r21, 0x43	; 67
    13de:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    13e2:	16 2f       	mov	r17, r22
    13e4:	07 2f       	mov	r16, r23
    13e6:	f8 2e       	mov	r15, r24
    13e8:	e9 2e       	mov	r14, r25
   da2 = da1 - 90;
    13ea:	a8 01       	movw	r20, r16
    13ec:	97 01       	movw	r18, r14
    13ee:	65 2f       	mov	r22, r21
    13f0:	70 2f       	mov	r23, r16
    13f2:	83 2f       	mov	r24, r19
    13f4:	9e 2d       	mov	r25, r14
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	44 eb       	ldi	r20, 0xB4	; 180
    13fc:	52 e4       	ldi	r21, 0x42	; 66
    13fe:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    1402:	69 87       	std	Y+9, r22	; 0x09
    1404:	7a 87       	std	Y+10, r23	; 0x0a
    1406:	8b 87       	std	Y+11, r24	; 0x0b
    1408:	9c 87       	std	Y+12, r25	; 0x0c
   
   for(int i = 0; i < 3; i++) {
      ra1[i] = (a-da1)*cha;
      ra2[i] = (a-da2)*cha;
      a = (a+120)%360;
      v[i] = fx * cos(ra1[i]) + fy * cos(ra2[i]) - fz * (25 * M_PI / 360);
    140a:	c4 01       	movw	r24, r8
    140c:	b3 01       	movw	r22, r6
    140e:	23 ef       	ldi	r18, 0xF3	; 243
    1410:	36 e6       	ldi	r19, 0x66	; 102
    1412:	4f e5       	ldi	r20, 0x5F	; 95
    1414:	5e e3       	ldi	r21, 0x3E	; 62
    1416:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    141a:	6d 87       	std	Y+13, r22	; 0x0d
    141c:	7e 87       	std	Y+14, r23	; 0x0e
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	98 8b       	std	Y+16, r25	; 0x10
   sgx=fx,sgy=fy,sga=w_a;

   if(w_a<=180)   da1 -= 360;
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0


void speed(double fy, double fx, double fz, double w_a) 
{
   double v[3] ,ra1[3],ra2[3],da1=720-w_a,da2;
   int a=150;
    1426:	36 e9       	ldi	r19, 0x96	; 150
    1428:	43 2e       	mov	r4, r19
    142a:	51 2c       	mov	r5, r1
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
      ra1[i] = (a-da1)*cha;
      ra2[i] = (a-da2)*cha;
      a = (a+120)%360;
    142c:	28 e6       	ldi	r18, 0x68	; 104
    142e:	22 2e       	mov	r2, r18
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	32 2e       	mov	r3, r18
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11

   if(w_a<=180)   da1 -= 360;
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
      ra1[i] = (a-da1)*cha;
    1438:	b2 01       	movw	r22, r4
    143a:	88 27       	eor	r24, r24
    143c:	77 fd       	sbrc	r23, 7
    143e:	80 95       	com	r24
    1440:	98 2f       	mov	r25, r24
    1442:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1446:	5b 01       	movw	r10, r22
    1448:	6c 01       	movw	r12, r24
      ra2[i] = (a-da2)*cha;
      a = (a+120)%360;
    144a:	c2 01       	movw	r24, r4
    144c:	88 58       	subi	r24, 0x88	; 136
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	b1 01       	movw	r22, r2
    1452:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    1456:	2c 01       	movw	r4, r24

   if(w_a<=180)   da1 -= 360;
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
      ra1[i] = (a-da1)*cha;
    1458:	c6 01       	movw	r24, r12
    145a:	b5 01       	movw	r22, r10
    145c:	d8 01       	movw	r26, r16
    145e:	f7 01       	movw	r30, r14
    1460:	2b 2f       	mov	r18, r27
    1462:	30 2f       	mov	r19, r16
    1464:	4f 2f       	mov	r20, r31
    1466:	5e 2d       	mov	r21, r14
    1468:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    146c:	25 e3       	ldi	r18, 0x35	; 53
    146e:	3a ef       	ldi	r19, 0xFA	; 250
    1470:	4e e8       	ldi	r20, 0x8E	; 142
    1472:	5c e3       	ldi	r21, 0x3C	; 60
    1474:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
      ra2[i] = (a-da2)*cha;
      a = (a+120)%360;
      v[i] = fx * cos(ra1[i]) + fy * cos(ra2[i]) - fz * (25 * M_PI / 360);
    1478:	0e 94 66 32 	call	0x64cc	; 0x64cc <cos>
    147c:	3b 01       	movw	r6, r22
    147e:	4c 01       	movw	r8, r24
   if(w_a<=180)   da1 -= 360;
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
      ra1[i] = (a-da1)*cha;
      ra2[i] = (a-da2)*cha;
    1480:	c6 01       	movw	r24, r12
    1482:	b5 01       	movw	r22, r10
    1484:	b9 85       	ldd	r27, Y+9	; 0x09
    1486:	aa 85       	ldd	r26, Y+10	; 0x0a
    1488:	ab 84       	ldd	r10, Y+11	; 0x0b
    148a:	dc 84       	ldd	r13, Y+12	; 0x0c
    148c:	2b 2f       	mov	r18, r27
    148e:	3a 2f       	mov	r19, r26
    1490:	4a 2d       	mov	r20, r10
    1492:	5d 2d       	mov	r21, r13
    1494:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    1498:	25 e3       	ldi	r18, 0x35	; 53
    149a:	3a ef       	ldi	r19, 0xFA	; 250
    149c:	4e e8       	ldi	r20, 0x8E	; 142
    149e:	5c e3       	ldi	r21, 0x3C	; 60
    14a0:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
      a = (a+120)%360;
      v[i] = fx * cos(ra1[i]) + fy * cos(ra2[i]) - fz * (25 * M_PI / 360);
    14a4:	0e 94 66 32 	call	0x64cc	; 0x64cc <cos>
    14a8:	5b 01       	movw	r10, r22
    14aa:	6c 01       	movw	r12, r24
    14ac:	6d 81       	ldd	r22, Y+5	; 0x05
    14ae:	7e 81       	ldd	r23, Y+6	; 0x06
    14b0:	8f 81       	ldd	r24, Y+7	; 0x07
    14b2:	98 85       	ldd	r25, Y+8	; 0x08
    14b4:	a4 01       	movw	r20, r8
    14b6:	93 01       	movw	r18, r6
    14b8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    14bc:	3b 01       	movw	r6, r22
    14be:	4c 01       	movw	r8, r24
    14c0:	69 81       	ldd	r22, Y+1	; 0x01
    14c2:	7a 81       	ldd	r23, Y+2	; 0x02
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	a6 01       	movw	r20, r12
    14ca:	95 01       	movw	r18, r10
    14cc:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	c4 01       	movw	r24, r8
    14d6:	b3 01       	movw	r22, r6
    14d8:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    14dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    14de:	ae 85       	ldd	r26, Y+14	; 0x0e
    14e0:	df 84       	ldd	r13, Y+15	; 0x0f
    14e2:	a8 88       	ldd	r10, Y+16	; 0x10
    14e4:	2b 2f       	mov	r18, r27
    14e6:	3a 2f       	mov	r19, r26
    14e8:	4d 2d       	mov	r20, r13
    14ea:	5a 2d       	mov	r21, r10
    14ec:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
	   	SetVelocity(i, v[i] * 16777.216 * -2.55);
    14f0:	2f e6       	ldi	r18, 0x6F	; 111
    14f2:	32 e1       	ldi	r19, 0x12	; 18
    14f4:	43 e8       	ldi	r20, 0x83	; 131
    14f6:	56 e4       	ldi	r21, 0x46	; 70
    14f8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    14fc:	23 e3       	ldi	r18, 0x33	; 51
    14fe:	33 e3       	ldi	r19, 0x33	; 51
    1500:	43 e2       	ldi	r20, 0x23	; 35
    1502:	50 ec       	ldi	r21, 0xC0	; 192
    1504:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1508:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    150c:	ab 01       	movw	r20, r22
    150e:	bc 01       	movw	r22, r24
    1510:	89 89       	ldd	r24, Y+17	; 0x11
    1512:	0e 94 79 06 	call	0xcf2	; 0xcf2 <SetVelocity>
   sgx=fx,sgy=fy,sga=w_a;

   if(w_a<=180)   da1 -= 360;
   da2 = da1 - 90;
   
   for(int i = 0; i < 3; i++) {
    1516:	a9 89       	ldd	r26, Y+17	; 0x11
    1518:	ba 89       	ldd	r27, Y+18	; 0x12
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	ba 8b       	std	Y+18, r27	; 0x12
    151e:	a9 8b       	std	Y+17, r26	; 0x11
    1520:	a3 30       	cpi	r26, 0x03	; 3
    1522:	b1 05       	cpc	r27, r1
    1524:	09 f0       	breq	.+2      	; 0x1528 <speed+0x212>
    1526:	88 cf       	rjmp	.-240    	; 0x1438 <speed+0x122>
      a = (a+120)%360;
      v[i] = fx * cos(ra1[i]) + fy * cos(ra2[i]) - fz * (25 * M_PI / 360);
	   	SetVelocity(i, v[i] * 16777.216 * -2.55);
   }

   StartMotion();
    1528:	0e 94 dd 04 	call	0x9ba	; 0x9ba <StartMotion>
   get_gyro();
    152c:	0e 94 46 08 	call	0x108c	; 0x108c <get_gyro>
}
    1530:	62 96       	adiw	r28, 0x12	; 18
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	7f 90       	pop	r7
    1556:	6f 90       	pop	r6
    1558:	5f 90       	pop	r5
    155a:	4f 90       	pop	r4
    155c:	3f 90       	pop	r3
    155e:	2f 90       	pop	r2
    1560:	08 95       	ret

00001562 <ResetEncoder>:
volatile long rearEnc[3];

void ResetEncoder() // Define Home
{
	for(int i=0;i<3;i++)
		WriteCommand(i,DFH);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	62 e0       	ldi	r22, 0x02	; 2
    1576:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
}
    157a:	08 95       	ret

0000157c <GetEncoder>:

void GetEncoder(long *enc)
{
    157c:	9f 92       	push	r9
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
	for(int m = 0; m < 3; m++)	// Motor 0 ~ Motor 2
	{
		enc[m] = 0;
		WriteCommand(m, RDRP);
		for(int i = 0; i < 4; i++)	// 4Byte shift
    1592:	e8 2e       	mov	r14, r24
    1594:	e7 01       	movw	r28, r14
    1596:	7e 01       	movw	r14, r28
    1598:	f9 2e       	mov	r15, r25
    159a:	e7 01       	movw	r28, r14
		WriteCommand(i,DFH);
}

void GetEncoder(long *enc)
{
	for(int m = 0; m < 3; m++)	// Motor 0 ~ Motor 2
    159c:	00 e0       	ldi	r16, 0x00	; 0
    159e:	10 e0       	ldi	r17, 0x00	; 0
	{
		enc[m] = 0;
    15a0:	18 82       	st	Y, r1
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	1a 82       	std	Y+2, r1	; 0x02
    15a6:	1b 82       	std	Y+3, r1	; 0x03
    15a8:	90 2e       	mov	r9, r16
		WriteCommand(m, RDRP);
    15aa:	80 2f       	mov	r24, r16
    15ac:	6a e0       	ldi	r22, 0x0A	; 10
    15ae:	0e 94 cd 04 	call	0x99a	; 0x99a <WriteCommand>
		for(int i = 0; i < 4; i++)	// 4Byte shift
    15b2:	ee 24       	eor	r14, r14
    15b4:	ff 24       	eor	r15, r15
		{			
			enc[m] |= ReadData(m);
    15b6:	a8 80       	ld	r10, Y
    15b8:	b9 80       	ldd	r11, Y+1	; 0x01
    15ba:	ca 80       	ldd	r12, Y+2	; 0x02
    15bc:	db 80       	ldd	r13, Y+3	; 0x03
    15be:	89 2d       	mov	r24, r9
    15c0:	0e 94 b9 04 	call	0x972	; 0x972 <ReadData>
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	2a 29       	or	r18, r10
    15ce:	3b 29       	or	r19, r11
    15d0:	4c 29       	or	r20, r12
    15d2:	5d 29       	or	r21, r13
    15d4:	28 83       	st	Y, r18
    15d6:	39 83       	std	Y+1, r19	; 0x01
    15d8:	4a 83       	std	Y+2, r20	; 0x02
    15da:	5b 83       	std	Y+3, r21	; 0x03
			if(i != 3) enc[m] <<= 8;
    15dc:	93 e0       	ldi	r25, 0x03	; 3
    15de:	e9 16       	cp	r14, r25
    15e0:	f1 04       	cpc	r15, r1
    15e2:	41 f0       	breq	.+16     	; 0x15f4 <GetEncoder+0x78>
    15e4:	54 2f       	mov	r21, r20
    15e6:	43 2f       	mov	r20, r19
    15e8:	32 2f       	mov	r19, r18
    15ea:	22 27       	eor	r18, r18
    15ec:	28 83       	st	Y, r18
    15ee:	39 83       	std	Y+1, r19	; 0x01
    15f0:	4a 83       	std	Y+2, r20	; 0x02
    15f2:	5b 83       	std	Y+3, r21	; 0x03
{
	for(int m = 0; m < 3; m++)	// Motor 0 ~ Motor 2
	{
		enc[m] = 0;
		WriteCommand(m, RDRP);
		for(int i = 0; i < 4; i++)	// 4Byte shift
    15f4:	08 94       	sec
    15f6:	e1 1c       	adc	r14, r1
    15f8:	f1 1c       	adc	r15, r1
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	e8 16       	cp	r14, r24
    15fe:	f1 04       	cpc	r15, r1
    1600:	d1 f6       	brne	.-76     	; 0x15b6 <GetEncoder+0x3a>
		WriteCommand(i,DFH);
}

void GetEncoder(long *enc)
{
	for(int m = 0; m < 3; m++)	// Motor 0 ~ Motor 2
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	24 96       	adiw	r28, 0x04	; 4
    1608:	03 30       	cpi	r16, 0x03	; 3
    160a:	11 05       	cpc	r17, r1
    160c:	49 f6       	brne	.-110    	; 0x15a0 <GetEncoder+0x24>
		{			
			enc[m] |= ReadData(m);
			if(i != 3) enc[m] <<= 8;
		}
	}
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	08 95       	ret

00001626 <Odometry>:

void Odometry()
{
    1626:	5f 92       	push	r5
    1628:	6f 92       	push	r6
    162a:	7f 92       	push	r7
    162c:	8f 92       	push	r8
    162e:	9f 92       	push	r9
    1630:	af 92       	push	r10
    1632:	bf 92       	push	r11
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	a0 97       	sbiw	r28, 0x20	; 32
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
   double rpm[3], dis[3], g;
   long enc[3];

   GetEncoder(enc);
    1654:	8e 01       	movw	r16, r28
    1656:	03 5f       	subi	r16, 0xF3	; 243
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	c8 01       	movw	r24, r16
    165c:	0e 94 be 0a 	call	0x157c	; 0x157c <GetEncoder>
    1660:	48 01       	movw	r8, r16
    1662:	3e 01       	movw	r6, r28
    1664:	08 94       	sec
    1666:	61 1c       	adc	r6, r1
    1668:	71 1c       	adc	r7, r1

   for(int i = 0; i < 3; i++)
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	10 e0       	ldi	r17, 0x00	; 0
   {
      rpm[i] = (enc[i] - rearEnc[i]) * ((8 * M_PI) / 48500);
    166e:	d4 01       	movw	r26, r8
    1670:	ad 90       	ld	r10, X+
    1672:	bd 90       	ld	r11, X+
    1674:	cd 90       	ld	r12, X+
    1676:	dd 90       	ld	r13, X+
    1678:	4d 01       	movw	r8, r26
    167a:	78 01       	movw	r14, r16
    167c:	ee 0c       	add	r14, r14
    167e:	ff 1c       	adc	r15, r15
    1680:	ee 0c       	add	r14, r14
    1682:	ff 1c       	adc	r15, r15
    1684:	e0 e7       	ldi	r30, 0x70	; 112
    1686:	f2 e0       	ldi	r31, 0x02	; 2
    1688:	ee 0e       	add	r14, r30
    168a:	ff 1e       	adc	r15, r31
    168c:	f7 01       	movw	r30, r14
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	a2 81       	ldd	r26, Z+2	; 0x02
    1694:	b3 81       	ldd	r27, Z+3	; 0x03
    1696:	a6 01       	movw	r20, r12
    1698:	95 01       	movw	r18, r10
    169a:	28 1b       	sub	r18, r24
    169c:	39 0b       	sbc	r19, r25
    169e:	4a 0b       	sbc	r20, r26
    16a0:	5b 0b       	sbc	r21, r27
    16a2:	ca 01       	movw	r24, r20
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    16aa:	2f ed       	ldi	r18, 0xDF	; 223
    16ac:	37 ed       	ldi	r19, 0xD7	; 215
    16ae:	47 e0       	ldi	r20, 0x07	; 7
    16b0:	5a e3       	ldi	r21, 0x3A	; 58
    16b2:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    16b6:	d3 01       	movw	r26, r6
    16b8:	6d 93       	st	X+, r22
    16ba:	7d 93       	st	X+, r23
    16bc:	8d 93       	st	X+, r24
    16be:	9d 93       	st	X+, r25
    16c0:	3d 01       	movw	r6, r26
      rearEnc[i] = enc[i];
    16c2:	f7 01       	movw	r30, r14
    16c4:	a0 82       	st	Z, r10
    16c6:	b1 82       	std	Z+1, r11	; 0x01
    16c8:	c2 82       	std	Z+2, r12	; 0x02
    16ca:	d3 82       	std	Z+3, r13	; 0x03
   double rpm[3], dis[3], g;
   long enc[3];

   GetEncoder(enc);

   for(int i = 0; i < 3; i++)
    16cc:	0f 5f       	subi	r16, 0xFF	; 255
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	03 30       	cpi	r16, 0x03	; 3
    16d2:	11 05       	cpc	r17, r1
    16d4:	61 f6       	brne	.-104    	; 0x166e <Odometry+0x48>
   {
      rpm[i] = (enc[i] - rearEnc[i]) * ((8 * M_PI) / 48500);
      rearEnc[i] = enc[i];
   }

   g = gyro - rearGyro;
    16d6:	20 91 68 02 	lds	r18, 0x0268
    16da:	30 91 69 02 	lds	r19, 0x0269
    16de:	40 91 6a 02 	lds	r20, 0x026A
    16e2:	50 91 6b 02 	lds	r21, 0x026B
    16e6:	29 8f       	std	Y+25, r18	; 0x19
    16e8:	3a 8f       	std	Y+26, r19	; 0x1a
    16ea:	4b 8f       	std	Y+27, r20	; 0x1b
    16ec:	5c 8f       	std	Y+28, r21	; 0x1c
    16ee:	80 91 6c 02 	lds	r24, 0x026C
    16f2:	90 91 6d 02 	lds	r25, 0x026D
    16f6:	a0 91 6e 02 	lds	r26, 0x026E
    16fa:	b0 91 6f 02 	lds	r27, 0x026F
    16fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1700:	9e 8f       	std	Y+30, r25	; 0x1e
    1702:	af 8f       	std	Y+31, r26	; 0x1f
    1704:	b8 a3       	std	Y+32, r27	; 0x20
   rearGyro = gyro;
    1706:	80 91 68 02 	lds	r24, 0x0268
    170a:	90 91 69 02 	lds	r25, 0x0269
    170e:	a0 91 6a 02 	lds	r26, 0x026A
    1712:	b0 91 6b 02 	lds	r27, 0x026B
    1716:	80 93 6c 02 	sts	0x026C, r24
    171a:	90 93 6d 02 	sts	0x026D, r25
    171e:	a0 93 6e 02 	sts	0x026E, r26
    1722:	b0 93 6f 02 	sts	0x026F, r27

   double x = ( (rpm[0] + rpm[2]) / 2 - rpm[1] ) /1.5;
    1726:	e9 80       	ldd	r14, Y+1	; 0x01
    1728:	fa 80       	ldd	r15, Y+2	; 0x02
    172a:	0b 81       	ldd	r16, Y+3	; 0x03
    172c:	1c 81       	ldd	r17, Y+4	; 0x04
    172e:	a9 84       	ldd	r10, Y+9	; 0x09
    1730:	ba 84       	ldd	r11, Y+10	; 0x0a
    1732:	cb 84       	ldd	r12, Y+11	; 0x0b
    1734:	dc 84       	ldd	r13, Y+12	; 0x0c
    1736:	c8 01       	movw	r24, r16
    1738:	b7 01       	movw	r22, r14
    173a:	a6 01       	movw	r20, r12
    173c:	95 01       	movw	r18, r10
    173e:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    174e:	2d 81       	ldd	r18, Y+5	; 0x05
    1750:	3e 81       	ldd	r19, Y+6	; 0x06
    1752:	4f 81       	ldd	r20, Y+7	; 0x07
    1754:	58 85       	ldd	r21, Y+8	; 0x08
    1756:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 ec       	ldi	r20, 0xC0	; 192
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    1766:	66 2e       	mov	r6, r22
    1768:	97 2e       	mov	r9, r23
    176a:	78 2e       	mov	r7, r24
    176c:	59 2e       	mov	r5, r25
   double y = ( rpm[0] - rpm[2] ) / 2 / cos( 30 * cha );     
    176e:	c8 01       	movw	r24, r16
    1770:	b7 01       	movw	r22, r14
    1772:	a6 01       	movw	r20, r12
    1774:	95 01       	movw	r18, r10
    1776:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1786:	27 ed       	ldi	r18, 0xD7	; 215
    1788:	33 eb       	ldi	r19, 0xB3	; 179
    178a:	4d e5       	ldi	r20, 0x5D	; 93
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    1792:	a6 2e       	mov	r10, r22
    1794:	d7 2e       	mov	r13, r23
    1796:	c8 2e       	mov	r12, r24
    1798:	89 2e       	mov	r8, r25
   pos[2] -= g;
    179a:	e0 90 60 02 	lds	r14, 0x0260
    179e:	f0 90 61 02 	lds	r15, 0x0261
    17a2:	00 91 62 02 	lds	r16, 0x0262
    17a6:	10 91 63 02 	lds	r17, 0x0263
   {
      rpm[i] = (enc[i] - rearEnc[i]) * ((8 * M_PI) / 48500);
      rearEnc[i] = enc[i];
   }

   g = gyro - rearGyro;
    17aa:	69 8d       	ldd	r22, Y+25	; 0x19
    17ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17b4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17b6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    17b8:	58 a1       	ldd	r21, Y+32	; 0x20
    17ba:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
   rearGyro = gyro;

   double x = ( (rpm[0] + rpm[2]) / 2 - rpm[1] ) /1.5;
   double y = ( rpm[0] - rpm[2] ) / 2 / cos( 30 * cha );     
   pos[2] -= g;
    17c2:	c8 01       	movw	r24, r16
    17c4:	b7 01       	movw	r22, r14
    17c6:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	20 93 60 02 	sts	0x0260, r18
    17d2:	30 93 61 02 	sts	0x0261, r19
    17d6:	40 93 62 02 	sts	0x0262, r20
    17da:	50 93 63 02 	sts	0x0263, r21

   double theta = atan2(y, x) + (pos[2] * cha);
    17de:	6a 2d       	mov	r22, r10
    17e0:	7d 2d       	mov	r23, r13
    17e2:	8c 2d       	mov	r24, r12
    17e4:	98 2d       	mov	r25, r8
    17e6:	26 2d       	mov	r18, r6
    17e8:	39 2d       	mov	r19, r9
    17ea:	47 2d       	mov	r20, r7
    17ec:	55 2d       	mov	r21, r5
    17ee:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <atan2>
    17f2:	7b 01       	movw	r14, r22
    17f4:	8c 01       	movw	r16, r24
    17f6:	60 91 60 02 	lds	r22, 0x0260
    17fa:	70 91 61 02 	lds	r23, 0x0261
    17fe:	80 91 62 02 	lds	r24, 0x0262
    1802:	90 91 63 02 	lds	r25, 0x0263
    1806:	25 e3       	ldi	r18, 0x35	; 53
    1808:	3a ef       	ldi	r19, 0xFA	; 250
    180a:	4e e8       	ldi	r20, 0x8E	; 142
    180c:	5c e3       	ldi	r21, 0x3C	; 60
    180e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1812:	9b 01       	movw	r18, r22
    1814:	ac 01       	movw	r20, r24
    1816:	c8 01       	movw	r24, r16
    1818:	b7 01       	movw	r22, r14
    181a:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    181e:	e6 2e       	mov	r14, r22
    1820:	07 2f       	mov	r16, r23
    1822:	18 2f       	mov	r17, r24
    1824:	f9 2e       	mov	r15, r25
   double vector = hypot(x, y);
    1826:	66 2d       	mov	r22, r6
    1828:	79 2d       	mov	r23, r9
    182a:	87 2d       	mov	r24, r7
    182c:	95 2d       	mov	r25, r5
    182e:	2a 2d       	mov	r18, r10
    1830:	3d 2d       	mov	r19, r13
    1832:	4c 2d       	mov	r20, r12
    1834:	58 2d       	mov	r21, r8
    1836:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    183a:	5b 01       	movw	r10, r22
    183c:	6c 01       	movw	r12, r24
   pos[0] += (vector * cos(theta));
    183e:	60 90 58 02 	lds	r6, 0x0258
    1842:	70 90 59 02 	lds	r7, 0x0259
    1846:	80 90 5a 02 	lds	r8, 0x025A
    184a:	90 90 5b 02 	lds	r9, 0x025B
    184e:	6e 2d       	mov	r22, r14
    1850:	70 2f       	mov	r23, r16
    1852:	81 2f       	mov	r24, r17
    1854:	9f 2d       	mov	r25, r15
    1856:	0e 94 66 32 	call	0x64cc	; 0x64cc <cos>
    185a:	9b 01       	movw	r18, r22
    185c:	ac 01       	movw	r20, r24
    185e:	c6 01       	movw	r24, r12
    1860:	b5 01       	movw	r22, r10
    1862:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	c4 01       	movw	r24, r8
    186c:	b3 01       	movw	r22, r6
    186e:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	20 93 58 02 	sts	0x0258, r18
    187a:	30 93 59 02 	sts	0x0259, r19
    187e:	40 93 5a 02 	sts	0x025A, r20
    1882:	50 93 5b 02 	sts	0x025B, r21
   pos[1] += (vector * sin(theta));
    1886:	60 90 5c 02 	lds	r6, 0x025C
    188a:	70 90 5d 02 	lds	r7, 0x025D
    188e:	80 90 5e 02 	lds	r8, 0x025E
    1892:	90 90 5f 02 	lds	r9, 0x025F
    1896:	6e 2d       	mov	r22, r14
    1898:	70 2f       	mov	r23, r16
    189a:	81 2f       	mov	r24, r17
    189c:	9f 2d       	mov	r25, r15
    189e:	0e 94 57 35 	call	0x6aae	; 0x6aae <sin>
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	c6 01       	movw	r24, r12
    18a8:	b5 01       	movw	r22, r10
    18aa:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	c4 01       	movw	r24, r8
    18b4:	b3 01       	movw	r22, r6
    18b6:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    18ba:	9b 01       	movw	r18, r22
    18bc:	ac 01       	movw	r20, r24
    18be:	20 93 5c 02 	sts	0x025C, r18
    18c2:	30 93 5d 02 	sts	0x025D, r19
    18c6:	40 93 5e 02 	sts	0x025E, r20
    18ca:	50 93 5f 02 	sts	0x025F, r21
}
    18ce:	a0 96       	adiw	r28, 0x20	; 32
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	9f 90       	pop	r9
    18f0:	8f 90       	pop	r8
    18f2:	7f 90       	pop	r7
    18f4:	6f 90       	pop	r6
    18f6:	5f 90       	pop	r5
    18f8:	08 95       	ret

000018fa <Omni>:

#define ginit(name)	oc=tot=gtc=0;	for(int i=0; i<4; i++)	msp[i] = gsp[i] = 0; lcd(0,7,"%13s",name);
#define LE	oc=sgx=sgy=sga=0; //货肺眠啊

int Omni(int x, int y, int z, int ang, int sp, int ac)
{
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	2e 97       	sbiw	r28, 0x0e	; 14
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	18 01       	movw	r2, r16
    1930:	87 01       	movw	r16, r14
	int xv[4]={x,y,-z,-ang},d=1;
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	7c 83       	std	Y+4, r23	; 0x04
    1938:	6b 83       	std	Y+3, r22	; 0x03
    193a:	50 95       	com	r21
    193c:	41 95       	neg	r20
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	5e 83       	std	Y+6, r21	; 0x06
    1942:	4d 83       	std	Y+5, r20	; 0x05
    1944:	30 95       	com	r19
    1946:	21 95       	neg	r18
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	38 87       	std	Y+8, r19	; 0x08
    194c:	2f 83       	std	Y+7, r18	; 0x07
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	9a 87       	std	Y+10, r25	; 0x0a
    1954:	89 87       	std	Y+9, r24	; 0x09
#define OS	OmniSet(tot,ac);

#define ginit(name)	oc=tot=gtc=0;	for(int i=0; i<4; i++)	msp[i] = gsp[i] = 0; lcd(0,7,"%13s",name);
#define LE	oc=sgx=sgy=sga=0; //货肺眠啊

int Omni(int x, int y, int z, int ang, int sp, int ac)
    1956:	79 e0       	ldi	r23, 0x09	; 9
    1958:	47 2e       	mov	r4, r23
    195a:	51 2c       	mov	r5, r1
    195c:	4c 0e       	add	r4, r28
    195e:	5d 1e       	adc	r5, r29
    1960:	7c 01       	movw	r14, r24
{
	int xv[4]={x,y,-z,-ang},d=1;
	double mtp=0;
    1962:	66 24       	eor	r6, r6
    1964:	77 24       	eor	r7, r7
    1966:	cc 24       	eor	r12, r12
    1968:	dd 24       	eor	r13, r13

	for(int i=0; i<4; i++)	if(mtp <fabs(xv[i])) mtp = fabs(xv[i]);
    196a:	d7 01       	movw	r26, r14
    196c:	6d 91       	ld	r22, X+
    196e:	7d 91       	ld	r23, X+
    1970:	7d 01       	movw	r14, r26
    1972:	88 27       	eor	r24, r24
    1974:	77 fd       	sbrc	r23, 7
    1976:	80 95       	com	r24
    1978:	98 2f       	mov	r25, r24
    197a:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    197e:	4b 01       	movw	r8, r22
    1980:	5c 01       	movw	r10, r24
    1982:	e8 94       	clt
    1984:	b7 f8       	bld	r11, 7
    1986:	66 2d       	mov	r22, r6
    1988:	77 2d       	mov	r23, r7
    198a:	8c 2d       	mov	r24, r12
    198c:	9d 2d       	mov	r25, r13
    198e:	a5 01       	movw	r20, r10
    1990:	94 01       	movw	r18, r8
    1992:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    1996:	87 ff       	sbrs	r24, 7
    1998:	02 c0       	rjmp	.+4      	; 0x199e <Omni+0xa4>
    199a:	34 01       	movw	r6, r8
    199c:	65 01       	movw	r12, r10
    199e:	e4 14       	cp	r14, r4
    19a0:	f5 04       	cpc	r15, r5
    19a2:	19 f7       	brne	.-58     	; 0x196a <Omni+0x70>
    19a4:	ee 24       	eor	r14, r14
    19a6:	ff 24       	eor	r15, r15
	for(int i=0; i<4; i++)	msp[i] = xv[i]/mtp * sp;
    19a8:	c1 01       	movw	r24, r2
    19aa:	aa 27       	eor	r26, r26
    19ac:	97 fd       	sbrc	r25, 7
    19ae:	a0 95       	com	r26
    19b0:	ba 2f       	mov	r27, r26
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
    19ba:	a9 85       	ldd	r26, Y+9	; 0x09
    19bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    19be:	ad 90       	ld	r10, X+
    19c0:	bd 90       	ld	r11, X+
    19c2:	ba 87       	std	Y+10, r27	; 0x0a
    19c4:	a9 87       	std	Y+9, r26	; 0x09
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    19d2:	1b 01       	movw	r2, r22
    19d4:	2c 01       	movw	r4, r24
    19d6:	b5 01       	movw	r22, r10
    19d8:	88 27       	eor	r24, r24
    19da:	77 fd       	sbrc	r23, 7
    19dc:	80 95       	com	r24
    19de:	98 2f       	mov	r25, r24
    19e0:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    19e4:	26 2d       	mov	r18, r6
    19e6:	37 2d       	mov	r19, r7
    19e8:	4c 2d       	mov	r20, r12
    19ea:	5d 2d       	mov	r21, r13
    19ec:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    19f0:	a2 01       	movw	r20, r4
    19f2:	91 01       	movw	r18, r2
    19f4:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	f7 01       	movw	r30, r14
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	e3 5d       	subi	r30, 0xD3	; 211
    1a08:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0a:	20 83       	st	Z, r18
    1a0c:	31 83       	std	Z+1, r19	; 0x01
    1a0e:	42 83       	std	Z+2, r20	; 0x02
    1a10:	53 83       	std	Z+3, r21	; 0x03
    1a12:	08 94       	sec
    1a14:	e1 1c       	adc	r14, r1
    1a16:	f1 1c       	adc	r15, r1
    1a18:	b4 e0       	ldi	r27, 0x04	; 4
    1a1a:	eb 16       	cp	r14, r27
    1a1c:	f1 04       	cpc	r15, r1
    1a1e:	69 f6       	brne	.-102    	; 0x19ba <Omni+0xc0>

	if(ac<100 && ac) d= 2;
    1a20:	04 36       	cpi	r16, 0x64	; 100
    1a22:	11 05       	cpc	r17, r1
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <Omni+0x136>
    1a26:	01 15       	cp	r16, r1
    1a28:	11 05       	cpc	r17, r1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <Omni+0x134>
    1a2c:	51 c0       	rjmp	.+162    	; 0x1ad0 <Omni+0x1d6>
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <Omni+0x140>
	if(ac>100) ac-=100;
    1a30:	04 36       	cpi	r16, 0x64	; 100
    1a32:	11 05       	cpc	r17, r1
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <Omni+0x140>
    1a36:	04 56       	subi	r16, 0x64	; 100
    1a38:	10 40       	sbci	r17, 0x00	; 0
#define ginit(name)	oc=tot=gtc=0;	for(int i=0; i<4; i++)	msp[i] = gsp[i] = 0; lcd(0,7,"%13s",name);
#define LE	oc=sgx=sgy=sga=0; //货肺眠啊

int Omni(int x, int y, int z, int ang, int sp, int ac)
{
	int xv[4]={x,y,-z,-ang},d=1;
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	e9 2e       	mov	r14, r25
    1a3e:	f1 2c       	mov	r15, r1
	for(int i=0; i<4; i++)	msp[i] = xv[i]/mtp * sp;

	if(ac<100 && ac) d= 2;
	if(ac>100) ac-=100;

	return ceil(mtp*100/sp) + (abs(ac)/d-(2-d));
    1a40:	66 2d       	mov	r22, r6
    1a42:	77 2d       	mov	r23, r7
    1a44:	8c 2d       	mov	r24, r12
    1a46:	9d 2d       	mov	r25, r13
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	48 ec       	ldi	r20, 0xC8	; 200
    1a4e:	52 e4       	ldi	r21, 0x42	; 66
    1a50:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1a54:	a2 01       	movw	r20, r4
    1a56:	91 01       	movw	r18, r2
    1a58:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    1a5c:	0e 94 4f 32 	call	0x649e	; 0x649e <ceil>
    1a60:	5b 01       	movw	r10, r22
    1a62:	6c 01       	movw	r12, r24
    1a64:	97 01       	movw	r18, r14
    1a66:	22 50       	subi	r18, 0x02	; 2
    1a68:	30 40       	sbci	r19, 0x00	; 0
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	17 ff       	sbrs	r17, 7
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <Omni+0x17c>
    1a70:	90 95       	com	r25
    1a72:	81 95       	neg	r24
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	b7 01       	movw	r22, r14
    1a78:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    1a7c:	62 0f       	add	r22, r18
    1a7e:	73 1f       	adc	r23, r19
    1a80:	88 27       	eor	r24, r24
    1a82:	77 fd       	sbrc	r23, 7
    1a84:	80 95       	com	r24
    1a86:	98 2f       	mov	r25, r24
    1a88:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	c6 01       	movw	r24, r12
    1a92:	b5 01       	movw	r22, r10
    1a94:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1a98:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
}
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	2e 96       	adiw	r28, 0x0e	; 14
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	9f 90       	pop	r9
    1ac0:	8f 90       	pop	r8
    1ac2:	7f 90       	pop	r7
    1ac4:	6f 90       	pop	r6
    1ac6:	5f 90       	pop	r5
    1ac8:	4f 90       	pop	r4
    1aca:	3f 90       	pop	r3
    1acc:	2f 90       	pop	r2
    1ace:	08 95       	ret
	double mtp=0;

	for(int i=0; i<4; i++)	if(mtp <fabs(xv[i])) mtp = fabs(xv[i]);
	for(int i=0; i<4; i++)	msp[i] = xv[i]/mtp * sp;

	if(ac<100 && ac) d= 2;
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	e8 2e       	mov	r14, r24
    1ad4:	f1 2c       	mov	r15, r1
    1ad6:	b4 cf       	rjmp	.-152    	; 0x1a40 <Omni+0x146>

00001ad8 <OmniSet>:

	return ceil(mtp*100/sp) + (abs(ac)/d-(2-d));
}

void OmniSet(int tot, int ac)
{
    1ad8:	2f 92       	push	r2
    1ada:	3f 92       	push	r3
    1adc:	4f 92       	push	r4
    1ade:	5f 92       	push	r5
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	2e 97       	sbiw	r28, 0x0e	; 14
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
	int m=(ac>100 || ac<0)?1:0,ac2;
    1b0c:	7a 83       	std	Y+2, r23	; 0x02
    1b0e:	69 83       	std	Y+1, r22	; 0x01
	if(ac>100) ac-=100;
    1b10:	65 36       	cpi	r22, 0x65	; 101
    1b12:	71 05       	cpc	r23, r1
    1b14:	14 f0       	brlt	.+4      	; 0x1b1a <OmniSet+0x42>
    1b16:	64 56       	subi	r22, 0x64	; 100
    1b18:	70 40       	sbci	r23, 0x00	; 0
	ac2 = abs(ac);
    1b1a:	4b 01       	movw	r8, r22
    1b1c:	77 ff       	sbrs	r23, 7
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <OmniSet+0x50>
    1b20:	88 24       	eor	r8, r8
    1b22:	99 24       	eor	r9, r9
    1b24:	86 1a       	sub	r8, r22
    1b26:	97 0a       	sbc	r9, r23

	for(int i=0; i<4; i++)
	{
		if(oc>=0 && !(ac<0))	gsp[i] = (double)(msp[i] * (oc+1)/ac2);
    1b28:	e0 90 2a 02 	lds	r14, 0x022A
    1b2c:	f0 90 2b 02 	lds	r15, 0x022B
    1b30:	a7 01       	movw	r20, r14
    1b32:	4f 5f       	subi	r20, 0xFF	; 255
    1b34:	5f 4f       	sbci	r21, 0xFF	; 255
		if(oc>=ac2 || (ac<0))	gsp[i] = msp[i];
		if(oc>=tot-ac2+1 &&m)	gsp[i] = (double)(msp[i] * (tot-oc)/ac2);
    1b36:	9c 01       	movw	r18, r24
    1b38:	2e 19       	sub	r18, r14
    1b3a:	3f 09       	sbc	r19, r15
{
	int m=(ac>100 || ac<0)?1:0,ac2;
	if(ac>100) ac-=100;
	ac2 = abs(ac);

	for(int i=0; i<4; i++)
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(oc>=0 && !(ac<0))	gsp[i] = (double)(msp[i] * (oc+1)/ac2);
    1b40:	5a 01       	movw	r10, r20
    1b42:	cc 24       	eor	r12, r12
    1b44:	b7 fc       	sbrc	r11, 7
    1b46:	c0 94       	com	r12
    1b48:	dc 2c       	mov	r13, r12
    1b4a:	ab 82       	std	Y+3, r10	; 0x03
    1b4c:	bc 82       	std	Y+4, r11	; 0x04
    1b4e:	cd 82       	std	Y+5, r12	; 0x05
    1b50:	de 82       	std	Y+6, r13	; 0x06
    1b52:	14 01       	movw	r2, r8
    1b54:	44 24       	eor	r4, r4
    1b56:	37 fc       	sbrc	r3, 7
    1b58:	40 94       	com	r4
    1b5a:	54 2c       	mov	r5, r4
		if(oc>=ac2 || (ac<0))	gsp[i] = msp[i];
		if(oc>=tot-ac2+1 &&m)	gsp[i] = (double)(msp[i] * (tot-oc)/ac2);
    1b5c:	6c 01       	movw	r12, r24
    1b5e:	c8 18       	sub	r12, r8
    1b60:	d9 08       	sbc	r13, r9
    1b62:	d8 86       	std	Y+8, r13	; 0x08
    1b64:	cf 82       	std	Y+7, r12	; 0x07
    1b66:	c9 01       	movw	r24, r18
    1b68:	aa 27       	eor	r26, r26
    1b6a:	97 fd       	sbrc	r25, 7
    1b6c:	a0 95       	com	r26
    1b6e:	ba 2f       	mov	r27, r26
    1b70:	89 87       	std	Y+9, r24	; 0x09
    1b72:	9a 87       	std	Y+10, r25	; 0x0a
    1b74:	ab 87       	std	Y+11, r26	; 0x0b
    1b76:	bc 87       	std	Y+12, r27	; 0x0c
    1b78:	7e 87       	std	Y+14, r23	; 0x0e
    1b7a:	6d 87       	std	Y+13, r22	; 0x0d
    1b7c:	34 01       	movw	r6, r8
	if(ac>100) ac-=100;
	ac2 = abs(ac);

	for(int i=0; i<4; i++)
	{
		if(oc>=0 && !(ac<0))	gsp[i] = (double)(msp[i] * (oc+1)/ac2);
    1b7e:	f7 fc       	sbrc	r15, 7
    1b80:	34 c0       	rjmp	.+104    	; 0x1bea <OmniSet+0x112>
    1b82:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b84:	be 85       	ldd	r27, Y+14	; 0x0e
    1b86:	b7 fd       	sbrc	r27, 7
    1b88:	2d c0       	rjmp	.+90     	; 0x1be4 <OmniSet+0x10c>
    1b8a:	48 01       	movw	r8, r16
    1b8c:	88 0c       	add	r8, r8
    1b8e:	99 1c       	adc	r9, r9
    1b90:	88 0c       	add	r8, r8
    1b92:	99 1c       	adc	r9, r9
    1b94:	f4 01       	movw	r30, r8
    1b96:	e3 5d       	subi	r30, 0xD3	; 211
    1b98:	fc 4f       	sbci	r31, 0xFC	; 252
    1b9a:	a0 80       	ld	r10, Z
    1b9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9e:	c2 80       	ldd	r12, Z+2	; 0x02
    1ba0:	d3 80       	ldd	r13, Z+3	; 0x03
    1ba2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba4:	7c 81       	ldd	r23, Y+4	; 0x04
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c6 01       	movw	r24, r12
    1bb4:	b5 01       	movw	r22, r10
    1bb6:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1bba:	5b 01       	movw	r10, r22
    1bbc:	6c 01       	movw	r12, r24
    1bbe:	c2 01       	movw	r24, r4
    1bc0:	b1 01       	movw	r22, r2
    1bc2:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	c6 01       	movw	r24, r12
    1bcc:	b5 01       	movw	r22, r10
    1bce:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	f4 01       	movw	r30, r8
    1bd8:	e1 5c       	subi	r30, 0xC1	; 193
    1bda:	fc 4f       	sbci	r31, 0xFC	; 252
    1bdc:	20 83       	st	Z, r18
    1bde:	31 83       	std	Z+1, r19	; 0x01
    1be0:	42 83       	std	Z+2, r20	; 0x02
    1be2:	53 83       	std	Z+3, r21	; 0x03
		if(oc>=ac2 || (ac<0))	gsp[i] = msp[i];
    1be4:	e6 14       	cp	r14, r6
    1be6:	f7 04       	cpc	r15, r7
    1be8:	24 f4       	brge	.+8      	; 0x1bf2 <OmniSet+0x11a>
    1bea:	ed 85       	ldd	r30, Y+13	; 0x0d
    1bec:	fe 85       	ldd	r31, Y+14	; 0x0e
    1bee:	f7 ff       	sbrs	r31, 7
    1bf0:	13 c0       	rjmp	.+38     	; 0x1c18 <OmniSet+0x140>
    1bf2:	98 01       	movw	r18, r16
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	e3 5d       	subi	r30, 0xD3	; 211
    1c00:	fc 4f       	sbci	r31, 0xFC	; 252
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	a2 81       	ldd	r26, Z+2	; 0x02
    1c08:	b3 81       	ldd	r27, Z+3	; 0x03
    1c0a:	21 5c       	subi	r18, 0xC1	; 193
    1c0c:	3c 4f       	sbci	r19, 0xFC	; 252
    1c0e:	f9 01       	movw	r30, r18
    1c10:	80 83       	st	Z, r24
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	a2 83       	std	Z+2, r26	; 0x02
    1c16:	b3 83       	std	Z+3, r27	; 0x03
		if(oc>=tot-ac2+1 &&m)	gsp[i] = (double)(msp[i] * (tot-oc)/ac2);
    1c18:	af 80       	ldd	r10, Y+7	; 0x07
    1c1a:	b8 84       	ldd	r11, Y+8	; 0x08
    1c1c:	ae 14       	cp	r10, r14
    1c1e:	bf 04       	cpc	r11, r15
    1c20:	94 f5       	brge	.+100    	; 0x1c86 <OmniSet+0x1ae>
    1c22:	49 81       	ldd	r20, Y+1	; 0x01
    1c24:	5a 81       	ldd	r21, Y+2	; 0x02
    1c26:	45 36       	cpi	r20, 0x65	; 101
    1c28:	51 05       	cpc	r21, r1
    1c2a:	68 f1       	brcs	.+90     	; 0x1c86 <OmniSet+0x1ae>
    1c2c:	48 01       	movw	r8, r16
    1c2e:	88 0c       	add	r8, r8
    1c30:	99 1c       	adc	r9, r9
    1c32:	88 0c       	add	r8, r8
    1c34:	99 1c       	adc	r9, r9
    1c36:	f4 01       	movw	r30, r8
    1c38:	e3 5d       	subi	r30, 0xD3	; 211
    1c3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c3c:	a0 80       	ld	r10, Z
    1c3e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c40:	c2 80       	ldd	r12, Z+2	; 0x02
    1c42:	d3 80       	ldd	r13, Z+3	; 0x03
    1c44:	69 85       	ldd	r22, Y+9	; 0x09
    1c46:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	c6 01       	movw	r24, r12
    1c56:	b5 01       	movw	r22, r10
    1c58:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    1c5c:	5b 01       	movw	r10, r22
    1c5e:	6c 01       	movw	r12, r24
    1c60:	c2 01       	movw	r24, r4
    1c62:	b1 01       	movw	r22, r2
    1c64:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	c6 01       	movw	r24, r12
    1c6e:	b5 01       	movw	r22, r10
    1c70:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    1c74:	9b 01       	movw	r18, r22
    1c76:	ac 01       	movw	r20, r24
    1c78:	f4 01       	movw	r30, r8
    1c7a:	e1 5c       	subi	r30, 0xC1	; 193
    1c7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7e:	20 83       	st	Z, r18
    1c80:	31 83       	std	Z+1, r19	; 0x01
    1c82:	42 83       	std	Z+2, r20	; 0x02
    1c84:	53 83       	std	Z+3, r21	; 0x03
{
	int m=(ac>100 || ac<0)?1:0,ac2;
	if(ac>100) ac-=100;
	ac2 = abs(ac);

	for(int i=0; i<4; i++)
    1c86:	0f 5f       	subi	r16, 0xFF	; 255
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	04 30       	cpi	r16, 0x04	; 4
    1c8c:	11 05       	cpc	r17, r1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <OmniSet+0x1ba>
    1c90:	76 cf       	rjmp	.-276    	; 0x1b7e <OmniSet+0xa6>
		if(oc>=0 && !(ac<0))	gsp[i] = (double)(msp[i] * (oc+1)/ac2);
		if(oc>=ac2 || (ac<0))	gsp[i] = msp[i];
		if(oc>=tot-ac2+1 &&m)	gsp[i] = (double)(msp[i] * (tot-oc)/ac2);
		//if(oc>tot+1)	gsp[i] = 0;
	}
}
    1c92:	2e 96       	adiw	r28, 0x0e	; 14
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	8f 90       	pop	r8
    1cb6:	7f 90       	pop	r7
    1cb8:	6f 90       	pop	r6
    1cba:	5f 90       	pop	r5
    1cbc:	4f 90       	pop	r4
    1cbe:	3f 90       	pop	r3
    1cc0:	2f 90       	pop	r2
    1cc2:	08 95       	ret

00001cc4 <IR>:

	Odometry();
}

void IR(){
	IR_1 = (PINE&4)? 0 : 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0a 9b       	sbis	0x01, 2	; 1
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <IR+0xc>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	90 93 88 02 	sts	0x0288, r25
    1cd4:	80 93 87 02 	sts	0x0287, r24
	IR_2 = (PINE&8)? 0 : 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0b 9b       	sbis	0x01, 3	; 1
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <IR+0x20>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	90 93 84 02 	sts	0x0284, r25
    1ce8:	80 93 83 02 	sts	0x0283, r24
	IR_3 = (PINE&16)? 0 : 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0c 9b       	sbis	0x01, 4	; 1
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <IR+0x34>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	90 93 3e 03 	sts	0x033E, r25
    1cfc:	80 93 3d 03 	sts	0x033D, r24
	IR_4 = (PIND&16)? 0 : 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	84 9b       	sbis	0x10, 4	; 16
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <IR+0x48>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 86 02 	sts	0x0286, r25
    1d10:	80 93 85 02 	sts	0x0285, r24
	IR_5 = (PIND&64)? 0 : 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	86 9b       	sbis	0x10, 6	; 16
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <IR+0x5c>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 12 03 	sts	0x0312, r25
    1d24:	80 93 11 03 	sts	0x0311, r24

	IND_1 = (~PING&8)? 1: 0;
    1d28:	20 91 63 00 	lds	r18, 0x0063
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	23 ff       	sbrs	r18, 3
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <IR+0x74>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	90 93 8e 02 	sts	0x028E, r25
    1d3c:	80 93 8d 02 	sts	0x028D, r24
	IND_2 = (~PING&16)? 1: 0;
    1d40:	20 91 63 00 	lds	r18, 0x0063
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	24 ff       	sbrs	r18, 4
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <IR+0x8c>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	90 93 82 02 	sts	0x0282, r25
    1d54:	80 93 81 02 	sts	0x0281, r24
}
    1d58:	08 95       	ret

00001d5a <__vector_14>:
		//if(oc>tot+1)	gsp[i] = 0;
	}
}

ISR(TIMER1_OVF_vect)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	0b b6       	in	r0, 0x3b	; 59
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	2f 93       	push	r18
    1d72:	3f 93       	push	r19
    1d74:	4f 93       	push	r20
    1d76:	5f 93       	push	r21
    1d78:	6f 93       	push	r22
    1d7a:	7f 93       	push	r23
    1d7c:	8f 93       	push	r24
    1d7e:	9f 93       	push	r25
    1d80:	af 93       	push	r26
    1d82:	bf 93       	push	r27
    1d84:	ef 93       	push	r30
    1d86:	ff 93       	push	r31
	TCNT1H=0xFF; TCNT1L=0x70; //0.01檬
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	8d bd       	out	0x2d, r24	; 45
    1d8c:	80 e7       	ldi	r24, 0x70	; 112
    1d8e:	8c bd       	out	0x2c, r24	; 44

	/// 酒贰 眠啊 
	acf +=0.02;
    1d90:	60 91 14 02 	lds	r22, 0x0214
    1d94:	70 91 15 02 	lds	r23, 0x0215
    1d98:	80 91 16 02 	lds	r24, 0x0216
    1d9c:	90 91 17 02 	lds	r25, 0x0217
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	37 ed       	ldi	r19, 0xD7	; 215
    1da4:	43 ea       	ldi	r20, 0xA3	; 163
    1da6:	5c e3       	ldi	r21, 0x3C	; 60
    1da8:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1dac:	7b 01       	movw	r14, r22
    1dae:	8c 01       	movw	r16, r24
	acf = acf > 1? 1: acf;
    1db0:	7f 2d       	mov	r23, r15
    1db2:	91 2f       	mov	r25, r17
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	24 f4       	brge	.+8      	; 0x1dcc <__vector_14+0x72>
    1dc4:	ee 24       	eor	r14, r14
    1dc6:	ff 24       	eor	r15, r15
    1dc8:	00 e8       	ldi	r16, 0x80	; 128
    1dca:	1f e3       	ldi	r17, 0x3F	; 63
    1dcc:	8e 2d       	mov	r24, r14
    1dce:	9f 2d       	mov	r25, r15
    1dd0:	a0 2f       	mov	r26, r16
    1dd2:	b1 2f       	mov	r27, r17
    1dd4:	80 93 14 02 	sts	0x0214, r24
    1dd8:	90 93 15 02 	sts	0x0215, r25
    1ddc:	a0 93 16 02 	sts	0x0216, r26
    1de0:	b0 93 17 02 	sts	0x0217, r27
	cacf +=0.02;
    1de4:	60 91 2e 02 	lds	r22, 0x022E
    1de8:	70 91 2f 02 	lds	r23, 0x022F
    1dec:	80 91 30 02 	lds	r24, 0x0230
    1df0:	90 91 31 02 	lds	r25, 0x0231
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	37 ed       	ldi	r19, 0xD7	; 215
    1df8:	43 ea       	ldi	r20, 0xA3	; 163
    1dfa:	5c e3       	ldi	r21, 0x3C	; 60
    1dfc:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1e00:	7b 01       	movw	r14, r22
    1e02:	8c 01       	movw	r16, r24
	cacf = cacf > 1? 1: cacf;
    1e04:	7f 2d       	mov	r23, r15
    1e06:	91 2f       	mov	r25, r17
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	24 f4       	brge	.+8      	; 0x1e20 <__vector_14+0xc6>
    1e18:	ee 24       	eor	r14, r14
    1e1a:	ff 24       	eor	r15, r15
    1e1c:	00 e8       	ldi	r16, 0x80	; 128
    1e1e:	1f e3       	ldi	r17, 0x3F	; 63
    1e20:	8e 2d       	mov	r24, r14
    1e22:	9f 2d       	mov	r25, r15
    1e24:	a0 2f       	mov	r26, r16
    1e26:	b1 2f       	mov	r27, r17
    1e28:	80 93 2e 02 	sts	0x022E, r24
    1e2c:	90 93 2f 02 	sts	0x022F, r25
    1e30:	a0 93 30 02 	sts	0x0230, r26
    1e34:	b0 93 31 02 	sts	0x0231, r27
	zacf +=0.05;
    1e38:	60 91 18 02 	lds	r22, 0x0218
    1e3c:	70 91 19 02 	lds	r23, 0x0219
    1e40:	80 91 1a 02 	lds	r24, 0x021A
    1e44:	90 91 1b 02 	lds	r25, 0x021B
    1e48:	2d ec       	ldi	r18, 0xCD	; 205
    1e4a:	3c ec       	ldi	r19, 0xCC	; 204
    1e4c:	4c e4       	ldi	r20, 0x4C	; 76
    1e4e:	5d e3       	ldi	r21, 0x3D	; 61
    1e50:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    1e54:	7b 01       	movw	r14, r22
    1e56:	8c 01       	movw	r16, r24
	zacf = zacf > 1? 1: zacf;
    1e58:	7f 2d       	mov	r23, r15
    1e5a:	91 2f       	mov	r25, r17
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	24 f4       	brge	.+8      	; 0x1e74 <__vector_14+0x11a>
    1e6c:	ee 24       	eor	r14, r14
    1e6e:	ff 24       	eor	r15, r15
    1e70:	00 e8       	ldi	r16, 0x80	; 128
    1e72:	1f e3       	ldi	r17, 0x3F	; 63
    1e74:	8e 2d       	mov	r24, r14
    1e76:	9f 2d       	mov	r25, r15
    1e78:	a0 2f       	mov	r26, r16
    1e7a:	b1 2f       	mov	r27, r17
    1e7c:	80 93 18 02 	sts	0x0218, r24
    1e80:	90 93 19 02 	sts	0x0219, r25
    1e84:	a0 93 1a 02 	sts	0x021A, r26
    1e88:	b0 93 1b 02 	sts	0x021B, r27

	IR();
    1e8c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <IR>

	if(IR_5  && !ba5)	bar_5++,ba5 = 1;
    1e90:	80 91 11 03 	lds	r24, 0x0311
    1e94:	90 91 12 03 	lds	r25, 0x0312
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	91 f0       	breq	.+36     	; 0x1ec0 <__vector_14+0x166>
    1e9c:	80 91 2c 02 	lds	r24, 0x022C
    1ea0:	90 91 2d 02 	lds	r25, 0x022D
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 f4       	brne	.+24     	; 0x1ec0 <__vector_14+0x166>
    1ea8:	80 91 4c 02 	lds	r24, 0x024C
    1eac:	90 91 4d 02 	lds	r25, 0x024D
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	90 93 4d 02 	sts	0x024D, r25
    1eb6:	80 93 4c 02 	sts	0x024C, r24
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <__vector_14+0x182>
	else if(!IR_5 && ba5)	ba5 = 5;
    1ec0:	80 91 11 03 	lds	r24, 0x0311
    1ec4:	90 91 12 03 	lds	r25, 0x0312
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	61 f4       	brne	.+24     	; 0x1ee4 <__vector_14+0x18a>
    1ecc:	80 91 2c 02 	lds	r24, 0x022C
    1ed0:	90 91 2d 02 	lds	r25, 0x022D
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	31 f0       	breq	.+12     	; 0x1ee4 <__vector_14+0x18a>
    1ed8:	85 e0       	ldi	r24, 0x05	; 5
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	90 93 2d 02 	sts	0x022D, r25
    1ee0:	80 93 2c 02 	sts	0x022C, r24
	if(IR_1  && !ba1)	bar_1++,ba1 = 1;
    1ee4:	80 91 87 02 	lds	r24, 0x0287
    1ee8:	90 91 88 02 	lds	r25, 0x0288
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	b1 f0       	breq	.+44     	; 0x1f1c <__vector_14+0x1c2>
    1ef0:	80 91 12 02 	lds	r24, 0x0212
    1ef4:	90 91 13 02 	lds	r25, 0x0213
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	81 f4       	brne	.+32     	; 0x1f1c <__vector_14+0x1c2>
    1efc:	80 91 1c 02 	lds	r24, 0x021C
    1f00:	90 91 1d 02 	lds	r25, 0x021D
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	90 93 1d 02 	sts	0x021D, r25
    1f0a:	80 93 1c 02 	sts	0x021C, r24
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	90 93 13 02 	sts	0x0213, r25
    1f16:	80 93 12 02 	sts	0x0212, r24
    1f1a:	10 c0       	rjmp	.+32     	; 0x1f3c <__vector_14+0x1e2>
	else if(!IR_1 && ba1)	ba1 = 0;
    1f1c:	80 91 87 02 	lds	r24, 0x0287
    1f20:	90 91 88 02 	lds	r25, 0x0288
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	51 f4       	brne	.+20     	; 0x1f3c <__vector_14+0x1e2>
    1f28:	80 91 12 02 	lds	r24, 0x0212
    1f2c:	90 91 13 02 	lds	r25, 0x0213
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	21 f0       	breq	.+8      	; 0x1f3c <__vector_14+0x1e2>
    1f34:	10 92 13 02 	sts	0x0213, r1
    1f38:	10 92 12 02 	sts	0x0212, r1
	if(IR_2  && !ba2)	bar_2++,ba2 = 1,co[code++] = 1;
    1f3c:	80 91 83 02 	lds	r24, 0x0283
    1f40:	90 91 84 02 	lds	r25, 0x0284
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	31 f1       	breq	.+76     	; 0x1f94 <__vector_14+0x23a>
    1f48:	80 91 48 02 	lds	r24, 0x0248
    1f4c:	90 91 49 02 	lds	r25, 0x0249
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	01 f5       	brne	.+64     	; 0x1f94 <__vector_14+0x23a>
    1f54:	80 91 52 02 	lds	r24, 0x0252
    1f58:	90 91 53 02 	lds	r25, 0x0253
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	90 93 53 02 	sts	0x0253, r25
    1f62:	80 93 52 02 	sts	0x0252, r24
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	30 93 49 02 	sts	0x0249, r19
    1f6e:	20 93 48 02 	sts	0x0248, r18
    1f72:	80 91 2b 03 	lds	r24, 0x032B
    1f76:	90 91 2c 03 	lds	r25, 0x032C
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	e7 51       	subi	r30, 0x17	; 23
    1f82:	fd 4f       	sbci	r31, 0xFD	; 253
    1f84:	31 83       	std	Z+1, r19	; 0x01
    1f86:	20 83       	st	Z, r18
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	90 93 2c 03 	sts	0x032C, r25
    1f8e:	80 93 2b 03 	sts	0x032B, r24
    1f92:	10 c0       	rjmp	.+32     	; 0x1fb4 <__vector_14+0x25a>
	else if(!IR_2 && ba2)	ba2 = 0;
    1f94:	80 91 83 02 	lds	r24, 0x0283
    1f98:	90 91 84 02 	lds	r25, 0x0284
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	51 f4       	brne	.+20     	; 0x1fb4 <__vector_14+0x25a>
    1fa0:	80 91 48 02 	lds	r24, 0x0248
    1fa4:	90 91 49 02 	lds	r25, 0x0249
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <__vector_14+0x25a>
    1fac:	10 92 49 02 	sts	0x0249, r1
    1fb0:	10 92 48 02 	sts	0x0248, r1
	if(IR_3  && !ba3)	bar_3++,ba3 = 1;
    1fb4:	80 91 3d 03 	lds	r24, 0x033D
    1fb8:	90 91 3e 03 	lds	r25, 0x033E
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	b1 f0       	breq	.+44     	; 0x1fec <__vector_14+0x292>
    1fc0:	80 91 44 02 	lds	r24, 0x0244
    1fc4:	90 91 45 02 	lds	r25, 0x0245
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	81 f4       	brne	.+32     	; 0x1fec <__vector_14+0x292>
    1fcc:	80 91 42 02 	lds	r24, 0x0242
    1fd0:	90 91 43 02 	lds	r25, 0x0243
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	90 93 43 02 	sts	0x0243, r25
    1fda:	80 93 42 02 	sts	0x0242, r24
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	90 93 45 02 	sts	0x0245, r25
    1fe6:	80 93 44 02 	sts	0x0244, r24
    1fea:	10 c0       	rjmp	.+32     	; 0x200c <__vector_14+0x2b2>
	else if(!IR_3 && ba3)	ba3 = 0;
    1fec:	80 91 3d 03 	lds	r24, 0x033D
    1ff0:	90 91 3e 03 	lds	r25, 0x033E
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	51 f4       	brne	.+20     	; 0x200c <__vector_14+0x2b2>
    1ff8:	80 91 44 02 	lds	r24, 0x0244
    1ffc:	90 91 45 02 	lds	r25, 0x0245
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	21 f0       	breq	.+8      	; 0x200c <__vector_14+0x2b2>
    2004:	10 92 45 02 	sts	0x0245, r1
    2008:	10 92 44 02 	sts	0x0244, r1
	if(IR_4  && !ba4)	bar_4++,ba4 = 1;
    200c:	80 91 85 02 	lds	r24, 0x0285
    2010:	90 91 86 02 	lds	r25, 0x0286
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	b1 f0       	breq	.+44     	; 0x2044 <__vector_14+0x2ea>
    2018:	80 91 40 02 	lds	r24, 0x0240
    201c:	90 91 41 02 	lds	r25, 0x0241
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	81 f4       	brne	.+32     	; 0x2044 <__vector_14+0x2ea>
    2024:	80 91 4a 02 	lds	r24, 0x024A
    2028:	90 91 4b 02 	lds	r25, 0x024B
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	90 93 4b 02 	sts	0x024B, r25
    2032:	80 93 4a 02 	sts	0x024A, r24
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	90 93 41 02 	sts	0x0241, r25
    203e:	80 93 40 02 	sts	0x0240, r24
    2042:	10 c0       	rjmp	.+32     	; 0x2064 <__vector_14+0x30a>
	else if(!IR_4 && ba4)	ba4 = 0;
    2044:	80 91 85 02 	lds	r24, 0x0285
    2048:	90 91 86 02 	lds	r25, 0x0286
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	51 f4       	brne	.+20     	; 0x2064 <__vector_14+0x30a>
    2050:	80 91 40 02 	lds	r24, 0x0240
    2054:	90 91 41 02 	lds	r25, 0x0241
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	21 f0       	breq	.+8      	; 0x2064 <__vector_14+0x30a>
    205c:	10 92 41 02 	sts	0x0241, r1
    2060:	10 92 40 02 	sts	0x0240, r1
	if(IR_5  && !ba5)	bar_5++,ba5 = 1;
    2064:	80 91 11 03 	lds	r24, 0x0311
    2068:	90 91 12 03 	lds	r25, 0x0312
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	b1 f0       	breq	.+44     	; 0x209c <__vector_14+0x342>
    2070:	80 91 2c 02 	lds	r24, 0x022C
    2074:	90 91 2d 02 	lds	r25, 0x022D
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	81 f4       	brne	.+32     	; 0x209c <__vector_14+0x342>
    207c:	80 91 4c 02 	lds	r24, 0x024C
    2080:	90 91 4d 02 	lds	r25, 0x024D
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	90 93 4d 02 	sts	0x024D, r25
    208a:	80 93 4c 02 	sts	0x024C, r24
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	90 93 2d 02 	sts	0x022D, r25
    2096:	80 93 2c 02 	sts	0x022C, r24
    209a:	10 c0       	rjmp	.+32     	; 0x20bc <__vector_14+0x362>
	else if(!IR_5 && ba5)	ba5 = 0;
    209c:	80 91 11 03 	lds	r24, 0x0311
    20a0:	90 91 12 03 	lds	r25, 0x0312
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	51 f4       	brne	.+20     	; 0x20bc <__vector_14+0x362>
    20a8:	80 91 2c 02 	lds	r24, 0x022C
    20ac:	90 91 2d 02 	lds	r25, 0x022D
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	21 f0       	breq	.+8      	; 0x20bc <__vector_14+0x362>
    20b4:	10 92 2d 02 	sts	0x022D, r1
    20b8:	10 92 2c 02 	sts	0x022C, r1


	if(IND_1  && !sba1)	sbar_1++,sba1 = 1,co[code++] = 2;
    20bc:	80 91 8d 02 	lds	r24, 0x028D
    20c0:	90 91 8e 02 	lds	r25, 0x028E
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	41 f1       	breq	.+80     	; 0x2118 <__vector_14+0x3be>
    20c8:	80 91 46 02 	lds	r24, 0x0246
    20cc:	90 91 47 02 	lds	r25, 0x0247
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	11 f5       	brne	.+68     	; 0x2118 <__vector_14+0x3be>
    20d4:	80 91 3e 02 	lds	r24, 0x023E
    20d8:	90 91 3f 02 	lds	r25, 0x023F
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	90 93 3f 02 	sts	0x023F, r25
    20e2:	80 93 3e 02 	sts	0x023E, r24
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	90 93 47 02 	sts	0x0247, r25
    20ee:	80 93 46 02 	sts	0x0246, r24
    20f2:	80 91 2b 03 	lds	r24, 0x032B
    20f6:	90 91 2c 03 	lds	r25, 0x032C
    20fa:	fc 01       	movw	r30, r24
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	e7 51       	subi	r30, 0x17	; 23
    2102:	fd 4f       	sbci	r31, 0xFD	; 253
    2104:	22 e0       	ldi	r18, 0x02	; 2
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	31 83       	std	Z+1, r19	; 0x01
    210a:	20 83       	st	Z, r18
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	90 93 2c 03 	sts	0x032C, r25
    2112:	80 93 2b 03 	sts	0x032B, r24
    2116:	10 c0       	rjmp	.+32     	; 0x2138 <__vector_14+0x3de>
	else if(!IND_1 && sba1)	sba1 = 0;
    2118:	80 91 8d 02 	lds	r24, 0x028D
    211c:	90 91 8e 02 	lds	r25, 0x028E
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	51 f4       	brne	.+20     	; 0x2138 <__vector_14+0x3de>
    2124:	80 91 46 02 	lds	r24, 0x0246
    2128:	90 91 47 02 	lds	r25, 0x0247
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	21 f0       	breq	.+8      	; 0x2138 <__vector_14+0x3de>
    2130:	10 92 47 02 	sts	0x0247, r1
    2134:	10 92 46 02 	sts	0x0246, r1
	if(IND_2  && !sba2)	sbar_2++,sba2 = 1;
    2138:	80 91 81 02 	lds	r24, 0x0281
    213c:	90 91 82 02 	lds	r25, 0x0282
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	b1 f0       	breq	.+44     	; 0x2170 <__vector_14+0x416>
    2144:	80 91 28 02 	lds	r24, 0x0228
    2148:	90 91 29 02 	lds	r25, 0x0229
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	81 f4       	brne	.+32     	; 0x2170 <__vector_14+0x416>
    2150:	80 91 54 02 	lds	r24, 0x0254
    2154:	90 91 55 02 	lds	r25, 0x0255
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	90 93 55 02 	sts	0x0255, r25
    215e:	80 93 54 02 	sts	0x0254, r24
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	90 93 29 02 	sts	0x0229, r25
    216a:	80 93 28 02 	sts	0x0228, r24
    216e:	10 c0       	rjmp	.+32     	; 0x2190 <__vector_14+0x436>
	else if(!IND_2 && sba2)	sba2 = 0;
    2170:	80 91 81 02 	lds	r24, 0x0281
    2174:	90 91 82 02 	lds	r25, 0x0282
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	51 f4       	brne	.+20     	; 0x2190 <__vector_14+0x436>
    217c:	80 91 28 02 	lds	r24, 0x0228
    2180:	90 91 29 02 	lds	r25, 0x0229
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	21 f0       	breq	.+8      	; 0x2190 <__vector_14+0x436>
    2188:	10 92 29 02 	sts	0x0229, r1
    218c:	10 92 28 02 	sts	0x0228, r1

	if(oc)oc++;
    2190:	80 91 2a 02 	lds	r24, 0x022A
    2194:	90 91 2b 02 	lds	r25, 0x022B
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	29 f0       	breq	.+10     	; 0x21a6 <__vector_14+0x44c>
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	90 93 2b 02 	sts	0x022B, r25
    21a2:	80 93 2a 02 	sts	0x022A, r24
	if(gtc)gtc--;
    21a6:	80 91 02 02 	lds	r24, 0x0202
    21aa:	90 91 03 02 	lds	r25, 0x0203
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	49 f0       	breq	.+18     	; 0x21c4 <__vector_14+0x46a>
    21b2:	80 91 02 02 	lds	r24, 0x0202
    21b6:	90 91 03 02 	lds	r25, 0x0203
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	90 93 03 02 	sts	0x0203, r25
    21c0:	80 93 02 02 	sts	0x0202, r24
	if(pc)pc++;
    21c4:	80 91 4e 02 	lds	r24, 0x024E
    21c8:	90 91 4f 02 	lds	r25, 0x024F
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	49 f0       	breq	.+18     	; 0x21e2 <__vector_14+0x488>
    21d0:	80 91 4e 02 	lds	r24, 0x024E
    21d4:	90 91 4f 02 	lds	r25, 0x024F
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	90 93 4f 02 	sts	0x024F, r25
    21de:	80 93 4e 02 	sts	0x024E, r24
	if(psdTimer)psdTimer++;
    21e2:	80 91 3c 02 	lds	r24, 0x023C
    21e6:	90 91 3d 02 	lds	r25, 0x023D
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	29 f0       	breq	.+10     	; 0x21f8 <__vector_14+0x49e>
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	90 93 3d 02 	sts	0x023D, r25
    21f4:	80 93 3c 02 	sts	0x023C, r24
	if(code > 19) code = 0;
    21f8:	80 91 2b 03 	lds	r24, 0x032B
    21fc:	90 91 2c 03 	lds	r25, 0x032C
    2200:	84 31       	cpi	r24, 0x14	; 20
    2202:	91 05       	cpc	r25, r1
    2204:	24 f0       	brlt	.+8      	; 0x220e <__vector_14+0x4b4>
    2206:	10 92 2c 03 	sts	0x032C, r1
    220a:	10 92 2b 03 	sts	0x032B, r1

	Odometry();
    220e:	0e 94 13 0b 	call	0x1626	; 0x1626 <Odometry>
}
    2212:	ff 91       	pop	r31
    2214:	ef 91       	pop	r30
    2216:	bf 91       	pop	r27
    2218:	af 91       	pop	r26
    221a:	9f 91       	pop	r25
    221c:	8f 91       	pop	r24
    221e:	7f 91       	pop	r23
    2220:	6f 91       	pop	r22
    2222:	5f 91       	pop	r21
    2224:	4f 91       	pop	r20
    2226:	3f 91       	pop	r19
    2228:	2f 91       	pop	r18
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	0f 90       	pop	r0
    2234:	0b be       	out	0x3b, r0	; 59
    2236:	0f 90       	pop	r0
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	0f 90       	pop	r0
    223c:	1f 90       	pop	r1
    223e:	18 95       	reti

00002240 <SS>:

	IND_1 = (~PING&8)? 1: 0;
	IND_2 = (~PING&16)? 1: 0;
}

void SS(){
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
	speed(0,0,0,0);
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	cb 01       	movw	r24, r22
    2256:	9b 01       	movw	r18, r22
    2258:	ac 01       	movw	r20, r24
    225a:	7b 01       	movw	r14, r22
    225c:	8c 01       	movw	r16, r24
    225e:	5b 01       	movw	r10, r22
    2260:	6c 01       	movw	r12, r24
    2262:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
}
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	af 90       	pop	r10
    2276:	08 95       	ret

00002278 <SensorIn>:

int SensorIn(int n, int dis)
{
	if(g_psd[n] < dis) { if(!psdTimer) psdTimer = 1; }
    2278:	fc 01       	movw	r30, r24
    227a:	e2 5e       	subi	r30, 0xE2	; 226
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	80 81       	ld	r24, Z
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	86 17       	cp	r24, r22
    2284:	97 07       	cpc	r25, r23
    2286:	6c f4       	brge	.+26     	; 0x22a2 <SensorIn+0x2a>
    2288:	80 91 3c 02 	lds	r24, 0x023C
    228c:	90 91 3d 02 	lds	r25, 0x023D
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	59 f4       	brne	.+22     	; 0x22aa <SensorIn+0x32>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	90 93 3d 02 	sts	0x023D, r25
    229c:	80 93 3c 02 	sts	0x023C, r24
    22a0:	04 c0       	rjmp	.+8      	; 0x22aa <SensorIn+0x32>
	else psdTimer = 0;
    22a2:	10 92 3d 02 	sts	0x023D, r1
    22a6:	10 92 3c 02 	sts	0x023C, r1
	
	return psdTimer >= 10 ? 1:0;
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	80 91 3c 02 	lds	r24, 0x023C
    22b2:	90 91 3d 02 	lds	r25, 0x023D
    22b6:	8a 30       	cpi	r24, 0x0A	; 10
    22b8:	91 05       	cpc	r25, r1
    22ba:	14 f4       	brge	.+4      	; 0x22c0 <SensorIn+0x48>
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
}
    22c0:	c9 01       	movw	r24, r18
    22c2:	08 95       	ret

000022c4 <TM>:

void TM(unsigned char wm){
    22c4:	1f 93       	push	r17
    22c6:	18 2f       	mov	r17, r24
	unsigned char buff= 0;

	while(1){
		putchar1(17);
    22c8:	81 e1       	ldi	r24, 0x11	; 17
    22ca:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>
		putchar1(wm);
    22ce:	81 2f       	mov	r24, r17
    22d0:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>

		while(!rx1_flg);
    22d4:	80 91 fe 01 	lds	r24, 0x01FE
    22d8:	88 23       	and	r24, r24
    22da:	e1 f3       	breq	.-8      	; 0x22d4 <TM+0x10>

		buff = getchar1();
    22dc:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>

		if(buff) break;
    22e0:	88 23       	and	r24, r24
    22e2:	91 f3       	breq	.-28     	; 0x22c8 <TM+0x4>
	}
}
    22e4:	1f 91       	pop	r17
    22e6:	08 95       	ret

000022e8 <T>:

int T(int data, int ci){
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	8c 01       	movw	r16, r24
    230a:	3b 01       	movw	r6, r22
	int puck[5], col = 0, col2 = 0, min = 255, max = 0;

	for(int i = 1 ; i <= ci;  i++){
    230c:	c1 e0       	ldi	r28, 0x01	; 1
    230e:	d0 e0       	ldi	r29, 0x00	; 0
		if(buff) break;
	}
}

int T(int data, int ci){
	int puck[5], col = 0, col2 = 0, min = 255, max = 0;
    2310:	cc 24       	eor	r12, r12
    2312:	dd 24       	eor	r13, r13
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	a8 2e       	mov	r10, r24
    2318:	b1 2c       	mov	r11, r1
    231a:	88 24       	eor	r8, r8
    231c:	99 24       	eor	r9, r9
    231e:	ee 24       	eor	r14, r14
    2320:	ff 24       	eor	r15, r15

	for(int i = 1 ; i <= ci;  i++){
		puck[i] = Cmd(i,abs(data));
    2322:	44 24       	eor	r4, r4
    2324:	55 24       	eor	r5, r5
    2326:	40 1a       	sub	r4, r16
    2328:	51 0a       	sbc	r5, r17
}

int T(int data, int ci){
	int puck[5], col = 0, col2 = 0, min = 255, max = 0;

	for(int i = 1 ; i <= ci;  i++){
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <T+0x6c>
		puck[i] = Cmd(i,abs(data));
    232c:	60 2f       	mov	r22, r16
    232e:	17 fd       	sbrc	r17, 7
    2330:	64 2d       	mov	r22, r4
    2332:	8c 2f       	mov	r24, r28
    2334:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    2338:	90 e0       	ldi	r25, 0x00	; 0
		if(max < puck[i]) max = puck[i], col = i;
    233a:	c8 16       	cp	r12, r24
    233c:	d9 06       	cpc	r13, r25
    233e:	14 f4       	brge	.+4      	; 0x2344 <T+0x5c>
    2340:	6c 01       	movw	r12, r24
    2342:	7e 01       	movw	r14, r28
		if(min > puck[i] && puck[i]) min = puck[i], col2 = i;
    2344:	8a 15       	cp	r24, r10
    2346:	9b 05       	cpc	r25, r11
    2348:	24 f4       	brge	.+8      	; 0x2352 <T+0x6a>
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	11 f0       	breq	.+4      	; 0x2352 <T+0x6a>
    234e:	5c 01       	movw	r10, r24
    2350:	4e 01       	movw	r8, r28
}

int T(int data, int ci){
	int puck[5], col = 0, col2 = 0, min = 255, max = 0;

	for(int i = 1 ; i <= ci;  i++){
    2352:	21 96       	adiw	r28, 0x01	; 1
    2354:	6c 16       	cp	r6, r28
    2356:	7d 06       	cpc	r7, r29
    2358:	4c f7       	brge	.-46     	; 0x232c <T+0x44>
		puck[i] = Cmd(i,abs(data));
		if(max < puck[i]) max = puck[i], col = i;
		if(min > puck[i] && puck[i]) min = puck[i], col2 = i;
	}
	return (data > 0)? col : col2;
    235a:	10 16       	cp	r1, r16
    235c:	11 06       	cpc	r1, r17
    235e:	0c f0       	brlt	.+2      	; 0x2362 <T+0x7a>
    2360:	74 01       	movw	r14, r8
}
    2362:	c7 01       	movw	r24, r14
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	bf 90       	pop	r11
    2376:	af 90       	pop	r10
    2378:	9f 90       	pop	r9
    237a:	8f 90       	pop	r8
    237c:	7f 90       	pop	r7
    237e:	6f 90       	pop	r6
    2380:	5f 90       	pop	r5
    2382:	4f 90       	pop	r4
    2384:	08 95       	ret

00002386 <LF>:
		
	}
}

double LF(double max, double min ,double v)
{
    2386:	6f 92       	push	r6
    2388:	7f 92       	push	r7
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	d6 2e       	mov	r13, r22
    23a0:	c7 2e       	mov	r12, r23
    23a2:	b8 2e       	mov	r11, r24
    23a4:	a9 2e       	mov	r10, r25
    23a6:	92 2e       	mov	r9, r18
    23a8:	83 2e       	mov	r8, r19
    23aa:	74 2e       	mov	r7, r20
    23ac:	65 2e       	mov	r6, r21
	if(v>max) return max;
    23ae:	6e 2d       	mov	r22, r14
    23b0:	7f 2d       	mov	r23, r15
    23b2:	80 2f       	mov	r24, r16
    23b4:	91 2f       	mov	r25, r17
    23b6:	d6 01       	movw	r26, r12
    23b8:	f5 01       	movw	r30, r10
    23ba:	2b 2f       	mov	r18, r27
    23bc:	3a 2f       	mov	r19, r26
    23be:	4f 2f       	mov	r20, r31
    23c0:	5e 2f       	mov	r21, r30
    23c2:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	ac f0       	brlt	.+42     	; 0x23f4 <LF+0x6e>
	if(v<min) return min;
    23ca:	6e 2d       	mov	r22, r14
    23cc:	7f 2d       	mov	r23, r15
    23ce:	80 2f       	mov	r24, r16
    23d0:	91 2f       	mov	r25, r17
    23d2:	d4 01       	movw	r26, r8
    23d4:	f3 01       	movw	r30, r6
    23d6:	2b 2f       	mov	r18, r27
    23d8:	3a 2f       	mov	r19, r26
    23da:	4f 2f       	mov	r20, r31
    23dc:	5e 2f       	mov	r21, r30
    23de:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    23e2:	87 ff       	sbrs	r24, 7
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <LF+0x66>
    23e6:	64 01       	movw	r12, r8
    23e8:	53 01       	movw	r10, r6
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <LF+0x6e>
	return v;
    23ec:	de 2c       	mov	r13, r14
    23ee:	cf 2c       	mov	r12, r15
    23f0:	b0 2e       	mov	r11, r16
    23f2:	a1 2e       	mov	r10, r17
}
    23f4:	a6 01       	movw	r20, r12
    23f6:	95 01       	movw	r18, r10
    23f8:	65 2f       	mov	r22, r21
    23fa:	7c 2d       	mov	r23, r12
    23fc:	83 2f       	mov	r24, r19
    23fe:	9a 2d       	mov	r25, r10
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	08 95       	ret

0000241a <TB2>:
		if(oc > 350 ) {LE return;}
		if(abs(x) <= 0 && abs(y) <= 1 && abs(z) <= 0) {LE return;}
		
	}
}
void TB2(int col, int xp, int yp){
    241a:	2f 92       	push	r2
    241c:	3f 92       	push	r3
    241e:	4f 92       	push	r4
    2420:	5f 92       	push	r5
    2422:	6f 92       	push	r6
    2424:	7f 92       	push	r7
    2426:	8f 92       	push	r8
    2428:	9f 92       	push	r9
    242a:	af 92       	push	r10
    242c:	bf 92       	push	r11
    242e:	cf 92       	push	r12
    2430:	df 92       	push	r13
    2432:	ef 92       	push	r14
    2434:	ff 92       	push	r15
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	29 97       	sbiw	r28, 0x09	; 9
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	78 2e       	mov	r7, r24
    2450:	5b 01       	movw	r10, r22
    2452:	5d 83       	std	Y+5, r21	; 0x05
    2454:	4c 83       	std	Y+4, r20	; 0x04
	ginit("TB2");
    2456:	10 92 03 02 	sts	0x0203, r1
    245a:	10 92 02 02 	sts	0x0202, r1
    245e:	10 92 50 03 	sts	0x0350, r1
    2462:	10 92 4f 03 	sts	0x034F, r1
    2466:	80 91 4f 03 	lds	r24, 0x034F
    246a:	90 91 50 03 	lds	r25, 0x0350
    246e:	90 93 2b 02 	sts	0x022B, r25
    2472:	80 93 2a 02 	sts	0x022A, r24
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	dc 01       	movw	r26, r24
    2480:	8b 01       	movw	r16, r22
    2482:	00 0f       	add	r16, r16
    2484:	11 1f       	adc	r17, r17
    2486:	00 0f       	add	r16, r16
    2488:	11 1f       	adc	r17, r17
    248a:	98 01       	movw	r18, r16
    248c:	21 5c       	subi	r18, 0xC1	; 193
    248e:	3c 4f       	sbci	r19, 0xFC	; 252
    2490:	f9 01       	movw	r30, r18
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
    249a:	20 81       	ld	r18, Z
    249c:	31 81       	ldd	r19, Z+1	; 0x01
    249e:	42 81       	ldd	r20, Z+2	; 0x02
    24a0:	53 81       	ldd	r21, Z+3	; 0x03
    24a2:	f8 01       	movw	r30, r16
    24a4:	e3 5d       	subi	r30, 0xD3	; 211
    24a6:	fc 4f       	sbci	r31, 0xFC	; 252
    24a8:	20 83       	st	Z, r18
    24aa:	31 83       	std	Z+1, r19	; 0x01
    24ac:	42 83       	std	Z+2, r20	; 0x02
    24ae:	53 83       	std	Z+3, r21	; 0x03
    24b0:	6f 5f       	subi	r22, 0xFF	; 255
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	64 30       	cpi	r22, 0x04	; 4
    24b6:	71 05       	cpc	r23, r1
    24b8:	19 f7       	brne	.-58     	; 0x2480 <TB2+0x66>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <TB2+0xa2>
    24bc:	00 d0       	rcall	.+0      	; 0x24be <TB2+0xa4>
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <TB2+0xa6>
    24c0:	ed b7       	in	r30, 0x3d	; 61
    24c2:	fe b7       	in	r31, 0x3e	; 62
    24c4:	31 96       	adiw	r30, 0x01	; 1
    24c6:	07 e1       	ldi	r16, 0x17	; 23
    24c8:	13 e0       	ldi	r17, 0x03	; 3
    24ca:	ad b7       	in	r26, 0x3d	; 61
    24cc:	be b7       	in	r27, 0x3e	; 62
    24ce:	12 96       	adiw	r26, 0x02	; 2
    24d0:	1c 93       	st	X, r17
    24d2:	0e 93       	st	-X, r16
    24d4:	11 97       	sbiw	r26, 0x01	; 1
    24d6:	82 eb       	ldi	r24, 0xB2	; 178
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	93 83       	std	Z+3, r25	; 0x03
    24dc:	82 83       	std	Z+2, r24	; 0x02
    24de:	87 eb       	ldi	r24, 0xB7	; 183
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	95 83       	std	Z+5, r25	; 0x05
    24e4:	84 83       	std	Z+4, r24	; 0x04
    24e6:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    24ea:	ed b7       	in	r30, 0x3d	; 61
    24ec:	fe b7       	in	r31, 0x3e	; 62
    24ee:	36 96       	adiw	r30, 0x06	; 6
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	fe bf       	out	0x3e, r31	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	ed bf       	out	0x3d, r30	; 61
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	67 e0       	ldi	r22, 0x07	; 7
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	a8 01       	movw	r20, r16
    2504:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>

	int xpp=  0, ypp = 0;
	int x= 0, y=  0;
	
	pc= 0;
    2508:	10 92 4f 02 	sts	0x024F, r1
    250c:	10 92 4e 02 	sts	0x024E, r1
	xpp = Cmd(col,102);
    2510:	87 2d       	mov	r24, r7
    2512:	66 e6       	ldi	r22, 0x66	; 102
    2514:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    2518:	88 2e       	mov	r8, r24
	xp += pos[2];
    251a:	e0 90 60 02 	lds	r14, 0x0260
    251e:	f0 90 61 02 	lds	r15, 0x0261
    2522:	00 91 62 02 	lds	r16, 0x0262
    2526:	10 91 63 02 	lds	r17, 0x0263
    252a:	b5 01       	movw	r22, r10
    252c:	88 27       	eor	r24, r24
    252e:	77 fd       	sbrc	r23, 7
    2530:	80 95       	com	r24
    2532:	98 2f       	mov	r25, r24
    2534:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2538:	a8 01       	movw	r20, r16
    253a:	97 01       	movw	r18, r14
    253c:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    2540:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
	xp += (xp - xpp) * ((xp - xpp)/ 600 + 0.24);
    2544:	9b 01       	movw	r18, r22
    2546:	28 19       	sub	r18, r8
    2548:	31 09       	sbc	r19, r1
    254a:	49 01       	movw	r8, r18
    254c:	88 27       	eor	r24, r24
    254e:	77 fd       	sbrc	r23, 7
    2550:	80 95       	com	r24
    2552:	98 2f       	mov	r25, r24
    2554:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2558:	5b 01       	movw	r10, r22
    255a:	6c 01       	movw	r12, r24
    255c:	b4 01       	movw	r22, r8
    255e:	88 27       	eor	r24, r24
    2560:	77 fd       	sbrc	r23, 7
    2562:	80 95       	com	r24
    2564:	98 2f       	mov	r25, r24
    2566:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    256a:	7b 01       	movw	r14, r22
    256c:	8c 01       	movw	r16, r24
    256e:	c4 01       	movw	r24, r8
    2570:	68 e5       	ldi	r22, 0x58	; 88
    2572:	72 e0       	ldi	r23, 0x02	; 2
    2574:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    2578:	88 27       	eor	r24, r24
    257a:	77 fd       	sbrc	r23, 7
    257c:	80 95       	com	r24
    257e:	98 2f       	mov	r25, r24
    2580:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2584:	2f e8       	ldi	r18, 0x8F	; 143
    2586:	32 ec       	ldi	r19, 0xC2	; 194
    2588:	45 e7       	ldi	r20, 0x75	; 117
    258a:	5e e3       	ldi	r21, 0x3E	; 62
    258c:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    2590:	9b 01       	movw	r18, r22
    2592:	ac 01       	movw	r20, r24
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	c6 01       	movw	r24, r12
    25a2:	b5 01       	movw	r22, r10
    25a4:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    25a8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    25ac:	7b 83       	std	Y+3, r23	; 0x03
    25ae:	6a 83       	std	Y+2, r22	; 0x02
}
void TB2(int col, int xp, int yp){
	ginit("TB2");

	int xpp=  0, ypp = 0;
	int x= 0, y=  0;
    25b0:	88 24       	eor	r8, r8
    25b2:	99 24       	eor	r9, r9
		
			if(!pc) pc = 1;
			if(pc > 350) {SS(); return;}
		
			if(xpp)
			 acf =cacf = 0;
    25b4:	0f 2e       	mov	r0, r31
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	2f 2e       	mov	r2, r31
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	3f 2e       	mov	r3, r31
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	4f 2e       	mov	r4, r31
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	5f 2e       	mov	r5, r31
    25c6:	f0 2d       	mov	r31, r0
		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
			ypp = Cmd(col,103);
		
			if(!pc) pc = 1;
    25c8:	79 82       	std	Y+1, r7	; 0x01
    25ca:	34 01       	movw	r6, r8
	xp += pos[2];
	xp += (xp - xpp) * ((xp - xpp)/ 600 + 0.24);

	while(1){
		
		xpp = Cmd(col,102);
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	66 e6       	ldi	r22, 0x66	; 102
    25d0:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    25d4:	a8 2e       	mov	r10, r24
    25d6:	bb 24       	eor	r11, r11
		ypp = Cmd(col,103);
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	67 e6       	ldi	r22, 0x67	; 103
    25dc:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    25e0:	08 2f       	mov	r16, r24
    25e2:	10 e0       	ldi	r17, 0x00	; 0
    25e4:	e9 80       	ldd	r14, Y+1	; 0x01

		while(!xpp && !ypp){
    25e6:	39 c0       	rjmp	.+114    	; 0x265a <TB2+0x240>
			SS();
    25e8:	0e 94 20 11 	call	0x2240	; 0x2240 <SS>
			xpp =  Cmd(col,102);
    25ec:	8e 2d       	mov	r24, r14
    25ee:	66 e6       	ldi	r22, 0x66	; 102
    25f0:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    25f4:	a8 2e       	mov	r10, r24
			ypp = Cmd(col,103);
    25f6:	8e 2d       	mov	r24, r14
    25f8:	67 e6       	ldi	r22, 0x67	; 103
    25fa:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
		
			if(!pc) pc = 1;
    25fe:	20 91 4e 02 	lds	r18, 0x024E
    2602:	30 91 4f 02 	lds	r19, 0x024F
    2606:	21 15       	cp	r18, r1
    2608:	31 05       	cpc	r19, r1
    260a:	31 f4       	brne	.+12     	; 0x2618 <TB2+0x1fe>
    260c:	a1 e0       	ldi	r26, 0x01	; 1
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	b0 93 4f 02 	sts	0x024F, r27
    2614:	a0 93 4e 02 	sts	0x024E, r26
			if(pc > 350) {SS(); return;}
    2618:	20 91 4e 02 	lds	r18, 0x024E
    261c:	30 91 4f 02 	lds	r19, 0x024F
    2620:	b1 e0       	ldi	r27, 0x01	; 1
    2622:	2f 35       	cpi	r18, 0x5F	; 95
    2624:	3b 07       	cpc	r19, r27
    2626:	1c f0       	brlt	.+6      	; 0x262e <TB2+0x214>
    2628:	0e 94 20 11 	call	0x2240	; 0x2240 <SS>
    262c:	0c c1       	rjmp	.+536    	; 0x2846 <TB2+0x42c>
		xpp = Cmd(col,102);
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
    262e:	bb 24       	eor	r11, r11
			ypp = Cmd(col,103);
		
			if(!pc) pc = 1;
			if(pc > 350) {SS(); return;}
		
			if(xpp)
    2630:	a1 14       	cp	r10, r1
    2632:	b1 04       	cpc	r11, r1
    2634:	81 f0       	breq	.+32     	; 0x2656 <TB2+0x23c>
			 acf =cacf = 0;
    2636:	20 92 2e 02 	sts	0x022E, r2
    263a:	30 92 2f 02 	sts	0x022F, r3
    263e:	40 92 30 02 	sts	0x0230, r4
    2642:	50 92 31 02 	sts	0x0231, r5
    2646:	20 92 14 02 	sts	0x0214, r2
    264a:	30 92 15 02 	sts	0x0215, r3
    264e:	40 92 16 02 	sts	0x0216, r4
    2652:	50 92 17 02 	sts	0x0217, r5
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
			ypp = Cmd(col,103);
    2656:	08 2f       	mov	r16, r24
    2658:	10 e0       	ldi	r17, 0x00	; 0
	while(1){
		
		xpp = Cmd(col,102);
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
    265a:	a1 14       	cp	r10, r1
    265c:	b1 04       	cpc	r11, r1
    265e:	19 f4       	brne	.+6      	; 0x2666 <TB2+0x24c>
    2660:	01 15       	cp	r16, r1
    2662:	11 05       	cpc	r17, r1
    2664:	09 f2       	breq	.-126    	; 0x25e8 <TB2+0x1ce>
		
			if(xpp)
			 acf =cacf = 0;
		}

		if(xp)x = (xpp - xp) * 0.8;
    2666:	ea 81       	ldd	r30, Y+2	; 0x02
    2668:	fb 81       	ldd	r31, Y+3	; 0x03
    266a:	30 97       	sbiw	r30, 0x00	; 0
    266c:	91 f0       	breq	.+36     	; 0x2692 <TB2+0x278>
    266e:	ae 1a       	sub	r10, r30
    2670:	bf 0a       	sbc	r11, r31
    2672:	b5 01       	movw	r22, r10
    2674:	88 27       	eor	r24, r24
    2676:	77 fd       	sbrc	r23, 7
    2678:	80 95       	com	r24
    267a:	98 2f       	mov	r25, r24
    267c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2680:	2d ec       	ldi	r18, 0xCD	; 205
    2682:	3c ec       	ldi	r19, 0xCC	; 204
    2684:	4c e4       	ldi	r20, 0x4C	; 76
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    268c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2690:	3b 01       	movw	r6, r22
		if(yp)y = (yp - ypp);
    2692:	2c 81       	ldd	r18, Y+4	; 0x04
    2694:	3d 81       	ldd	r19, Y+5	; 0x05
    2696:	21 15       	cp	r18, r1
    2698:	31 05       	cpc	r19, r1
    269a:	19 f0       	breq	.+6      	; 0x26a2 <TB2+0x288>
    269c:	49 01       	movw	r8, r18
    269e:	80 1a       	sub	r8, r16
    26a0:	91 0a       	sbc	r9, r17
	

		x = LF(50,-50,x);
    26a2:	b3 01       	movw	r22, r6
    26a4:	88 27       	eor	r24, r24
    26a6:	77 fd       	sbrc	r23, 7
    26a8:	80 95       	com	r24
    26aa:	98 2f       	mov	r25, r24
    26ac:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    26b0:	7b 01       	movw	r14, r22
    26b2:	8c 01       	movw	r16, r24
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	88 e4       	ldi	r24, 0x48	; 72
    26ba:	92 e4       	ldi	r25, 0x42	; 66
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	48 e4       	ldi	r20, 0x48	; 72
    26c2:	52 ec       	ldi	r21, 0xC2	; 194
    26c4:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    26c8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    26cc:	3b 01       	movw	r6, r22
		y = LF(60,-60,y);
    26ce:	b4 01       	movw	r22, r8
    26d0:	88 27       	eor	r24, r24
    26d2:	77 fd       	sbrc	r23, 7
    26d4:	80 95       	com	r24
    26d6:	98 2f       	mov	r25, r24
    26d8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    26dc:	7b 01       	movw	r14, r22
    26de:	8c 01       	movw	r16, r24
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	80 e7       	ldi	r24, 0x70	; 112
    26e6:	92 e4       	ldi	r25, 0x42	; 66
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e7       	ldi	r20, 0x70	; 112
    26ee:	52 ec       	ldi	r21, 0xC2	; 194
    26f0:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    26f4:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    26f8:	4b 01       	movw	r8, r22

		speed(0, y*cacf*0.8 ,x*acf,wa + pos[2]);
    26fa:	a0 90 60 02 	lds	r10, 0x0260
    26fe:	b0 90 61 02 	lds	r11, 0x0261
    2702:	c0 90 62 02 	lds	r12, 0x0262
    2706:	d0 90 63 02 	lds	r13, 0x0263
    270a:	b4 01       	movw	r22, r8
    270c:	88 27       	eor	r24, r24
    270e:	77 fd       	sbrc	r23, 7
    2710:	80 95       	com	r24
    2712:	98 2f       	mov	r25, r24
    2714:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2718:	20 91 2e 02 	lds	r18, 0x022E
    271c:	30 91 2f 02 	lds	r19, 0x022F
    2720:	40 91 30 02 	lds	r20, 0x0230
    2724:	50 91 31 02 	lds	r21, 0x0231
    2728:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    272c:	2d ec       	ldi	r18, 0xCD	; 205
    272e:	3c ec       	ldi	r19, 0xCC	; 204
    2730:	4c e4       	ldi	r20, 0x4C	; 76
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2738:	6e 83       	std	Y+6, r22	; 0x06
    273a:	7f 83       	std	Y+7, r23	; 0x07
    273c:	88 87       	std	Y+8, r24	; 0x08
    273e:	99 87       	std	Y+9, r25	; 0x09
    2740:	b3 01       	movw	r22, r6
    2742:	88 27       	eor	r24, r24
    2744:	77 fd       	sbrc	r23, 7
    2746:	80 95       	com	r24
    2748:	98 2f       	mov	r25, r24
    274a:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    274e:	20 91 14 02 	lds	r18, 0x0214
    2752:	30 91 15 02 	lds	r19, 0x0215
    2756:	40 91 16 02 	lds	r20, 0x0216
    275a:	50 91 17 02 	lds	r21, 0x0217
    275e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2762:	7b 01       	movw	r14, r22
    2764:	8c 01       	movw	r16, r24
    2766:	60 91 50 02 	lds	r22, 0x0250
    276a:	70 91 51 02 	lds	r23, 0x0251
    276e:	88 27       	eor	r24, r24
    2770:	77 fd       	sbrc	r23, 7
    2772:	80 95       	com	r24
    2774:	98 2f       	mov	r25, r24
    2776:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    277a:	a6 01       	movw	r20, r12
    277c:	95 01       	movw	r18, r10
    277e:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    2782:	5b 01       	movw	r10, r22
    2784:	6c 01       	movw	r12, r24
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	70 e0       	ldi	r23, 0x00	; 0
    278a:	cb 01       	movw	r24, r22
    278c:	2e 81       	ldd	r18, Y+6	; 0x06
    278e:	3f 81       	ldd	r19, Y+7	; 0x07
    2790:	48 85       	ldd	r20, Y+8	; 0x08
    2792:	59 85       	ldd	r21, Y+9	; 0x09
    2794:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	
		if(!oc) oc = 1;
    2798:	80 91 2a 02 	lds	r24, 0x022A
    279c:	90 91 2b 02 	lds	r25, 0x022B
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	31 f4       	brne	.+12     	; 0x27b0 <TB2+0x396>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	90 93 2b 02 	sts	0x022B, r25
    27ac:	80 93 2a 02 	sts	0x022A, r24
		if(oc > 350 ) {LE return;}
    27b0:	80 91 2a 02 	lds	r24, 0x022A
    27b4:	90 91 2b 02 	lds	r25, 0x022B
    27b8:	a1 e0       	ldi	r26, 0x01	; 1
    27ba:	8f 35       	cpi	r24, 0x5F	; 95
    27bc:	9a 07       	cpc	r25, r26
    27be:	54 f4       	brge	.+20     	; 0x27d4 <TB2+0x3ba>
		if(abs(x) <= 0 && abs(y) <= 1) {LE return;}
    27c0:	61 14       	cp	r6, r1
    27c2:	71 04       	cpc	r7, r1
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <TB2+0x3ae>
    27c6:	02 cf       	rjmp	.-508    	; 0x25cc <TB2+0x1b2>
    27c8:	c4 01       	movw	r24, r8
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	83 30       	cpi	r24, 0x03	; 3
    27ce:	91 05       	cpc	r25, r1
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <TB2+0x3ba>
    27d2:	fc ce       	rjmp	.-520    	; 0x25cc <TB2+0x1b2>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	dc 01       	movw	r26, r24
    27da:	80 93 89 02 	sts	0x0289, r24
    27de:	90 93 8a 02 	sts	0x028A, r25
    27e2:	a0 93 8b 02 	sts	0x028B, r26
    27e6:	b0 93 8c 02 	sts	0x028C, r27
    27ea:	80 91 89 02 	lds	r24, 0x0289
    27ee:	90 91 8a 02 	lds	r25, 0x028A
    27f2:	a0 91 8b 02 	lds	r26, 0x028B
    27f6:	b0 91 8c 02 	lds	r27, 0x028C
    27fa:	80 93 13 03 	sts	0x0313, r24
    27fe:	90 93 14 03 	sts	0x0314, r25
    2802:	a0 93 15 03 	sts	0x0315, r26
    2806:	b0 93 16 03 	sts	0x0316, r27
    280a:	80 91 13 03 	lds	r24, 0x0313
    280e:	90 91 14 03 	lds	r25, 0x0314
    2812:	a0 91 15 03 	lds	r26, 0x0315
    2816:	b0 91 16 03 	lds	r27, 0x0316
    281a:	80 93 7d 02 	sts	0x027D, r24
    281e:	90 93 7e 02 	sts	0x027E, r25
    2822:	a0 93 7f 02 	sts	0x027F, r26
    2826:	b0 93 80 02 	sts	0x0280, r27
    282a:	60 91 7d 02 	lds	r22, 0x027D
    282e:	70 91 7e 02 	lds	r23, 0x027E
    2832:	80 91 7f 02 	lds	r24, 0x027F
    2836:	90 91 80 02 	lds	r25, 0x0280
    283a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    283e:	70 93 2b 02 	sts	0x022B, r23
    2842:	60 93 2a 02 	sts	0x022A, r22
		
	}
}
    2846:	29 96       	adiw	r28, 0x09	; 9
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	9f 90       	pop	r9
    2868:	8f 90       	pop	r8
    286a:	7f 90       	pop	r7
    286c:	6f 90       	pop	r6
    286e:	5f 90       	pop	r5
    2870:	4f 90       	pop	r4
    2872:	3f 90       	pop	r3
    2874:	2f 90       	pop	r2
    2876:	08 95       	ret

00002878 <TB>:
		if(min > puck[i] && puck[i]) min = puck[i], col2 = i;
	}
	return (data > 0)? col : col2;
}

void TB(int col, int zp, int xp, int yp){
    2878:	2f 92       	push	r2
    287a:	3f 92       	push	r3
    287c:	5f 92       	push	r5
    287e:	6f 92       	push	r6
    2880:	7f 92       	push	r7
    2882:	8f 92       	push	r8
    2884:	9f 92       	push	r9
    2886:	af 92       	push	r10
    2888:	bf 92       	push	r11
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	2e 97       	sbiw	r28, 0x0e	; 14
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	58 2e       	mov	r5, r24
    28ac:	7a 83       	std	Y+2, r23	; 0x02
    28ae:	69 83       	std	Y+1, r22	; 0x01
    28b0:	5c 83       	std	Y+4, r21	; 0x04
    28b2:	4b 83       	std	Y+3, r20	; 0x03
    28b4:	19 01       	movw	r2, r18
	ginit("TB");
    28b6:	10 92 03 02 	sts	0x0203, r1
    28ba:	10 92 02 02 	sts	0x0202, r1
    28be:	10 92 50 03 	sts	0x0350, r1
    28c2:	10 92 4f 03 	sts	0x034F, r1
    28c6:	80 91 4f 03 	lds	r24, 0x034F
    28ca:	90 91 50 03 	lds	r25, 0x0350
    28ce:	90 93 2b 02 	sts	0x022B, r25
    28d2:	80 93 2a 02 	sts	0x022A, r24
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	dc 01       	movw	r26, r24
    28e0:	8b 01       	movw	r16, r22
    28e2:	00 0f       	add	r16, r16
    28e4:	11 1f       	adc	r17, r17
    28e6:	00 0f       	add	r16, r16
    28e8:	11 1f       	adc	r17, r17
    28ea:	98 01       	movw	r18, r16
    28ec:	21 5c       	subi	r18, 0xC1	; 193
    28ee:	3c 4f       	sbci	r19, 0xFC	; 252
    28f0:	f9 01       	movw	r30, r18
    28f2:	80 83       	st	Z, r24
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	a2 83       	std	Z+2, r26	; 0x02
    28f8:	b3 83       	std	Z+3, r27	; 0x03
    28fa:	20 81       	ld	r18, Z
    28fc:	31 81       	ldd	r19, Z+1	; 0x01
    28fe:	42 81       	ldd	r20, Z+2	; 0x02
    2900:	53 81       	ldd	r21, Z+3	; 0x03
    2902:	f8 01       	movw	r30, r16
    2904:	e3 5d       	subi	r30, 0xD3	; 211
    2906:	fc 4f       	sbci	r31, 0xFC	; 252
    2908:	20 83       	st	Z, r18
    290a:	31 83       	std	Z+1, r19	; 0x01
    290c:	42 83       	std	Z+2, r20	; 0x02
    290e:	53 83       	std	Z+3, r21	; 0x03
    2910:	6f 5f       	subi	r22, 0xFF	; 255
    2912:	7f 4f       	sbci	r23, 0xFF	; 255
    2914:	64 30       	cpi	r22, 0x04	; 4
    2916:	71 05       	cpc	r23, r1
    2918:	19 f7       	brne	.-58     	; 0x28e0 <TB+0x68>
    291a:	00 d0       	rcall	.+0      	; 0x291c <TB+0xa4>
    291c:	00 d0       	rcall	.+0      	; 0x291e <TB+0xa6>
    291e:	00 d0       	rcall	.+0      	; 0x2920 <TB+0xa8>
    2920:	ed b7       	in	r30, 0x3d	; 61
    2922:	fe b7       	in	r31, 0x3e	; 62
    2924:	31 96       	adiw	r30, 0x01	; 1
    2926:	07 e1       	ldi	r16, 0x17	; 23
    2928:	13 e0       	ldi	r17, 0x03	; 3
    292a:	ad b7       	in	r26, 0x3d	; 61
    292c:	be b7       	in	r27, 0x3e	; 62
    292e:	12 96       	adiw	r26, 0x02	; 2
    2930:	1c 93       	st	X, r17
    2932:	0e 93       	st	-X, r16
    2934:	11 97       	sbiw	r26, 0x01	; 1
    2936:	82 eb       	ldi	r24, 0xB2	; 178
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	93 83       	std	Z+3, r25	; 0x03
    293c:	82 83       	std	Z+2, r24	; 0x02
    293e:	8b eb       	ldi	r24, 0xBB	; 187
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	95 83       	std	Z+5, r25	; 0x05
    2944:	84 83       	std	Z+4, r24	; 0x04
    2946:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    294a:	ed b7       	in	r30, 0x3d	; 61
    294c:	fe b7       	in	r31, 0x3e	; 62
    294e:	36 96       	adiw	r30, 0x06	; 6
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	fe bf       	out	0x3e, r31	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	ed bf       	out	0x3d, r30	; 61
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	a8 01       	movw	r20, r16
    2964:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>

	int xpp=  0, ypp = 0, zpp= 0;
	int x= 0, y=  0, z= 0;
	
	pc= 0;
    2968:	10 92 4f 02 	sts	0x024F, r1
    296c:	10 92 4e 02 	sts	0x024E, r1

void TB(int col, int zp, int xp, int yp){
	ginit("TB");

	int xpp=  0, ypp = 0, zpp= 0;
	int x= 0, y=  0, z= 0;
    2970:	88 24       	eor	r8, r8
    2972:	99 24       	eor	r9, r9
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	66 24       	eor	r6, r6
    297a:	77 24       	eor	r7, r7
		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
			ypp = Cmd(col,103);
		
			if(!pc) pc = 1;
    297c:	9e 87       	std	Y+14, r25	; 0x0e
    297e:	8d 87       	std	Y+13, r24	; 0x0d
	int x= 0, y=  0, z= 0;
	
	pc= 0;
	while(1){
			
		xpp = zpp = Cmd(col,102);
    2980:	85 2d       	mov	r24, r5
    2982:	66 e6       	ldi	r22, 0x66	; 102
    2984:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    2988:	e8 2e       	mov	r14, r24
    298a:	ff 24       	eor	r15, r15
		ypp = Cmd(col,103);
    298c:	85 2d       	mov	r24, r5
    298e:	67 e6       	ldi	r22, 0x67	; 103
    2990:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    2994:	08 2f       	mov	r16, r24
    2996:	10 e0       	ldi	r17, 0x00	; 0
	int x= 0, y=  0, z= 0;
	
	pc= 0;
	while(1){
			
		xpp = zpp = Cmd(col,102);
    2998:	b7 01       	movw	r22, r14
    299a:	cd 84       	ldd	r12, Y+13	; 0x0d
    299c:	de 84       	ldd	r13, Y+14	; 0x0e
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
    299e:	3d c0       	rjmp	.+122    	; 0x2a1a <TB+0x1a2>
			SS();
    29a0:	0e 94 20 11 	call	0x2240	; 0x2240 <SS>
			xpp =  Cmd(col,102);
    29a4:	85 2d       	mov	r24, r5
    29a6:	66 e6       	ldi	r22, 0x66	; 102
    29a8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    29ac:	a8 2e       	mov	r10, r24
			ypp = Cmd(col,103);
    29ae:	85 2d       	mov	r24, r5
    29b0:	67 e6       	ldi	r22, 0x67	; 103
    29b2:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
		
			if(!pc) pc = 1;
    29b6:	20 91 4e 02 	lds	r18, 0x024E
    29ba:	30 91 4f 02 	lds	r19, 0x024F
    29be:	21 15       	cp	r18, r1
    29c0:	31 05       	cpc	r19, r1
    29c2:	31 f4       	brne	.+12     	; 0x29d0 <TB+0x158>
    29c4:	21 e0       	ldi	r18, 0x01	; 1
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	30 93 4f 02 	sts	0x024F, r19
    29cc:	20 93 4e 02 	sts	0x024E, r18
			if(pc > 350) {SS(); return;}
    29d0:	20 91 4e 02 	lds	r18, 0x024E
    29d4:	30 91 4f 02 	lds	r19, 0x024F
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	2f 35       	cpi	r18, 0x5F	; 95
    29dc:	34 07       	cpc	r19, r20
    29de:	1c f0       	brlt	.+6      	; 0x29e6 <TB+0x16e>
    29e0:	0e 94 20 11 	call	0x2240	; 0x2240 <SS>
    29e4:	55 c1       	rjmp	.+682    	; 0x2c90 <TB+0x418>
		xpp = zpp = Cmd(col,102);
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
    29e6:	6a 2d       	mov	r22, r10
    29e8:	70 e0       	ldi	r23, 0x00	; 0
			ypp = Cmd(col,103);
		
			if(!pc) pc = 1;
			if(pc > 350) {SS(); return;}
		
			if(xpp)
    29ea:	61 15       	cp	r22, r1
    29ec:	71 05       	cpc	r23, r1
    29ee:	99 f0       	breq	.+38     	; 0x2a16 <TB+0x19e>
			 acf =cacf = 0;
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	a9 01       	movw	r20, r18
    29f6:	20 93 2e 02 	sts	0x022E, r18
    29fa:	30 93 2f 02 	sts	0x022F, r19
    29fe:	40 93 30 02 	sts	0x0230, r20
    2a02:	50 93 31 02 	sts	0x0231, r21
    2a06:	20 93 14 02 	sts	0x0214, r18
    2a0a:	30 93 15 02 	sts	0x0215, r19
    2a0e:	40 93 16 02 	sts	0x0216, r20
    2a12:	50 93 17 02 	sts	0x0217, r21
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
			SS();
			xpp =  Cmd(col,102);
			ypp = Cmd(col,103);
    2a16:	08 2f       	mov	r16, r24
    2a18:	10 e0       	ldi	r17, 0x00	; 0
	while(1){
			
		xpp = zpp = Cmd(col,102);
		ypp = Cmd(col,103);

		while(!xpp && !ypp){
    2a1a:	61 15       	cp	r22, r1
    2a1c:	71 05       	cpc	r23, r1
    2a1e:	21 f4       	brne	.+8      	; 0x2a28 <TB+0x1b0>
    2a20:	01 15       	cp	r16, r1
    2a22:	11 05       	cpc	r17, r1
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <TB+0x1b0>
    2a26:	bc cf       	rjmp	.-136    	; 0x29a0 <TB+0x128>
    2a28:	de 86       	std	Y+14, r13	; 0x0e
    2a2a:	cd 86       	std	Y+13, r12	; 0x0d
			if(pc > 350) {SS(); return;}
		
			if(xpp)
			 acf =cacf = 0;
		}
		if(xp) x = (xpp -xp) * 0.8;
    2a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    2a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    2a30:	41 15       	cp	r20, r1
    2a32:	51 05       	cpc	r21, r1
    2a34:	89 f0       	breq	.+34     	; 0x2a58 <TB+0x1e0>
    2a36:	64 1b       	sub	r22, r20
    2a38:	75 0b       	sbc	r23, r21
    2a3a:	88 27       	eor	r24, r24
    2a3c:	77 fd       	sbrc	r23, 7
    2a3e:	80 95       	com	r24
    2a40:	98 2f       	mov	r25, r24
    2a42:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2a46:	2d ec       	ldi	r18, 0xCD	; 205
    2a48:	3c ec       	ldi	r19, 0xCC	; 204
    2a4a:	4c e4       	ldi	r20, 0x4C	; 76
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2a52:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2a56:	3b 01       	movw	r6, r22
		if(zp) z = (zpp -zp) * 0.6;
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	91 f0       	breq	.+36     	; 0x2a84 <TB+0x20c>
    2a60:	e8 1a       	sub	r14, r24
    2a62:	f9 0a       	sbc	r15, r25
    2a64:	b7 01       	movw	r22, r14
    2a66:	88 27       	eor	r24, r24
    2a68:	77 fd       	sbrc	r23, 7
    2a6a:	80 95       	com	r24
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2a72:	2a e9       	ldi	r18, 0x9A	; 154
    2a74:	39 e9       	ldi	r19, 0x99	; 153
    2a76:	49 e1       	ldi	r20, 0x19	; 25
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2a7e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2a82:	4b 01       	movw	r8, r22
		if(yp) y = (yp -ypp);
    2a84:	21 14       	cp	r2, r1
    2a86:	31 04       	cpc	r3, r1
    2a88:	29 f0       	breq	.+10     	; 0x2a94 <TB+0x21c>
    2a8a:	d1 01       	movw	r26, r2
    2a8c:	a0 1b       	sub	r26, r16
    2a8e:	b1 0b       	sbc	r27, r17
    2a90:	be 87       	std	Y+14, r27	; 0x0e
    2a92:	ad 87       	std	Y+13, r26	; 0x0d
	

		x = LF(30,-30,x);
    2a94:	b3 01       	movw	r22, r6
    2a96:	88 27       	eor	r24, r24
    2a98:	77 fd       	sbrc	r23, 7
    2a9a:	80 95       	com	r24
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2aa2:	7b 01       	movw	r14, r22
    2aa4:	8c 01       	movw	r16, r24
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	80 ef       	ldi	r24, 0xF0	; 240
    2aac:	91 e4       	ldi	r25, 0x41	; 65
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 ef       	ldi	r20, 0xF0	; 240
    2ab4:	51 ec       	ldi	r21, 0xC1	; 193
    2ab6:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    2aba:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2abe:	3b 01       	movw	r6, r22
		y = LF(55,-55,y);
    2ac0:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ac2:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ac4:	bf 01       	movw	r22, r30
    2ac6:	88 27       	eor	r24, r24
    2ac8:	77 fd       	sbrc	r23, 7
    2aca:	80 95       	com	r24
    2acc:	98 2f       	mov	r25, r24
    2ace:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2ad2:	7b 01       	movw	r14, r22
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	8c e5       	ldi	r24, 0x5C	; 92
    2adc:	92 e4       	ldi	r25, 0x42	; 66
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4c e5       	ldi	r20, 0x5C	; 92
    2ae4:	52 ec       	ldi	r21, 0xC2	; 194
    2ae6:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    2aea:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2aee:	7e 87       	std	Y+14, r23	; 0x0e
    2af0:	6d 87       	std	Y+13, r22	; 0x0d
		z = LF(50,-50,z);
    2af2:	b4 01       	movw	r22, r8
    2af4:	88 27       	eor	r24, r24
    2af6:	77 fd       	sbrc	r23, 7
    2af8:	80 95       	com	r24
    2afa:	98 2f       	mov	r25, r24
    2afc:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2b00:	7b 01       	movw	r14, r22
    2b02:	8c 01       	movw	r16, r24
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	70 e0       	ldi	r23, 0x00	; 0
    2b08:	88 e4       	ldi	r24, 0x48	; 72
    2b0a:	92 e4       	ldi	r25, 0x42	; 66
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	48 e4       	ldi	r20, 0x48	; 72
    2b12:	52 ec       	ldi	r21, 0xC2	; 194
    2b14:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    2b18:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2b1c:	4b 01       	movw	r8, r22
	

		speed(x*acf*0.8, y*cacf*0.8 ,z*acf,wa);
    2b1e:	e0 90 14 02 	lds	r14, 0x0214
    2b22:	f0 90 15 02 	lds	r15, 0x0215
    2b26:	00 91 16 02 	lds	r16, 0x0216
    2b2a:	10 91 17 02 	lds	r17, 0x0217
    2b2e:	b3 01       	movw	r22, r6
    2b30:	88 27       	eor	r24, r24
    2b32:	77 fd       	sbrc	r23, 7
    2b34:	80 95       	com	r24
    2b36:	98 2f       	mov	r25, r24
    2b38:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2b3c:	a8 01       	movw	r20, r16
    2b3e:	97 01       	movw	r18, r14
    2b40:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2b44:	2d ec       	ldi	r18, 0xCD	; 205
    2b46:	3c ec       	ldi	r19, 0xCC	; 204
    2b48:	4c e4       	ldi	r20, 0x4C	; 76
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2b50:	6d 83       	std	Y+5, r22	; 0x05
    2b52:	7e 83       	std	Y+6, r23	; 0x06
    2b54:	8f 83       	std	Y+7, r24	; 0x07
    2b56:	98 87       	std	Y+8, r25	; 0x08
    2b58:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b5a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b5c:	b9 01       	movw	r22, r18
    2b5e:	88 27       	eor	r24, r24
    2b60:	77 fd       	sbrc	r23, 7
    2b62:	80 95       	com	r24
    2b64:	98 2f       	mov	r25, r24
    2b66:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2b6a:	20 91 2e 02 	lds	r18, 0x022E
    2b6e:	30 91 2f 02 	lds	r19, 0x022F
    2b72:	40 91 30 02 	lds	r20, 0x0230
    2b76:	50 91 31 02 	lds	r21, 0x0231
    2b7a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2b7e:	2d ec       	ldi	r18, 0xCD	; 205
    2b80:	3c ec       	ldi	r19, 0xCC	; 204
    2b82:	4c e4       	ldi	r20, 0x4C	; 76
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2b8a:	69 87       	std	Y+9, r22	; 0x09
    2b8c:	7a 87       	std	Y+10, r23	; 0x0a
    2b8e:	8b 87       	std	Y+11, r24	; 0x0b
    2b90:	9c 87       	std	Y+12, r25	; 0x0c
    2b92:	b4 01       	movw	r22, r8
    2b94:	88 27       	eor	r24, r24
    2b96:	77 fd       	sbrc	r23, 7
    2b98:	80 95       	com	r24
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2ba0:	a8 01       	movw	r20, r16
    2ba2:	97 01       	movw	r18, r14
    2ba4:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2ba8:	7b 01       	movw	r14, r22
    2baa:	8c 01       	movw	r16, r24
    2bac:	60 91 50 02 	lds	r22, 0x0250
    2bb0:	70 91 51 02 	lds	r23, 0x0251
    2bb4:	88 27       	eor	r24, r24
    2bb6:	77 fd       	sbrc	r23, 7
    2bb8:	80 95       	com	r24
    2bba:	98 2f       	mov	r25, r24
    2bbc:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2bc0:	5b 01       	movw	r10, r22
    2bc2:	6c 01       	movw	r12, r24
    2bc4:	6d 81       	ldd	r22, Y+5	; 0x05
    2bc6:	7e 81       	ldd	r23, Y+6	; 0x06
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	29 85       	ldd	r18, Y+9	; 0x09
    2bce:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bd0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bd2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bd4:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	
		if(!oc) oc = 1;
    2bd8:	80 91 2a 02 	lds	r24, 0x022A
    2bdc:	90 91 2b 02 	lds	r25, 0x022B
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	31 f4       	brne	.+12     	; 0x2bf0 <TB+0x378>
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	50 93 2b 02 	sts	0x022B, r21
    2bec:	40 93 2a 02 	sts	0x022A, r20
		if(oc > 350 ) {LE return;}
    2bf0:	80 91 2a 02 	lds	r24, 0x022A
    2bf4:	90 91 2b 02 	lds	r25, 0x022B
    2bf8:	51 e0       	ldi	r21, 0x01	; 1
    2bfa:	8f 35       	cpi	r24, 0x5F	; 95
    2bfc:	95 07       	cpc	r25, r21
    2bfe:	7c f4       	brge	.+30     	; 0x2c1e <TB+0x3a6>
		if(abs(x) <= 0 && abs(y) <= 1 && abs(z) <= 0) {LE return;}
    2c00:	61 14       	cp	r6, r1
    2c02:	71 04       	cpc	r7, r1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <TB+0x390>
    2c06:	bc ce       	rjmp	.-648    	; 0x2980 <TB+0x108>
    2c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0c:	01 96       	adiw	r24, 0x01	; 1
    2c0e:	83 30       	cpi	r24, 0x03	; 3
    2c10:	91 05       	cpc	r25, r1
    2c12:	08 f0       	brcs	.+2      	; 0x2c16 <TB+0x39e>
    2c14:	b5 ce       	rjmp	.-662    	; 0x2980 <TB+0x108>
    2c16:	81 14       	cp	r8, r1
    2c18:	91 04       	cpc	r9, r1
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <TB+0x3a6>
    2c1c:	b1 ce       	rjmp	.-670    	; 0x2980 <TB+0x108>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	dc 01       	movw	r26, r24
    2c24:	80 93 89 02 	sts	0x0289, r24
    2c28:	90 93 8a 02 	sts	0x028A, r25
    2c2c:	a0 93 8b 02 	sts	0x028B, r26
    2c30:	b0 93 8c 02 	sts	0x028C, r27
    2c34:	80 91 89 02 	lds	r24, 0x0289
    2c38:	90 91 8a 02 	lds	r25, 0x028A
    2c3c:	a0 91 8b 02 	lds	r26, 0x028B
    2c40:	b0 91 8c 02 	lds	r27, 0x028C
    2c44:	80 93 13 03 	sts	0x0313, r24
    2c48:	90 93 14 03 	sts	0x0314, r25
    2c4c:	a0 93 15 03 	sts	0x0315, r26
    2c50:	b0 93 16 03 	sts	0x0316, r27
    2c54:	80 91 13 03 	lds	r24, 0x0313
    2c58:	90 91 14 03 	lds	r25, 0x0314
    2c5c:	a0 91 15 03 	lds	r26, 0x0315
    2c60:	b0 91 16 03 	lds	r27, 0x0316
    2c64:	80 93 7d 02 	sts	0x027D, r24
    2c68:	90 93 7e 02 	sts	0x027E, r25
    2c6c:	a0 93 7f 02 	sts	0x027F, r26
    2c70:	b0 93 80 02 	sts	0x0280, r27
    2c74:	60 91 7d 02 	lds	r22, 0x027D
    2c78:	70 91 7e 02 	lds	r23, 0x027E
    2c7c:	80 91 7f 02 	lds	r24, 0x027F
    2c80:	90 91 80 02 	lds	r25, 0x0280
    2c84:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2c88:	70 93 2b 02 	sts	0x022B, r23
    2c8c:	60 93 2a 02 	sts	0x022A, r22
		
	}
}
    2c90:	2e 96       	adiw	r28, 0x0e	; 14
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
    2cae:	af 90       	pop	r10
    2cb0:	9f 90       	pop	r9
    2cb2:	8f 90       	pop	r8
    2cb4:	7f 90       	pop	r7
    2cb6:	6f 90       	pop	r6
    2cb8:	5f 90       	pop	r5
    2cba:	3f 90       	pop	r3
    2cbc:	2f 90       	pop	r2
    2cbe:	08 95       	ret

00002cc0 <Axis>:
{
	Axis(0,(int)M_PI * r * abs(z)/180,z,sp,ac);
}

void Axis(int x, int y ,int z, int sp, int ac)
{
    2cc0:	2f 92       	push	r2
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	2c 97       	sbiw	r28, 0x0c	; 12
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	6c 01       	movw	r12, r24
    2cf6:	5b 01       	movw	r10, r22
    2cf8:	5c 83       	std	Y+4, r21	; 0x04
    2cfa:	4b 83       	std	Y+3, r20	; 0x03
    2cfc:	39 01       	movw	r6, r18
    2cfe:	1a 83       	std	Y+2, r17	; 0x02
    2d00:	09 83       	std	Y+1, r16	; 0x01
	ginit("Axis");	
    2d02:	10 92 03 02 	sts	0x0203, r1
    2d06:	10 92 02 02 	sts	0x0202, r1
    2d0a:	10 92 50 03 	sts	0x0350, r1
    2d0e:	10 92 4f 03 	sts	0x034F, r1
    2d12:	80 91 4f 03 	lds	r24, 0x034F
    2d16:	90 91 50 03 	lds	r25, 0x0350
    2d1a:	90 93 2b 02 	sts	0x022B, r25
    2d1e:	80 93 2a 02 	sts	0x022A, r24
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	70 e0       	ldi	r23, 0x00	; 0
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	8b 01       	movw	r16, r22
    2d2e:	00 0f       	add	r16, r16
    2d30:	11 1f       	adc	r17, r17
    2d32:	00 0f       	add	r16, r16
    2d34:	11 1f       	adc	r17, r17
    2d36:	98 01       	movw	r18, r16
    2d38:	21 5c       	subi	r18, 0xC1	; 193
    2d3a:	3c 4f       	sbci	r19, 0xFC	; 252
    2d3c:	f9 01       	movw	r30, r18
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
    2d46:	20 81       	ld	r18, Z
    2d48:	31 81       	ldd	r19, Z+1	; 0x01
    2d4a:	42 81       	ldd	r20, Z+2	; 0x02
    2d4c:	53 81       	ldd	r21, Z+3	; 0x03
    2d4e:	f8 01       	movw	r30, r16
    2d50:	e3 5d       	subi	r30, 0xD3	; 211
    2d52:	fc 4f       	sbci	r31, 0xFC	; 252
    2d54:	20 83       	st	Z, r18
    2d56:	31 83       	std	Z+1, r19	; 0x01
    2d58:	42 83       	std	Z+2, r20	; 0x02
    2d5a:	53 83       	std	Z+3, r21	; 0x03
    2d5c:	6f 5f       	subi	r22, 0xFF	; 255
    2d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d60:	64 30       	cpi	r22, 0x04	; 4
    2d62:	71 05       	cpc	r23, r1
    2d64:	19 f7       	brne	.-58     	; 0x2d2c <Axis+0x6c>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <Axis+0xa8>
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <Axis+0xaa>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <Axis+0xac>
    2d6c:	ed b7       	in	r30, 0x3d	; 61
    2d6e:	fe b7       	in	r31, 0x3e	; 62
    2d70:	31 96       	adiw	r30, 0x01	; 1
    2d72:	07 e1       	ldi	r16, 0x17	; 23
    2d74:	13 e0       	ldi	r17, 0x03	; 3
    2d76:	ad b7       	in	r26, 0x3d	; 61
    2d78:	be b7       	in	r27, 0x3e	; 62
    2d7a:	12 96       	adiw	r26, 0x02	; 2
    2d7c:	1c 93       	st	X, r17
    2d7e:	0e 93       	st	-X, r16
    2d80:	11 97       	sbiw	r26, 0x01	; 1
    2d82:	82 eb       	ldi	r24, 0xB2	; 178
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	93 83       	std	Z+3, r25	; 0x03
    2d88:	82 83       	std	Z+2, r24	; 0x02
    2d8a:	8e eb       	ldi	r24, 0xBE	; 190
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	95 83       	std	Z+5, r25	; 0x05
    2d90:	84 83       	std	Z+4, r24	; 0x04
    2d92:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    2d96:	ed b7       	in	r30, 0x3d	; 61
    2d98:	fe b7       	in	r31, 0x3e	; 62
    2d9a:	36 96       	adiw	r30, 0x06	; 6
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	fe bf       	out	0x3e, r31	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	ed bf       	out	0x3d, r30	; 61
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	67 e0       	ldi	r22, 0x07	; 7
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	a8 01       	movw	r20, r16
    2db0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double s = gyro, e;
    2db4:	80 91 68 02 	lds	r24, 0x0268
    2db8:	90 91 69 02 	lds	r25, 0x0269
    2dbc:	a0 91 6a 02 	lds	r26, 0x026A
    2dc0:	b0 91 6b 02 	lds	r27, 0x026B
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	af 83       	std	Y+7, r26	; 0x07
    2dca:	b8 87       	std	Y+8, r27	; 0x08
	O(x,y,0,0);
    2dcc:	c6 01       	movw	r24, r12
    2dce:	b5 01       	movw	r22, r10
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	83 01       	movw	r16, r6
    2dda:	e9 80       	ldd	r14, Y+1	; 0x01
    2ddc:	fa 80       	ldd	r15, Y+2	; 0x02
    2dde:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
	if(x && y)
    2de2:	c1 14       	cp	r12, r1
    2de4:	d1 04       	cpc	r13, r1
    2de6:	69 f1       	breq	.+90     	; 0x2e42 <Axis+0x182>
    2de8:	a1 14       	cp	r10, r1
    2dea:	b1 04       	cpc	r11, r1
    2dec:	51 f1       	breq	.+84     	; 0x2e42 <Axis+0x182>
		sp *= (double)sp / hypot(msp[0],msp[1]);
    2dee:	b3 01       	movw	r22, r6
    2df0:	88 27       	eor	r24, r24
    2df2:	77 fd       	sbrc	r23, 7
    2df4:	80 95       	com	r24
    2df6:	98 2f       	mov	r25, r24
    2df8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2dfc:	7b 01       	movw	r14, r22
    2dfe:	8c 01       	movw	r16, r24
    2e00:	60 91 2d 03 	lds	r22, 0x032D
    2e04:	70 91 2e 03 	lds	r23, 0x032E
    2e08:	80 91 2f 03 	lds	r24, 0x032F
    2e0c:	90 91 30 03 	lds	r25, 0x0330
    2e10:	20 91 31 03 	lds	r18, 0x0331
    2e14:	30 91 32 03 	lds	r19, 0x0332
    2e18:	40 91 33 03 	lds	r20, 0x0333
    2e1c:	50 91 34 03 	lds	r21, 0x0334
    2e20:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    2e24:	9b 01       	movw	r18, r22
    2e26:	ac 01       	movw	r20, r24
    2e28:	c8 01       	movw	r24, r16
    2e2a:	b7 01       	movw	r22, r14
    2e2c:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    2e30:	9b 01       	movw	r18, r22
    2e32:	ac 01       	movw	r20, r24
    2e34:	c8 01       	movw	r24, r16
    2e36:	b7 01       	movw	r22, r14
    2e38:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2e3c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2e40:	3b 01       	movw	r6, r22
	tot = O(x,y,z,0);
    2e42:	c6 01       	movw	r24, r12
    2e44:	b5 01       	movw	r22, r10
    2e46:	4b 81       	ldd	r20, Y+3	; 0x03
    2e48:	5c 81       	ldd	r21, Y+4	; 0x04
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	83 01       	movw	r16, r6
    2e50:	e9 80       	ldd	r14, Y+1	; 0x01
    2e52:	fa 80       	ldd	r15, Y+2	; 0x02
    2e54:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    2e58:	90 93 50 03 	sts	0x0350, r25
    2e5c:	80 93 4f 03 	sts	0x034F, r24
		OS

		if(!z)
		{				
			e = s-gyro;
			e *= (sp+10)/10;
    2e60:	c3 01       	movw	r24, r6
    2e62:	0a 96       	adiw	r24, 0x0a	; 10
    2e64:	6a e0       	ldi	r22, 0x0A	; 10
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	aa 27       	eor	r26, r26
    2e70:	97 fd       	sbrc	r25, 7
    2e72:	a0 95       	com	r26
    2e74:	ba 2f       	mov	r27, r26
    2e76:	89 87       	std	Y+9, r24	; 0x09
    2e78:	9a 87       	std	Y+10, r25	; 0x0a
    2e7a:	ab 87       	std	Y+11, r26	; 0x0b
    2e7c:	bc 87       	std	Y+12, r27	; 0x0c
		sp *= (double)sp / hypot(msp[0],msp[1]);
	tot = O(x,y,z,0);
	while(1)
	{
		
		OS
    2e7e:	80 91 4f 03 	lds	r24, 0x034F
    2e82:	90 91 50 03 	lds	r25, 0x0350
    2e86:	69 81       	ldd	r22, Y+1	; 0x01
    2e88:	7a 81       	ldd	r23, Y+2	; 0x02
    2e8a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		if(!z)
    2e8e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e90:	bc 81       	ldd	r27, Y+4	; 0x04
    2e92:	10 97       	sbiw	r26, 0x00	; 0
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <Axis+0x1d8>
    2e96:	4d c0       	rjmp	.+154    	; 0x2f32 <Axis+0x272>
		{				
			e = s-gyro;
    2e98:	20 91 68 02 	lds	r18, 0x0268
    2e9c:	30 91 69 02 	lds	r19, 0x0269
    2ea0:	40 91 6a 02 	lds	r20, 0x026A
    2ea4:	50 91 6b 02 	lds	r21, 0x026B
    2ea8:	6d 81       	ldd	r22, Y+5	; 0x05
    2eaa:	7e 81       	ldd	r23, Y+6	; 0x06
    2eac:	8f 81       	ldd	r24, Y+7	; 0x07
    2eae:	98 85       	ldd	r25, Y+8	; 0x08
    2eb0:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    2eb4:	6b 01       	movw	r12, r22
    2eb6:	e8 2e       	mov	r14, r24
    2eb8:	09 2f       	mov	r16, r25
			e *= (sp+10)/10;
    2eba:	69 85       	ldd	r22, Y+9	; 0x09
    2ebc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec2:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    2ec6:	9b 01       	movw	r18, r22
    2ec8:	ac 01       	movw	r20, r24
    2eca:	6c 2d       	mov	r22, r12
    2ecc:	7d 2d       	mov	r23, r13
    2ece:	8e 2d       	mov	r24, r14
    2ed0:	90 2f       	mov	r25, r16
    2ed2:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    2ed6:	d6 2e       	mov	r13, r22
    2ed8:	c7 2e       	mov	r12, r23
    2eda:	b8 2e       	mov	r11, r24
    2edc:	a9 2e       	mov	r10, r25
    2ede:	e6 2e       	mov	r14, r22
    2ee0:	f7 2e       	mov	r15, r23
    2ee2:	08 2f       	mov	r16, r24
    2ee4:	19 2f       	mov	r17, r25
			if(e > 30 || e< -30) e= 0;
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 ef       	ldi	r20, 0xF0	; 240
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    2ef2:	18 16       	cp	r1, r24
    2ef4:	64 f0       	brlt	.+24     	; 0x2f0e <Axis+0x24e>
    2ef6:	6d 2d       	mov	r22, r13
    2ef8:	7c 2d       	mov	r23, r12
    2efa:	8b 2d       	mov	r24, r11
    2efc:	9a 2d       	mov	r25, r10
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 ef       	ldi	r20, 0xF0	; 240
    2f04:	51 ec       	ldi	r21, 0xC1	; 193
    2f06:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    2f0a:	87 ff       	sbrs	r24, 7
    2f0c:	0a c0       	rjmp	.+20     	; 0x2f22 <Axis+0x262>
    2f0e:	0f 2e       	mov	r0, r31
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	ef 2e       	mov	r14, r31
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	ff 2e       	mov	r15, r31
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	0f 2f       	mov	r16, r31
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	1f 2f       	mov	r17, r31
    2f20:	f0 2d       	mov	r31, r0
			gsp[2] = e;
    2f22:	e0 92 47 03 	sts	0x0347, r14
    2f26:	f0 92 48 03 	sts	0x0348, r15
    2f2a:	00 93 49 03 	sts	0x0349, r16
    2f2e:	10 93 4a 03 	sts	0x034A, r17
		}

		if(!oc) oc = 1;
    2f32:	80 91 2a 02 	lds	r24, 0x022A
    2f36:	90 91 2b 02 	lds	r25, 0x022B
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	31 f4       	brne	.+12     	; 0x2f4a <Axis+0x28a>
    2f3e:	e1 e0       	ldi	r30, 0x01	; 1
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	f0 93 2b 02 	sts	0x022B, r31
    2f46:	e0 93 2a 02 	sts	0x022A, r30
		if(oc > tot) {LE return;}			
    2f4a:	80 91 4f 03 	lds	r24, 0x034F
    2f4e:	90 91 50 03 	lds	r25, 0x0350
    2f52:	20 91 2a 02 	lds	r18, 0x022A
    2f56:	30 91 2b 02 	lds	r19, 0x022B
    2f5a:	82 17       	cp	r24, r18
    2f5c:	93 07       	cpc	r25, r19
    2f5e:	0c f0       	brlt	.+2      	; 0x2f62 <Axis+0x2a2>
    2f60:	52 c0       	rjmp	.+164    	; 0x3006 <Axis+0x346>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	dc 01       	movw	r26, r24
    2f68:	80 93 89 02 	sts	0x0289, r24
    2f6c:	90 93 8a 02 	sts	0x028A, r25
    2f70:	a0 93 8b 02 	sts	0x028B, r26
    2f74:	b0 93 8c 02 	sts	0x028C, r27
    2f78:	80 91 89 02 	lds	r24, 0x0289
    2f7c:	90 91 8a 02 	lds	r25, 0x028A
    2f80:	a0 91 8b 02 	lds	r26, 0x028B
    2f84:	b0 91 8c 02 	lds	r27, 0x028C
    2f88:	80 93 13 03 	sts	0x0313, r24
    2f8c:	90 93 14 03 	sts	0x0314, r25
    2f90:	a0 93 15 03 	sts	0x0315, r26
    2f94:	b0 93 16 03 	sts	0x0316, r27
    2f98:	80 91 13 03 	lds	r24, 0x0313
    2f9c:	90 91 14 03 	lds	r25, 0x0314
    2fa0:	a0 91 15 03 	lds	r26, 0x0315
    2fa4:	b0 91 16 03 	lds	r27, 0x0316
    2fa8:	80 93 7d 02 	sts	0x027D, r24
    2fac:	90 93 7e 02 	sts	0x027E, r25
    2fb0:	a0 93 7f 02 	sts	0x027F, r26
    2fb4:	b0 93 80 02 	sts	0x0280, r27
    2fb8:	60 91 7d 02 	lds	r22, 0x027D
    2fbc:	70 91 7e 02 	lds	r23, 0x027E
    2fc0:	80 91 7f 02 	lds	r24, 0x027F
    2fc4:	90 91 80 02 	lds	r25, 0x0280
    2fc8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    2fcc:	70 93 2b 02 	sts	0x022B, r23
    2fd0:	60 93 2a 02 	sts	0x022A, r22
		speed(gsp[0],gsp[1],gsp[2],wa);
		
	}
}
    2fd4:	2c 96       	adiw	r28, 0x0c	; 12
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	9f 90       	pop	r9
    2ff6:	8f 90       	pop	r8
    2ff8:	7f 90       	pop	r7
    2ffa:	6f 90       	pop	r6
    2ffc:	5f 90       	pop	r5
    2ffe:	4f 90       	pop	r4
    3000:	3f 90       	pop	r3
    3002:	2f 90       	pop	r2
    3004:	08 95       	ret
			gsp[2] = e;
		}

		if(!oc) oc = 1;
		if(oc > tot) {LE return;}			
		speed(gsp[0],gsp[1],gsp[2],wa);
    3006:	60 90 3f 03 	lds	r6, 0x033F
    300a:	70 90 40 03 	lds	r7, 0x0340
    300e:	80 90 41 03 	lds	r8, 0x0341
    3012:	90 90 42 03 	lds	r9, 0x0342
    3016:	20 90 43 03 	lds	r2, 0x0343
    301a:	30 90 44 03 	lds	r3, 0x0344
    301e:	40 90 45 03 	lds	r4, 0x0345
    3022:	50 90 46 03 	lds	r5, 0x0346
    3026:	e0 90 47 03 	lds	r14, 0x0347
    302a:	f0 90 48 03 	lds	r15, 0x0348
    302e:	00 91 49 03 	lds	r16, 0x0349
    3032:	10 91 4a 03 	lds	r17, 0x034A
    3036:	60 91 50 02 	lds	r22, 0x0250
    303a:	70 91 51 02 	lds	r23, 0x0251
    303e:	88 27       	eor	r24, r24
    3040:	77 fd       	sbrc	r23, 7
    3042:	80 95       	com	r24
    3044:	98 2f       	mov	r25, r24
    3046:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    304a:	5b 01       	movw	r10, r22
    304c:	6c 01       	movw	r12, r24
    304e:	c4 01       	movw	r24, r8
    3050:	b3 01       	movw	r22, r6
    3052:	a2 01       	movw	r20, r4
    3054:	91 01       	movw	r18, r2
    3056:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
		
	}
    305a:	11 cf       	rjmp	.-478    	; 0x2e7e <Axis+0x1be>

0000305c <Curve>:
	if(v<min) return min;
	return v;
}

void Curve(int r, int z, int sp ,int ac)
{
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	7b 01       	movw	r14, r22
    3066:	fa 01       	movw	r30, r20
    3068:	89 01       	movw	r16, r18
	Axis(0,(int)M_PI * r * abs(z)/180,z,sp,ac);
    306a:	9c 01       	movw	r18, r24
    306c:	22 0f       	add	r18, r18
    306e:	33 1f       	adc	r19, r19
    3070:	28 0f       	add	r18, r24
    3072:	39 1f       	adc	r19, r25
    3074:	46 2f       	mov	r20, r22
    3076:	5f 2d       	mov	r21, r15
    3078:	57 ff       	sbrs	r21, 7
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <Curve+0x26>
    307c:	50 95       	com	r21
    307e:	41 95       	neg	r20
    3080:	5f 4f       	sbci	r21, 0xFF	; 255
    3082:	24 9f       	mul	r18, r20
    3084:	c0 01       	movw	r24, r0
    3086:	25 9f       	mul	r18, r21
    3088:	90 0d       	add	r25, r0
    308a:	34 9f       	mul	r19, r20
    308c:	90 0d       	add	r25, r0
    308e:	11 24       	eor	r1, r1
    3090:	64 eb       	ldi	r22, 0xB4	; 180
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a7 01       	movw	r20, r14
    309e:	9f 01       	movw	r18, r30
    30a0:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Axis>
}
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	08 95       	ret

000030ae <MovePsd>:
		
	}
}

void MovePsd(int check, int ps, int x, int y ,int z, int pc,int sp, int ac)
{
    30ae:	2f 92       	push	r2
    30b0:	3f 92       	push	r3
    30b2:	4f 92       	push	r4
    30b4:	5f 92       	push	r5
    30b6:	6f 92       	push	r6
    30b8:	7f 92       	push	r7
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	62 97       	sbiw	r28, 0x12	; 18
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	de bf       	out	0x3e, r29	; 62
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	cd bf       	out	0x3d, r28	; 61
    30e2:	9a 87       	std	Y+10, r25	; 0x0a
    30e4:	89 87       	std	Y+9, r24	; 0x09
    30e6:	7c 87       	std	Y+12, r23	; 0x0c
    30e8:	6b 87       	std	Y+11, r22	; 0x0b
    30ea:	3a 01       	movw	r6, r20
    30ec:	19 01       	movw	r2, r18
    30ee:	1c 83       	std	Y+4, r17	; 0x04
    30f0:	0b 83       	std	Y+3, r16	; 0x03
    30f2:	fe 86       	std	Y+14, r15	; 0x0e
    30f4:	ed 86       	std	Y+13, r14	; 0x0d
    30f6:	ba 82       	std	Y+2, r11	; 0x02
    30f8:	a9 82       	std	Y+1, r10	; 0x01
	ginit("MovPsd");	
    30fa:	10 92 03 02 	sts	0x0203, r1
    30fe:	10 92 02 02 	sts	0x0202, r1
    3102:	10 92 50 03 	sts	0x0350, r1
    3106:	10 92 4f 03 	sts	0x034F, r1
    310a:	80 91 4f 03 	lds	r24, 0x034F
    310e:	90 91 50 03 	lds	r25, 0x0350
    3112:	90 93 2b 02 	sts	0x022B, r25
    3116:	80 93 2a 02 	sts	0x022A, r24
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	dc 01       	movw	r26, r24
    3124:	9b 01       	movw	r18, r22
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	f9 01       	movw	r30, r18
    3130:	e1 5c       	subi	r30, 0xC1	; 193
    3132:	fc 4f       	sbci	r31, 0xFC	; 252
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
    313c:	e0 80       	ld	r14, Z
    313e:	f1 80       	ldd	r15, Z+1	; 0x01
    3140:	02 81       	ldd	r16, Z+2	; 0x02
    3142:	13 81       	ldd	r17, Z+3	; 0x03
    3144:	23 5d       	subi	r18, 0xD3	; 211
    3146:	3c 4f       	sbci	r19, 0xFC	; 252
    3148:	f9 01       	movw	r30, r18
    314a:	e0 82       	st	Z, r14
    314c:	f1 82       	std	Z+1, r15	; 0x01
    314e:	02 83       	std	Z+2, r16	; 0x02
    3150:	13 83       	std	Z+3, r17	; 0x03
    3152:	6f 5f       	subi	r22, 0xFF	; 255
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	64 30       	cpi	r22, 0x04	; 4
    3158:	71 05       	cpc	r23, r1
    315a:	21 f7       	brne	.-56     	; 0x3124 <MovePsd+0x76>
    315c:	00 d0       	rcall	.+0      	; 0x315e <MovePsd+0xb0>
    315e:	00 d0       	rcall	.+0      	; 0x3160 <MovePsd+0xb2>
    3160:	00 d0       	rcall	.+0      	; 0x3162 <MovePsd+0xb4>
    3162:	ed b7       	in	r30, 0x3d	; 61
    3164:	fe b7       	in	r31, 0x3e	; 62
    3166:	31 96       	adiw	r30, 0x01	; 1
    3168:	07 e1       	ldi	r16, 0x17	; 23
    316a:	13 e0       	ldi	r17, 0x03	; 3
    316c:	ad b7       	in	r26, 0x3d	; 61
    316e:	be b7       	in	r27, 0x3e	; 62
    3170:	12 96       	adiw	r26, 0x02	; 2
    3172:	1c 93       	st	X, r17
    3174:	0e 93       	st	-X, r16
    3176:	11 97       	sbiw	r26, 0x01	; 1
    3178:	82 eb       	ldi	r24, 0xB2	; 178
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	93 83       	std	Z+3, r25	; 0x03
    317e:	82 83       	std	Z+2, r24	; 0x02
    3180:	83 ec       	ldi	r24, 0xC3	; 195
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	95 83       	std	Z+5, r25	; 0x05
    3186:	84 83       	std	Z+4, r24	; 0x04
    3188:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    318c:	ed b7       	in	r30, 0x3d	; 61
    318e:	fe b7       	in	r31, 0x3e	; 62
    3190:	36 96       	adiw	r30, 0x06	; 6
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	fe bf       	out	0x3e, r31	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	ed bf       	out	0x3d, r30	; 61
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	67 e0       	ldi	r22, 0x07	; 7
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	a8 01       	movw	r20, r16
    31a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double s = gyro, e;
    31aa:	80 91 68 02 	lds	r24, 0x0268
    31ae:	90 91 69 02 	lds	r25, 0x0269
    31b2:	a0 91 6a 02 	lds	r26, 0x026A
    31b6:	b0 91 6b 02 	lds	r27, 0x026B
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	af 83       	std	Y+7, r26	; 0x07
    31c0:	b8 87       	std	Y+8, r27	; 0x08
	O(x,y,0,0);
    31c2:	c3 01       	movw	r24, r6
    31c4:	b1 01       	movw	r22, r2
    31c6:	40 e0       	ldi	r20, 0x00	; 0
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	86 01       	movw	r16, r12
    31d0:	e9 80       	ldd	r14, Y+1	; 0x01
    31d2:	fa 80       	ldd	r15, Y+2	; 0x02
    31d4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
	if(x && y)
    31d8:	61 14       	cp	r6, r1
    31da:	71 04       	cpc	r7, r1
    31dc:	69 f1       	breq	.+90     	; 0x3238 <MovePsd+0x18a>
    31de:	21 14       	cp	r2, r1
    31e0:	31 04       	cpc	r3, r1
    31e2:	51 f1       	breq	.+84     	; 0x3238 <MovePsd+0x18a>
		sp *= (double)sp / hypot(msp[0],msp[1]);
    31e4:	b6 01       	movw	r22, r12
    31e6:	88 27       	eor	r24, r24
    31e8:	77 fd       	sbrc	r23, 7
    31ea:	80 95       	com	r24
    31ec:	98 2f       	mov	r25, r24
    31ee:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    31f2:	7b 01       	movw	r14, r22
    31f4:	8c 01       	movw	r16, r24
    31f6:	60 91 2d 03 	lds	r22, 0x032D
    31fa:	70 91 2e 03 	lds	r23, 0x032E
    31fe:	80 91 2f 03 	lds	r24, 0x032F
    3202:	90 91 30 03 	lds	r25, 0x0330
    3206:	20 91 31 03 	lds	r18, 0x0331
    320a:	30 91 32 03 	lds	r19, 0x0332
    320e:	40 91 33 03 	lds	r20, 0x0333
    3212:	50 91 34 03 	lds	r21, 0x0334
    3216:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    321a:	9b 01       	movw	r18, r22
    321c:	ac 01       	movw	r20, r24
    321e:	c8 01       	movw	r24, r16
    3220:	b7 01       	movw	r22, r14
    3222:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    3226:	9b 01       	movw	r18, r22
    3228:	ac 01       	movw	r20, r24
    322a:	c8 01       	movw	r24, r16
    322c:	b7 01       	movw	r22, r14
    322e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    3232:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3236:	6b 01       	movw	r12, r22
	tot = O(x,y,z,0);
    3238:	c3 01       	movw	r24, r6
    323a:	b1 01       	movw	r22, r2
    323c:	4b 81       	ldd	r20, Y+3	; 0x03
    323e:	5c 81       	ldd	r21, Y+4	; 0x04
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	86 01       	movw	r16, r12
    3246:	e9 80       	ldd	r14, Y+1	; 0x01
    3248:	fa 80       	ldd	r15, Y+2	; 0x02
    324a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    324e:	90 93 50 03 	sts	0x0350, r25
    3252:	80 93 4f 03 	sts	0x034F, r24
		OS

		if(!z)
		{				
			e = s-gyro;
			e *= (sp+10)/10;
    3256:	c6 01       	movw	r24, r12
    3258:	0a 96       	adiw	r24, 0x0a	; 10
    325a:	6a e0       	ldi	r22, 0x0A	; 10
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    3262:	cb 01       	movw	r24, r22
    3264:	aa 27       	eor	r26, r26
    3266:	97 fd       	sbrc	r25, 7
    3268:	a0 95       	com	r26
    326a:	ba 2f       	mov	r27, r26
    326c:	8f 87       	std	Y+15, r24	; 0x0f
    326e:	98 8b       	std	Y+16, r25	; 0x10
    3270:	a9 8b       	std	Y+17, r26	; 0x11
    3272:	ba 8b       	std	Y+18, r27	; 0x12
		sp *= (double)sp / hypot(msp[0],msp[1]);
	tot = O(x,y,z,0);
	while(1)
	{
		
		OS
    3274:	80 91 4f 03 	lds	r24, 0x034F
    3278:	90 91 50 03 	lds	r25, 0x0350
    327c:	69 81       	ldd	r22, Y+1	; 0x01
    327e:	7a 81       	ldd	r23, Y+2	; 0x02
    3280:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		if(!z)
    3284:	ab 81       	ldd	r26, Y+3	; 0x03
    3286:	bc 81       	ldd	r27, Y+4	; 0x04
    3288:	10 97       	sbiw	r26, 0x00	; 0
    328a:	09 f0       	breq	.+2      	; 0x328e <MovePsd+0x1e0>
    328c:	4d c0       	rjmp	.+154    	; 0x3328 <MovePsd+0x27a>
		{				
			e = s-gyro;
    328e:	20 91 68 02 	lds	r18, 0x0268
    3292:	30 91 69 02 	lds	r19, 0x0269
    3296:	40 91 6a 02 	lds	r20, 0x026A
    329a:	50 91 6b 02 	lds	r21, 0x026B
    329e:	6d 81       	ldd	r22, Y+5	; 0x05
    32a0:	7e 81       	ldd	r23, Y+6	; 0x06
    32a2:	8f 81       	ldd	r24, Y+7	; 0x07
    32a4:	98 85       	ldd	r25, Y+8	; 0x08
    32a6:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    32aa:	6b 01       	movw	r12, r22
    32ac:	e8 2e       	mov	r14, r24
    32ae:	09 2f       	mov	r16, r25
			e *= (sp+10)/10;
    32b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    32b2:	78 89       	ldd	r23, Y+16	; 0x10
    32b4:	89 89       	ldd	r24, Y+17	; 0x11
    32b6:	9a 89       	ldd	r25, Y+18	; 0x12
    32b8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    32bc:	9b 01       	movw	r18, r22
    32be:	ac 01       	movw	r20, r24
    32c0:	6c 2d       	mov	r22, r12
    32c2:	7d 2d       	mov	r23, r13
    32c4:	8e 2d       	mov	r24, r14
    32c6:	90 2f       	mov	r25, r16
    32c8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    32cc:	d6 2e       	mov	r13, r22
    32ce:	c7 2e       	mov	r12, r23
    32d0:	b8 2e       	mov	r11, r24
    32d2:	a9 2e       	mov	r10, r25
    32d4:	e6 2e       	mov	r14, r22
    32d6:	f7 2e       	mov	r15, r23
    32d8:	08 2f       	mov	r16, r24
    32da:	19 2f       	mov	r17, r25
			if(e > 30 || e< -30) e= 0;
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 ef       	ldi	r20, 0xF0	; 240
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    32e8:	18 16       	cp	r1, r24
    32ea:	64 f0       	brlt	.+24     	; 0x3304 <MovePsd+0x256>
    32ec:	6d 2d       	mov	r22, r13
    32ee:	7c 2d       	mov	r23, r12
    32f0:	8b 2d       	mov	r24, r11
    32f2:	9a 2d       	mov	r25, r10
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 ef       	ldi	r20, 0xF0	; 240
    32fa:	51 ec       	ldi	r21, 0xC1	; 193
    32fc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    3300:	87 ff       	sbrs	r24, 7
    3302:	0a c0       	rjmp	.+20     	; 0x3318 <MovePsd+0x26a>
    3304:	0f 2e       	mov	r0, r31
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	ef 2e       	mov	r14, r31
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	ff 2e       	mov	r15, r31
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	0f 2f       	mov	r16, r31
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	1f 2f       	mov	r17, r31
    3316:	f0 2d       	mov	r31, r0
			gsp[2] = e;
    3318:	e0 92 47 03 	sts	0x0347, r14
    331c:	f0 92 48 03 	sts	0x0348, r15
    3320:	00 93 49 03 	sts	0x0349, r16
    3324:	10 93 4a 03 	sts	0x034A, r17
		}

		if(!oc) oc = 1;
    3328:	80 91 2a 02 	lds	r24, 0x022A
    332c:	90 91 2b 02 	lds	r25, 0x022B
    3330:	00 97       	sbiw	r24, 0x00	; 0
    3332:	31 f4       	brne	.+12     	; 0x3340 <MovePsd+0x292>
    3334:	e1 e0       	ldi	r30, 0x01	; 1
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	f0 93 2b 02 	sts	0x022B, r31
    333c:	e0 93 2a 02 	sts	0x022A, r30
		if(oc > tot) {LE return;}				
    3340:	80 91 4f 03 	lds	r24, 0x034F
    3344:	90 91 50 03 	lds	r25, 0x0350
    3348:	20 91 2a 02 	lds	r18, 0x022A
    334c:	30 91 2b 02 	lds	r19, 0x022B
    3350:	82 17       	cp	r24, r18
    3352:	93 07       	cpc	r25, r19
    3354:	74 f0       	brlt	.+28     	; 0x3372 <MovePsd+0x2c4>

		if(check == 0) { if(SensorIn(ps, pc)) {LE return;} }
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	09 f0       	breq	.+2      	; 0x3360 <MovePsd+0x2b2>
    335e:	5b c0       	rjmp	.+182    	; 0x3416 <MovePsd+0x368>
    3360:	8b 85       	ldd	r24, Y+11	; 0x0b
    3362:	9c 85       	ldd	r25, Y+12	; 0x0c
    3364:	6d 85       	ldd	r22, Y+13	; 0x0d
    3366:	7e 85       	ldd	r23, Y+14	; 0x0e
    3368:	0e 94 3c 11 	call	0x2278	; 0x2278 <SensorIn>
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	09 f4       	brne	.+2      	; 0x3372 <MovePsd+0x2c4>
    3370:	52 c0       	rjmp	.+164    	; 0x3416 <MovePsd+0x368>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	dc 01       	movw	r26, r24
    3378:	80 93 89 02 	sts	0x0289, r24
    337c:	90 93 8a 02 	sts	0x028A, r25
    3380:	a0 93 8b 02 	sts	0x028B, r26
    3384:	b0 93 8c 02 	sts	0x028C, r27
    3388:	80 91 89 02 	lds	r24, 0x0289
    338c:	90 91 8a 02 	lds	r25, 0x028A
    3390:	a0 91 8b 02 	lds	r26, 0x028B
    3394:	b0 91 8c 02 	lds	r27, 0x028C
    3398:	80 93 13 03 	sts	0x0313, r24
    339c:	90 93 14 03 	sts	0x0314, r25
    33a0:	a0 93 15 03 	sts	0x0315, r26
    33a4:	b0 93 16 03 	sts	0x0316, r27
    33a8:	80 91 13 03 	lds	r24, 0x0313
    33ac:	90 91 14 03 	lds	r25, 0x0314
    33b0:	a0 91 15 03 	lds	r26, 0x0315
    33b4:	b0 91 16 03 	lds	r27, 0x0316
    33b8:	80 93 7d 02 	sts	0x027D, r24
    33bc:	90 93 7e 02 	sts	0x027E, r25
    33c0:	a0 93 7f 02 	sts	0x027F, r26
    33c4:	b0 93 80 02 	sts	0x0280, r27
    33c8:	60 91 7d 02 	lds	r22, 0x027D
    33cc:	70 91 7e 02 	lds	r23, 0x027E
    33d0:	80 91 7f 02 	lds	r24, 0x027F
    33d4:	90 91 80 02 	lds	r25, 0x0280
    33d8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    33dc:	70 93 2b 02 	sts	0x022B, r23
    33e0:	60 93 2a 02 	sts	0x022A, r22
		speed(gsp[0],gsp[1],gsp[2],wa);
	
	}
}
    33e4:	62 96       	adiw	r28, 0x12	; 18
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	df 90       	pop	r13
    33fe:	cf 90       	pop	r12
    3400:	bf 90       	pop	r11
    3402:	af 90       	pop	r10
    3404:	9f 90       	pop	r9
    3406:	8f 90       	pop	r8
    3408:	7f 90       	pop	r7
    340a:	6f 90       	pop	r6
    340c:	5f 90       	pop	r5
    340e:	4f 90       	pop	r4
    3410:	3f 90       	pop	r3
    3412:	2f 90       	pop	r2
    3414:	08 95       	ret

		if(!oc) oc = 1;
		if(oc > tot) {LE return;}				

		if(check == 0) { if(SensorIn(ps, pc)) {LE return;} }
		speed(gsp[0],gsp[1],gsp[2],wa);
    3416:	60 90 3f 03 	lds	r6, 0x033F
    341a:	70 90 40 03 	lds	r7, 0x0340
    341e:	80 90 41 03 	lds	r8, 0x0341
    3422:	90 90 42 03 	lds	r9, 0x0342
    3426:	20 90 43 03 	lds	r2, 0x0343
    342a:	30 90 44 03 	lds	r3, 0x0344
    342e:	40 90 45 03 	lds	r4, 0x0345
    3432:	50 90 46 03 	lds	r5, 0x0346
    3436:	e0 90 47 03 	lds	r14, 0x0347
    343a:	f0 90 48 03 	lds	r15, 0x0348
    343e:	00 91 49 03 	lds	r16, 0x0349
    3442:	10 91 4a 03 	lds	r17, 0x034A
    3446:	60 91 50 02 	lds	r22, 0x0250
    344a:	70 91 51 02 	lds	r23, 0x0251
    344e:	88 27       	eor	r24, r24
    3450:	77 fd       	sbrc	r23, 7
    3452:	80 95       	com	r24
    3454:	98 2f       	mov	r25, r24
    3456:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    345a:	5b 01       	movw	r10, r22
    345c:	6c 01       	movw	r12, r24
    345e:	c4 01       	movw	r24, r8
    3460:	b3 01       	movw	r22, r6
    3462:	a2 01       	movw	r20, r4
    3464:	91 01       	movw	r18, r2
    3466:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	
	}
    346a:	04 cf       	rjmp	.-504    	; 0x3274 <MovePsd+0x1c6>

0000346c <MoveLineCheck>:
}

int MoveLineCheck(int check, int x, int y ,int z, int sp, int ac)
{
    346c:	2f 92       	push	r2
    346e:	3f 92       	push	r3
    3470:	4f 92       	push	r4
    3472:	5f 92       	push	r5
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	2e 97       	sbiw	r28, 0x0e	; 14
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	6b 01       	movw	r12, r22
    34a6:	5a 01       	movw	r10, r20
    34a8:	3e 83       	std	Y+6, r19	; 0x06
    34aa:	2d 83       	std	Y+5, r18	; 0x05
    34ac:	38 01       	movw	r6, r16
    34ae:	fc 82       	std	Y+4, r15	; 0x04
    34b0:	eb 82       	std	Y+3, r14	; 0x03
	ginit("MoveLineCheck");	
    34b2:	10 92 03 02 	sts	0x0203, r1
    34b6:	10 92 02 02 	sts	0x0202, r1
    34ba:	10 92 50 03 	sts	0x0350, r1
    34be:	10 92 4f 03 	sts	0x034F, r1
    34c2:	80 91 4f 03 	lds	r24, 0x034F
    34c6:	90 91 50 03 	lds	r25, 0x0350
    34ca:	90 93 2b 02 	sts	0x022B, r25
    34ce:	80 93 2a 02 	sts	0x022A, r24
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	dc 01       	movw	r26, r24
    34dc:	9b 01       	movw	r18, r22
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	22 0f       	add	r18, r18
    34e4:	33 1f       	adc	r19, r19
    34e6:	f9 01       	movw	r30, r18
    34e8:	e1 5c       	subi	r30, 0xC1	; 193
    34ea:	fc 4f       	sbci	r31, 0xFC	; 252
    34ec:	80 83       	st	Z, r24
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	a2 83       	std	Z+2, r26	; 0x02
    34f2:	b3 83       	std	Z+3, r27	; 0x03
    34f4:	e0 80       	ld	r14, Z
    34f6:	f1 80       	ldd	r15, Z+1	; 0x01
    34f8:	02 81       	ldd	r16, Z+2	; 0x02
    34fa:	13 81       	ldd	r17, Z+3	; 0x03
    34fc:	23 5d       	subi	r18, 0xD3	; 211
    34fe:	3c 4f       	sbci	r19, 0xFC	; 252
    3500:	f9 01       	movw	r30, r18
    3502:	e0 82       	st	Z, r14
    3504:	f1 82       	std	Z+1, r15	; 0x01
    3506:	02 83       	std	Z+2, r16	; 0x02
    3508:	13 83       	std	Z+3, r17	; 0x03
    350a:	6f 5f       	subi	r22, 0xFF	; 255
    350c:	7f 4f       	sbci	r23, 0xFF	; 255
    350e:	64 30       	cpi	r22, 0x04	; 4
    3510:	71 05       	cpc	r23, r1
    3512:	21 f7       	brne	.-56     	; 0x34dc <MoveLineCheck+0x70>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <MoveLineCheck+0xaa>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <MoveLineCheck+0xac>
    3518:	00 d0       	rcall	.+0      	; 0x351a <MoveLineCheck+0xae>
    351a:	ed b7       	in	r30, 0x3d	; 61
    351c:	fe b7       	in	r31, 0x3e	; 62
    351e:	31 96       	adiw	r30, 0x01	; 1
    3520:	07 e1       	ldi	r16, 0x17	; 23
    3522:	13 e0       	ldi	r17, 0x03	; 3
    3524:	ad b7       	in	r26, 0x3d	; 61
    3526:	be b7       	in	r27, 0x3e	; 62
    3528:	12 96       	adiw	r26, 0x02	; 2
    352a:	1c 93       	st	X, r17
    352c:	0e 93       	st	-X, r16
    352e:	11 97       	sbiw	r26, 0x01	; 1
    3530:	82 eb       	ldi	r24, 0xB2	; 178
    3532:	91 e0       	ldi	r25, 0x01	; 1
    3534:	93 83       	std	Z+3, r25	; 0x03
    3536:	82 83       	std	Z+2, r24	; 0x02
    3538:	8a ec       	ldi	r24, 0xCA	; 202
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	95 83       	std	Z+5, r25	; 0x05
    353e:	84 83       	std	Z+4, r24	; 0x04
    3540:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    3544:	ed b7       	in	r30, 0x3d	; 61
    3546:	fe b7       	in	r31, 0x3e	; 62
    3548:	36 96       	adiw	r30, 0x06	; 6
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	fe bf       	out	0x3e, r31	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	ed bf       	out	0x3d, r30	; 61
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	67 e0       	ldi	r22, 0x07	; 7
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	a8 01       	movw	r20, r16
    355e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double s = gyro, e;
    3562:	80 91 68 02 	lds	r24, 0x0268
    3566:	90 91 69 02 	lds	r25, 0x0269
    356a:	a0 91 6a 02 	lds	r26, 0x026A
    356e:	b0 91 6b 02 	lds	r27, 0x026B
    3572:	8f 83       	std	Y+7, r24	; 0x07
    3574:	98 87       	std	Y+8, r25	; 0x08
    3576:	a9 87       	std	Y+9, r26	; 0x09
    3578:	ba 87       	std	Y+10, r27	; 0x0a
	O(x,y,0,0);
    357a:	c6 01       	movw	r24, r12
    357c:	b5 01       	movw	r22, r10
    357e:	40 e0       	ldi	r20, 0x00	; 0
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	83 01       	movw	r16, r6
    3588:	eb 80       	ldd	r14, Y+3	; 0x03
    358a:	fc 80       	ldd	r15, Y+4	; 0x04
    358c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
	if(x && y)
    3590:	c1 14       	cp	r12, r1
    3592:	d1 04       	cpc	r13, r1
    3594:	69 f1       	breq	.+90     	; 0x35f0 <MoveLineCheck+0x184>
    3596:	a1 14       	cp	r10, r1
    3598:	b1 04       	cpc	r11, r1
    359a:	51 f1       	breq	.+84     	; 0x35f0 <MoveLineCheck+0x184>
		sp *= (double)sp / hypot(msp[0],msp[1]);
    359c:	b3 01       	movw	r22, r6
    359e:	88 27       	eor	r24, r24
    35a0:	77 fd       	sbrc	r23, 7
    35a2:	80 95       	com	r24
    35a4:	98 2f       	mov	r25, r24
    35a6:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    35aa:	7b 01       	movw	r14, r22
    35ac:	8c 01       	movw	r16, r24
    35ae:	60 91 2d 03 	lds	r22, 0x032D
    35b2:	70 91 2e 03 	lds	r23, 0x032E
    35b6:	80 91 2f 03 	lds	r24, 0x032F
    35ba:	90 91 30 03 	lds	r25, 0x0330
    35be:	20 91 31 03 	lds	r18, 0x0331
    35c2:	30 91 32 03 	lds	r19, 0x0332
    35c6:	40 91 33 03 	lds	r20, 0x0333
    35ca:	50 91 34 03 	lds	r21, 0x0334
    35ce:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    35d2:	9b 01       	movw	r18, r22
    35d4:	ac 01       	movw	r20, r24
    35d6:	c8 01       	movw	r24, r16
    35d8:	b7 01       	movw	r22, r14
    35da:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    35de:	9b 01       	movw	r18, r22
    35e0:	ac 01       	movw	r20, r24
    35e2:	c8 01       	movw	r24, r16
    35e4:	b7 01       	movw	r22, r14
    35e6:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    35ea:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    35ee:	3b 01       	movw	r6, r22
	tot = O(x,y,z,0);
    35f0:	c6 01       	movw	r24, r12
    35f2:	b5 01       	movw	r22, r10
    35f4:	4d 81       	ldd	r20, Y+5	; 0x05
    35f6:	5e 81       	ldd	r21, Y+6	; 0x06
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	83 01       	movw	r16, r6
    35fe:	eb 80       	ldd	r14, Y+3	; 0x03
    3600:	fc 80       	ldd	r15, Y+4	; 0x04
    3602:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    3606:	90 93 50 03 	sts	0x0350, r25
    360a:	80 93 4f 03 	sts	0x034F, r24
		OS

		if(!z)
		{				
			e = s-gyro;
			e *= (sp+10)/10;
    360e:	c3 01       	movw	r24, r6
    3610:	0a 96       	adiw	r24, 0x0a	; 10
    3612:	6a e0       	ldi	r22, 0x0A	; 10
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    361a:	cb 01       	movw	r24, r22
    361c:	aa 27       	eor	r26, r26
    361e:	97 fd       	sbrc	r25, 7
    3620:	a0 95       	com	r26
    3622:	ba 2f       	mov	r27, r26
    3624:	8b 87       	std	Y+11, r24	; 0x0b
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	ad 87       	std	Y+13, r26	; 0x0d
    362a:	be 87       	std	Y+14, r27	; 0x0e
		sp *= (double)sp / hypot(msp[0],msp[1]);
	tot = O(x,y,z,0);
	while(1)
	{
		
		OS
    362c:	80 91 4f 03 	lds	r24, 0x034F
    3630:	90 91 50 03 	lds	r25, 0x0350
    3634:	6b 81       	ldd	r22, Y+3	; 0x03
    3636:	7c 81       	ldd	r23, Y+4	; 0x04
    3638:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		if(!z)
    363c:	ad 81       	ldd	r26, Y+5	; 0x05
    363e:	be 81       	ldd	r27, Y+6	; 0x06
    3640:	10 97       	sbiw	r26, 0x00	; 0
    3642:	09 f0       	breq	.+2      	; 0x3646 <MoveLineCheck+0x1da>
    3644:	4d c0       	rjmp	.+154    	; 0x36e0 <MoveLineCheck+0x274>
		{				
			e = s-gyro;
    3646:	20 91 68 02 	lds	r18, 0x0268
    364a:	30 91 69 02 	lds	r19, 0x0269
    364e:	40 91 6a 02 	lds	r20, 0x026A
    3652:	50 91 6b 02 	lds	r21, 0x026B
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    3662:	6b 01       	movw	r12, r22
    3664:	e8 2e       	mov	r14, r24
    3666:	09 2f       	mov	r16, r25
			e *= (sp+10)/10;
    3668:	6b 85       	ldd	r22, Y+11	; 0x0b
    366a:	7c 85       	ldd	r23, Y+12	; 0x0c
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3670:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3674:	9b 01       	movw	r18, r22
    3676:	ac 01       	movw	r20, r24
    3678:	6c 2d       	mov	r22, r12
    367a:	7d 2d       	mov	r23, r13
    367c:	8e 2d       	mov	r24, r14
    367e:	90 2f       	mov	r25, r16
    3680:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    3684:	d6 2e       	mov	r13, r22
    3686:	c7 2e       	mov	r12, r23
    3688:	b8 2e       	mov	r11, r24
    368a:	a9 2e       	mov	r10, r25
    368c:	e6 2e       	mov	r14, r22
    368e:	f7 2e       	mov	r15, r23
    3690:	08 2f       	mov	r16, r24
    3692:	19 2f       	mov	r17, r25
			if(e > 30 || e< -30) e= 0;
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 ef       	ldi	r20, 0xF0	; 240
    369a:	51 e4       	ldi	r21, 0x41	; 65
    369c:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	64 f0       	brlt	.+24     	; 0x36bc <MoveLineCheck+0x250>
    36a4:	6d 2d       	mov	r22, r13
    36a6:	7c 2d       	mov	r23, r12
    36a8:	8b 2d       	mov	r24, r11
    36aa:	9a 2d       	mov	r25, r10
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	40 ef       	ldi	r20, 0xF0	; 240
    36b2:	51 ec       	ldi	r21, 0xC1	; 193
    36b4:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    36b8:	87 ff       	sbrs	r24, 7
    36ba:	0a c0       	rjmp	.+20     	; 0x36d0 <MoveLineCheck+0x264>
    36bc:	0f 2e       	mov	r0, r31
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	ef 2e       	mov	r14, r31
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	ff 2e       	mov	r15, r31
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	0f 2f       	mov	r16, r31
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	1f 2f       	mov	r17, r31
    36ce:	f0 2d       	mov	r31, r0
			gsp[2] = e;
    36d0:	e0 92 47 03 	sts	0x0347, r14
    36d4:	f0 92 48 03 	sts	0x0348, r15
    36d8:	00 93 49 03 	sts	0x0349, r16
    36dc:	10 93 4a 03 	sts	0x034A, r17
		}

		if(!oc) oc = 1;
    36e0:	80 91 2a 02 	lds	r24, 0x022A
    36e4:	90 91 2b 02 	lds	r25, 0x022B
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	31 f4       	brne	.+12     	; 0x36f8 <MoveLineCheck+0x28c>
    36ec:	e1 e0       	ldi	r30, 0x01	; 1
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	f0 93 2b 02 	sts	0x022B, r31
    36f4:	e0 93 2a 02 	sts	0x022A, r30
		if(oc > tot) {LE return;}	
    36f8:	80 91 4f 03 	lds	r24, 0x034F
    36fc:	90 91 50 03 	lds	r25, 0x0350
    3700:	20 91 2a 02 	lds	r18, 0x022A
    3704:	30 91 2b 02 	lds	r19, 0x022B
    3708:	82 17       	cp	r24, r18
    370a:	93 07       	cpc	r25, r19
    370c:	d4 f5       	brge	.+116    	; 0x3782 <MoveLineCheck+0x316>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	dc 01       	movw	r26, r24
    3714:	80 93 89 02 	sts	0x0289, r24
    3718:	90 93 8a 02 	sts	0x028A, r25
    371c:	a0 93 8b 02 	sts	0x028B, r26
    3720:	b0 93 8c 02 	sts	0x028C, r27
    3724:	80 91 89 02 	lds	r24, 0x0289
    3728:	90 91 8a 02 	lds	r25, 0x028A
    372c:	a0 91 8b 02 	lds	r26, 0x028B
    3730:	b0 91 8c 02 	lds	r27, 0x028C
    3734:	80 93 13 03 	sts	0x0313, r24
    3738:	90 93 14 03 	sts	0x0314, r25
    373c:	a0 93 15 03 	sts	0x0315, r26
    3740:	b0 93 16 03 	sts	0x0316, r27
    3744:	80 91 13 03 	lds	r24, 0x0313
    3748:	90 91 14 03 	lds	r25, 0x0314
    374c:	a0 91 15 03 	lds	r26, 0x0315
    3750:	b0 91 16 03 	lds	r27, 0x0316
    3754:	80 93 7d 02 	sts	0x027D, r24
    3758:	90 93 7e 02 	sts	0x027E, r25
    375c:	a0 93 7f 02 	sts	0x027F, r26
    3760:	b0 93 80 02 	sts	0x0280, r27
    3764:	60 91 7d 02 	lds	r22, 0x027D
    3768:	70 91 7e 02 	lds	r23, 0x027E
    376c:	80 91 7f 02 	lds	r24, 0x027F
    3770:	90 91 80 02 	lds	r25, 0x0280
    3774:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3778:	70 93 2b 02 	sts	0x022B, r23
    377c:	60 93 2a 02 	sts	0x022A, r22
    3780:	c8 c0       	rjmp	.+400    	; 0x3912 <MoveLineCheck+0x4a6>
		
		if(check == 0 && IR_2) {LE return 1;}
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	41 f4       	brne	.+16     	; 0x379a <MoveLineCheck+0x32e>
    378a:	80 91 83 02 	lds	r24, 0x0283
    378e:	90 91 84 02 	lds	r25, 0x0284
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	09 f4       	brne	.+2      	; 0x3798 <MoveLineCheck+0x32c>
    3796:	91 c0       	rjmp	.+290    	; 0x38ba <MoveLineCheck+0x44e>
    3798:	12 c0       	rjmp	.+36     	; 0x37be <MoveLineCheck+0x352>
		if(check == 1 && IND_1) {LE return 2;}
    379a:	a9 81       	ldd	r26, Y+1	; 0x01
    379c:	ba 81       	ldd	r27, Y+2	; 0x02
    379e:	a1 30       	cpi	r26, 0x01	; 1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <MoveLineCheck+0x33a>
    37a4:	48 c0       	rjmp	.+144    	; 0x3836 <MoveLineCheck+0x3ca>
	
		if(check == 2 && IR_2) {LE return 1;}
    37a6:	e9 81       	ldd	r30, Y+1	; 0x01
    37a8:	fa 81       	ldd	r31, Y+2	; 0x02
    37aa:	e2 30       	cpi	r30, 0x02	; 2
    37ac:	f1 05       	cpc	r31, r1
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <MoveLineCheck+0x346>
    37b0:	84 c0       	rjmp	.+264    	; 0x38ba <MoveLineCheck+0x44e>
    37b2:	80 91 83 02 	lds	r24, 0x0283
    37b6:	90 91 84 02 	lds	r25, 0x0284
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	e1 f1       	breq	.+120    	; 0x3836 <MoveLineCheck+0x3ca>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	dc 01       	movw	r26, r24
    37c4:	80 93 89 02 	sts	0x0289, r24
    37c8:	90 93 8a 02 	sts	0x028A, r25
    37cc:	a0 93 8b 02 	sts	0x028B, r26
    37d0:	b0 93 8c 02 	sts	0x028C, r27
    37d4:	80 91 89 02 	lds	r24, 0x0289
    37d8:	90 91 8a 02 	lds	r25, 0x028A
    37dc:	a0 91 8b 02 	lds	r26, 0x028B
    37e0:	b0 91 8c 02 	lds	r27, 0x028C
    37e4:	80 93 13 03 	sts	0x0313, r24
    37e8:	90 93 14 03 	sts	0x0314, r25
    37ec:	a0 93 15 03 	sts	0x0315, r26
    37f0:	b0 93 16 03 	sts	0x0316, r27
    37f4:	80 91 13 03 	lds	r24, 0x0313
    37f8:	90 91 14 03 	lds	r25, 0x0314
    37fc:	a0 91 15 03 	lds	r26, 0x0315
    3800:	b0 91 16 03 	lds	r27, 0x0316
    3804:	80 93 7d 02 	sts	0x027D, r24
    3808:	90 93 7e 02 	sts	0x027E, r25
    380c:	a0 93 7f 02 	sts	0x027F, r26
    3810:	b0 93 80 02 	sts	0x0280, r27
    3814:	60 91 7d 02 	lds	r22, 0x027D
    3818:	70 91 7e 02 	lds	r23, 0x027E
    381c:	80 91 7f 02 	lds	r24, 0x027F
    3820:	90 91 80 02 	lds	r25, 0x0280
    3824:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3828:	70 93 2b 02 	sts	0x022B, r23
    382c:	60 93 2a 02 	sts	0x022A, r22
    3830:	21 e0       	ldi	r18, 0x01	; 1
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	6d c0       	rjmp	.+218    	; 0x3910 <MoveLineCheck+0x4a4>
		if(check == 2 && IND_1) {LE return 2;}		
    3836:	80 91 8d 02 	lds	r24, 0x028D
    383a:	90 91 8e 02 	lds	r25, 0x028E
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	e1 f1       	breq	.+120    	; 0x38ba <MoveLineCheck+0x44e>
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	dc 01       	movw	r26, r24
    3848:	80 93 89 02 	sts	0x0289, r24
    384c:	90 93 8a 02 	sts	0x028A, r25
    3850:	a0 93 8b 02 	sts	0x028B, r26
    3854:	b0 93 8c 02 	sts	0x028C, r27
    3858:	80 91 89 02 	lds	r24, 0x0289
    385c:	90 91 8a 02 	lds	r25, 0x028A
    3860:	a0 91 8b 02 	lds	r26, 0x028B
    3864:	b0 91 8c 02 	lds	r27, 0x028C
    3868:	80 93 13 03 	sts	0x0313, r24
    386c:	90 93 14 03 	sts	0x0314, r25
    3870:	a0 93 15 03 	sts	0x0315, r26
    3874:	b0 93 16 03 	sts	0x0316, r27
    3878:	80 91 13 03 	lds	r24, 0x0313
    387c:	90 91 14 03 	lds	r25, 0x0314
    3880:	a0 91 15 03 	lds	r26, 0x0315
    3884:	b0 91 16 03 	lds	r27, 0x0316
    3888:	80 93 7d 02 	sts	0x027D, r24
    388c:	90 93 7e 02 	sts	0x027E, r25
    3890:	a0 93 7f 02 	sts	0x027F, r26
    3894:	b0 93 80 02 	sts	0x0280, r27
    3898:	60 91 7d 02 	lds	r22, 0x027D
    389c:	70 91 7e 02 	lds	r23, 0x027E
    38a0:	80 91 7f 02 	lds	r24, 0x027F
    38a4:	90 91 80 02 	lds	r25, 0x0280
    38a8:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    38ac:	70 93 2b 02 	sts	0x022B, r23
    38b0:	60 93 2a 02 	sts	0x022A, r22
    38b4:	22 e0       	ldi	r18, 0x02	; 2
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	2b c0       	rjmp	.+86     	; 0x3910 <MoveLineCheck+0x4a4>
		speed(gsp[0],gsp[1],gsp[2],wa);
    38ba:	60 90 3f 03 	lds	r6, 0x033F
    38be:	70 90 40 03 	lds	r7, 0x0340
    38c2:	80 90 41 03 	lds	r8, 0x0341
    38c6:	90 90 42 03 	lds	r9, 0x0342
    38ca:	20 90 43 03 	lds	r2, 0x0343
    38ce:	30 90 44 03 	lds	r3, 0x0344
    38d2:	40 90 45 03 	lds	r4, 0x0345
    38d6:	50 90 46 03 	lds	r5, 0x0346
    38da:	e0 90 47 03 	lds	r14, 0x0347
    38de:	f0 90 48 03 	lds	r15, 0x0348
    38e2:	00 91 49 03 	lds	r16, 0x0349
    38e6:	10 91 4a 03 	lds	r17, 0x034A
    38ea:	60 91 50 02 	lds	r22, 0x0250
    38ee:	70 91 51 02 	lds	r23, 0x0251
    38f2:	88 27       	eor	r24, r24
    38f4:	77 fd       	sbrc	r23, 7
    38f6:	80 95       	com	r24
    38f8:	98 2f       	mov	r25, r24
    38fa:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    38fe:	5b 01       	movw	r10, r22
    3900:	6c 01       	movw	r12, r24
    3902:	c4 01       	movw	r24, r8
    3904:	b3 01       	movw	r22, r6
    3906:	a2 01       	movw	r20, r4
    3908:	91 01       	movw	r18, r2
    390a:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
		
	}
    390e:	8e ce       	rjmp	.-740    	; 0x362c <MoveLineCheck+0x1c0>
    3910:	c9 01       	movw	r24, r18
}
    3912:	2e 96       	adiw	r28, 0x0e	; 14
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	cf 91       	pop	r28
    3920:	df 91       	pop	r29
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	cf 90       	pop	r12
    392e:	bf 90       	pop	r11
    3930:	af 90       	pop	r10
    3932:	9f 90       	pop	r9
    3934:	8f 90       	pop	r8
    3936:	7f 90       	pop	r7
    3938:	6f 90       	pop	r6
    393a:	5f 90       	pop	r5
    393c:	4f 90       	pop	r4
    393e:	3f 90       	pop	r3
    3940:	2f 90       	pop	r2
    3942:	08 95       	ret

00003944 <CPsd>:
		if(oc > tot) {LE return;}
		
	}
}

int CPsd(int check, int ps, int cm, int v, int pm, int pc, int sp, int ac){
    3944:	2f 92       	push	r2
    3946:	3f 92       	push	r3
    3948:	4f 92       	push	r4
    394a:	5f 92       	push	r5
    394c:	6f 92       	push	r6
    394e:	7f 92       	push	r7
    3950:	8f 92       	push	r8
    3952:	9f 92       	push	r9
    3954:	af 92       	push	r10
    3956:	bf 92       	push	r11
    3958:	cf 92       	push	r12
    395a:	df 92       	push	r13
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	aa 97       	sbiw	r28, 0x2a	; 42
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	4c 01       	movw	r8, r24
    397a:	7a 83       	std	Y+2, r23	; 0x02
    397c:	69 83       	std	Y+1, r22	; 0x01
    397e:	5c 83       	std	Y+4, r21	; 0x04
    3980:	4b 83       	std	Y+3, r20	; 0x03
    3982:	39 01       	movw	r6, r18
    3984:	1c 87       	std	Y+12, r17	; 0x0c
    3986:	0b 87       	std	Y+11, r16	; 0x0b
    3988:	fe 82       	std	Y+6, r15	; 0x06
    398a:	ed 82       	std	Y+5, r14	; 0x05
    398c:	b8 86       	std	Y+8, r11	; 0x08
    398e:	af 82       	std	Y+7, r10	; 0x07
	ginit("CPsd");
    3990:	10 92 03 02 	sts	0x0203, r1
    3994:	10 92 02 02 	sts	0x0202, r1
    3998:	10 92 50 03 	sts	0x0350, r1
    399c:	10 92 4f 03 	sts	0x034F, r1
    39a0:	80 91 4f 03 	lds	r24, 0x034F
    39a4:	90 91 50 03 	lds	r25, 0x0350
    39a8:	90 93 2b 02 	sts	0x022B, r25
    39ac:	80 93 2a 02 	sts	0x022A, r24
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	0f 2e       	mov	r0, r31
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	ef 2e       	mov	r14, r31
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	ff 2e       	mov	r15, r31
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	0f 2f       	mov	r16, r31
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	1f 2f       	mov	r17, r31
    39c6:	f0 2d       	mov	r31, r0
    39c8:	c9 01       	movw	r24, r18
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	fc 01       	movw	r30, r24
    39d4:	e1 5c       	subi	r30, 0xC1	; 193
    39d6:	fc 4f       	sbci	r31, 0xFC	; 252
    39d8:	e0 82       	st	Z, r14
    39da:	f1 82       	std	Z+1, r15	; 0x01
    39dc:	02 83       	std	Z+2, r16	; 0x02
    39de:	13 83       	std	Z+3, r17	; 0x03
    39e0:	40 81       	ld	r20, Z
    39e2:	51 81       	ldd	r21, Z+1	; 0x01
    39e4:	62 81       	ldd	r22, Z+2	; 0x02
    39e6:	73 81       	ldd	r23, Z+3	; 0x03
    39e8:	83 5d       	subi	r24, 0xD3	; 211
    39ea:	9c 4f       	sbci	r25, 0xFC	; 252
    39ec:	dc 01       	movw	r26, r24
    39ee:	4d 93       	st	X+, r20
    39f0:	5d 93       	st	X+, r21
    39f2:	6d 93       	st	X+, r22
    39f4:	7c 93       	st	X, r23
    39f6:	13 97       	sbiw	r26, 0x03	; 3
    39f8:	2f 5f       	subi	r18, 0xFF	; 255
    39fa:	3f 4f       	sbci	r19, 0xFF	; 255
    39fc:	24 30       	cpi	r18, 0x04	; 4
    39fe:	31 05       	cpc	r19, r1
    3a00:	19 f7       	brne	.-58     	; 0x39c8 <CPsd+0x84>
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <CPsd+0xc0>
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <CPsd+0xc2>
    3a06:	00 d0       	rcall	.+0      	; 0x3a08 <CPsd+0xc4>
    3a08:	ed b7       	in	r30, 0x3d	; 61
    3a0a:	fe b7       	in	r31, 0x3e	; 62
    3a0c:	31 96       	adiw	r30, 0x01	; 1
    3a0e:	07 e1       	ldi	r16, 0x17	; 23
    3a10:	13 e0       	ldi	r17, 0x03	; 3
    3a12:	ad b7       	in	r26, 0x3d	; 61
    3a14:	be b7       	in	r27, 0x3e	; 62
    3a16:	12 96       	adiw	r26, 0x02	; 2
    3a18:	1c 93       	st	X, r17
    3a1a:	0e 93       	st	-X, r16
    3a1c:	11 97       	sbiw	r26, 0x01	; 1
    3a1e:	82 eb       	ldi	r24, 0xB2	; 178
    3a20:	91 e0       	ldi	r25, 0x01	; 1
    3a22:	93 83       	std	Z+3, r25	; 0x03
    3a24:	82 83       	std	Z+2, r24	; 0x02
    3a26:	88 ed       	ldi	r24, 0xD8	; 216
    3a28:	91 e0       	ldi	r25, 0x01	; 1
    3a2a:	95 83       	std	Z+5, r25	; 0x05
    3a2c:	84 83       	std	Z+4, r24	; 0x04
    3a2e:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    3a32:	ed b7       	in	r30, 0x3d	; 61
    3a34:	fe b7       	in	r31, 0x3e	; 62
    3a36:	36 96       	adiw	r30, 0x06	; 6
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	fe bf       	out	0x3e, r31	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	ed bf       	out	0x3d, r30	; 61
    3a42:	80 e0       	ldi	r24, 0x00	; 0
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	67 e0       	ldi	r22, 0x07	; 7
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	a8 01       	movw	r20, r16
    3a4c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	
	int x,y,z,d = ((ps * 40 + wa) % 360 < 180)? 1 : -1;
    3a50:	28 e2       	ldi	r18, 0x28	; 40
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	49 81       	ldd	r20, Y+1	; 0x01
    3a56:	5a 81       	ldd	r21, Y+2	; 0x02
    3a58:	42 9f       	mul	r20, r18
    3a5a:	c0 01       	movw	r24, r0
    3a5c:	43 9f       	mul	r20, r19
    3a5e:	90 0d       	add	r25, r0
    3a60:	52 9f       	mul	r21, r18
    3a62:	90 0d       	add	r25, r0
    3a64:	11 24       	eor	r1, r1
    3a66:	20 91 50 02 	lds	r18, 0x0250
    3a6a:	30 91 51 02 	lds	r19, 0x0251
    3a6e:	82 0f       	add	r24, r18
    3a70:	93 1f       	adc	r25, r19
    3a72:	68 e6       	ldi	r22, 0x68	; 104
    3a74:	71 e0       	ldi	r23, 0x01	; 1
    3a76:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    3a7a:	84 3b       	cpi	r24, 0xB4	; 180
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	24 f4       	brge	.+8      	; 0x3a88 <CPsd+0x144>
    3a80:	11 e0       	ldi	r17, 0x01	; 1
    3a82:	21 2e       	mov	r2, r17
    3a84:	31 2c       	mov	r3, r1
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <CPsd+0x14a>
    3a88:	22 24       	eor	r2, r2
    3a8a:	2a 94       	dec	r2
    3a8c:	32 2c       	mov	r3, r2

	tot = O(0,cm,0,0)
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	6b 81       	ldd	r22, Y+3	; 0x03
    3a94:	7c 81       	ldd	r23, Y+4	; 0x04
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	86 01       	movw	r16, r12
    3aa0:	ef 80       	ldd	r14, Y+7	; 0x07
    3aa2:	f8 84       	ldd	r15, Y+8	; 0x08
    3aa4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    3aa8:	90 93 50 03 	sts	0x0350, r25
    3aac:	80 93 4f 03 	sts	0x034F, r24

		if(check == 13 && IR_2) {LE return 1;}
		if(check == 13 && IND_1) {LE return 2;}
		x = z = g_psd[ps] - pm;

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
    3ab0:	c3 01       	movw	r24, r6
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	86 0d       	add	r24, r6
    3abc:	97 1d       	adc	r25, r7
    3abe:	4b ef       	ldi	r20, 0xFB	; 251
    3ac0:	5f ef       	ldi	r21, 0xFF	; 255
    3ac2:	64 9e       	mul	r6, r20
    3ac4:	90 01       	movw	r18, r0
    3ac6:	65 9e       	mul	r6, r21
    3ac8:	30 0d       	add	r19, r0
    3aca:	74 9e       	mul	r7, r20
    3acc:	30 0d       	add	r19, r0
    3ace:	11 24       	eor	r1, r1
		if(check== 12) z = 0, x *= 4;
		x/=2;
		x = LF(sp,-sp,x);


		speed(-x*d, gsp[1], -z*d*v,wa);
    3ad0:	26 9c       	mul	r2, r6
    3ad2:	b0 01       	movw	r22, r0
    3ad4:	27 9c       	mul	r2, r7
    3ad6:	70 0d       	add	r23, r0
    3ad8:	36 9c       	mul	r3, r6
    3ada:	70 0d       	add	r23, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	7a 87       	std	Y+10, r23	; 0x0a
    3ae0:	69 87       	std	Y+9, r22	; 0x09
	tot = O(0,cm,0,0)

	while(1){
		OS			

		if(abs(check) < 9){
    3ae2:	d4 01       	movw	r26, r8
    3ae4:	18 96       	adiw	r26, 0x08	; 8
    3ae6:	ba 8b       	std	Y+18, r27	; 0x12
    3ae8:	a9 8b       	std	Y+17, r26	; 0x11
			if(g_psd[abs(check)]!= 9){
    3aea:	ee 27       	eor	r30, r30
    3aec:	ff 27       	eor	r31, r31
    3aee:	e8 19       	sub	r30, r8
    3af0:	f9 09       	sbc	r31, r9
    3af2:	fc 8b       	std	Y+20, r31	; 0x14
    3af4:	eb 8b       	std	Y+19, r30	; 0x13
			}
		}

		if(check == 13 && IR_2) {LE return 1;}
		if(check == 13 && IND_1) {LE return 2;}
		x = z = g_psd[ps] - pm;
    3af6:	49 81       	ldd	r20, Y+1	; 0x01
    3af8:	5a 81       	ldd	r21, Y+2	; 0x02
    3afa:	42 5e       	subi	r20, 0xE2	; 226
    3afc:	5d 4f       	sbci	r21, 0xFD	; 253
    3afe:	5e 8b       	std	Y+22, r21	; 0x16
    3b00:	4d 8b       	std	Y+21, r20	; 0x15

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
    3b02:	ac 01       	movw	r20, r24
    3b04:	66 27       	eor	r22, r22
    3b06:	57 fd       	sbrc	r21, 7
    3b08:	60 95       	com	r22
    3b0a:	76 2f       	mov	r23, r22
    3b0c:	4f 8b       	std	Y+23, r20	; 0x17
    3b0e:	58 8f       	std	Y+24, r21	; 0x18
    3b10:	69 8f       	std	Y+25, r22	; 0x19
    3b12:	7a 8f       	std	Y+26, r23	; 0x1a
    3b14:	b9 01       	movw	r22, r18
    3b16:	88 27       	eor	r24, r24
    3b18:	77 fd       	sbrc	r23, 7
    3b1a:	80 95       	com	r24
    3b1c:	98 2f       	mov	r25, r24
    3b1e:	6b 8f       	std	Y+27, r22	; 0x1b
    3b20:	7c 8f       	std	Y+28, r23	; 0x1c
    3b22:	8d 8f       	std	Y+29, r24	; 0x1d
    3b24:	9e 8f       	std	Y+30, r25	; 0x1e
		if(cm < 0) z *= -1;
		if(check== 12) z = 0, x *= 4;
		x/=2;
		x = LF(sp,-sp,x);
    3b26:	c6 01       	movw	r24, r12
    3b28:	aa 27       	eor	r26, r26
    3b2a:	97 fd       	sbrc	r25, 7
    3b2c:	a0 95       	com	r26
    3b2e:	ba 2f       	mov	r27, r26
    3b30:	8f 8f       	std	Y+31, r24	; 0x1f
    3b32:	98 a3       	std	Y+32, r25	; 0x20
    3b34:	a9 a3       	std	Y+33, r26	; 0x21
    3b36:	ba a3       	std	Y+34, r27	; 0x22
    3b38:	d0 94       	com	r13
    3b3a:	c1 94       	neg	r12
    3b3c:	d1 08       	sbc	r13, r1
    3b3e:	d3 94       	inc	r13
    3b40:	96 01       	movw	r18, r12
    3b42:	44 27       	eor	r20, r20
    3b44:	37 fd       	sbrc	r19, 7
    3b46:	40 95       	com	r20
    3b48:	54 2f       	mov	r21, r20
    3b4a:	2b a3       	std	Y+35, r18	; 0x23
    3b4c:	3c a3       	std	Y+36, r19	; 0x24
    3b4e:	4d a3       	std	Y+37, r20	; 0x25
    3b50:	5e a3       	std	Y+38, r21	; 0x26
	int x,y,z,d = ((ps * 40 + wa) % 360 < 180)? 1 : -1;

	tot = O(0,cm,0,0)

	while(1){
		OS			
    3b52:	80 91 4f 03 	lds	r24, 0x034F
    3b56:	90 91 50 03 	lds	r25, 0x0350
    3b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5c:	78 85       	ldd	r23, Y+8	; 0x08
    3b5e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		if(abs(check) < 9){
    3b62:	49 89       	ldd	r20, Y+17	; 0x11
    3b64:	5a 89       	ldd	r21, Y+18	; 0x12
    3b66:	41 31       	cpi	r20, 0x11	; 17
    3b68:	51 05       	cpc	r21, r1
    3b6a:	08 f0       	brcs	.+2      	; 0x3b6e <CPsd+0x22a>
    3b6c:	49 c0       	rjmp	.+146    	; 0x3c00 <CPsd+0x2bc>
			if(g_psd[abs(check)]!= 9){
    3b6e:	c4 01       	movw	r24, r8
    3b70:	97 fe       	sbrs	r9, 7
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <CPsd+0x234>
    3b74:	8b 89       	ldd	r24, Y+19	; 0x13
    3b76:	9c 89       	ldd	r25, Y+20	; 0x14
    3b78:	fc 01       	movw	r30, r24
    3b7a:	e2 5e       	subi	r30, 0xE2	; 226
    3b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    3b7e:	20 81       	ld	r18, Z
    3b80:	29 30       	cpi	r18, 0x09	; 9
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <CPsd+0x242>
    3b84:	c6 c0       	rjmp	.+396    	; 0x3d12 <CPsd+0x3ce>
				if(check <= 0) { if(SensorIn(abs(check), pc)) {LE return;} }				
    3b86:	18 14       	cp	r1, r8
    3b88:	19 04       	cpc	r1, r9
    3b8a:	44 f0       	brlt	.+16     	; 0x3b9c <CPsd+0x258>
    3b8c:	6d 81       	ldd	r22, Y+5	; 0x05
    3b8e:	7e 81       	ldd	r23, Y+6	; 0x06
    3b90:	0e 94 3c 11 	call	0x2278	; 0x2278 <SensorIn>
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <CPsd+0x256>
    3b98:	bc c0       	rjmp	.+376    	; 0x3d12 <CPsd+0x3ce>
    3b9a:	96 c1       	rjmp	.+812    	; 0x3ec8 <CPsd+0x584>
				if(check > 0 && g_psd[abs(check)] >= pc) {
    3b9c:	80 81       	ld	r24, Z
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	6d 81       	ldd	r22, Y+5	; 0x05
    3ba2:	7e 81       	ldd	r23, Y+6	; 0x06
    3ba4:	86 17       	cp	r24, r22
    3ba6:	97 07       	cpc	r25, r23
    3ba8:	0c f4       	brge	.+2      	; 0x3bac <CPsd+0x268>
    3baa:	b3 c0       	rjmp	.+358    	; 0x3d12 <CPsd+0x3ce>
					if(ps== check) {speed(0,gsp[1],0,wa); _delay_us(10);}
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	88 15       	cp	r24, r8
    3bb2:	99 05       	cpc	r25, r9
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <CPsd+0x274>
    3bb6:	88 c1       	rjmp	.+784    	; 0x3ec8 <CPsd+0x584>
    3bb8:	c0 90 43 03 	lds	r12, 0x0343
    3bbc:	d0 90 44 03 	lds	r13, 0x0344
    3bc0:	e0 90 45 03 	lds	r14, 0x0345
    3bc4:	f0 90 46 03 	lds	r15, 0x0346
    3bc8:	60 91 50 02 	lds	r22, 0x0250
    3bcc:	70 91 51 02 	lds	r23, 0x0251
    3bd0:	88 27       	eor	r24, r24
    3bd2:	77 fd       	sbrc	r23, 7
    3bd4:	80 95       	com	r24
    3bd6:	98 2f       	mov	r25, r24
    3bd8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3bdc:	4b 01       	movw	r8, r22
    3bde:	5c 01       	movw	r10, r24
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	cb 01       	movw	r24, r22
    3be6:	a7 01       	movw	r20, r14
    3be8:	96 01       	movw	r18, r12
    3bea:	7b 01       	movw	r14, r22
    3bec:	8c 01       	movw	r16, r24
    3bee:	65 01       	movw	r12, r10
    3bf0:	54 01       	movw	r10, r8
    3bf2:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bf6:	91 e3       	ldi	r25, 0x31	; 49
    3bf8:	9a 95       	dec	r25
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <CPsd+0x2b4>
    3bfc:	00 00       	nop
    3bfe:	64 c1       	rjmp	.+712    	; 0x3ec8 <CPsd+0x584>
			
				LE return;}
			}
		}

		if(check == 13 && IR_2) {LE return 1;}
    3c00:	ad e0       	ldi	r26, 0x0D	; 13
    3c02:	8a 16       	cp	r8, r26
    3c04:	91 04       	cpc	r9, r1
    3c06:	09 f0       	breq	.+2      	; 0x3c0a <CPsd+0x2c6>
    3c08:	84 c0       	rjmp	.+264    	; 0x3d12 <CPsd+0x3ce>
    3c0a:	80 91 83 02 	lds	r24, 0x0283
    3c0e:	90 91 84 02 	lds	r25, 0x0284
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	e1 f1       	breq	.+120    	; 0x3c8e <CPsd+0x34a>
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	80 93 89 02 	sts	0x0289, r24
    3c20:	90 93 8a 02 	sts	0x028A, r25
    3c24:	a0 93 8b 02 	sts	0x028B, r26
    3c28:	b0 93 8c 02 	sts	0x028C, r27
    3c2c:	80 91 89 02 	lds	r24, 0x0289
    3c30:	90 91 8a 02 	lds	r25, 0x028A
    3c34:	a0 91 8b 02 	lds	r26, 0x028B
    3c38:	b0 91 8c 02 	lds	r27, 0x028C
    3c3c:	80 93 13 03 	sts	0x0313, r24
    3c40:	90 93 14 03 	sts	0x0314, r25
    3c44:	a0 93 15 03 	sts	0x0315, r26
    3c48:	b0 93 16 03 	sts	0x0316, r27
    3c4c:	80 91 13 03 	lds	r24, 0x0313
    3c50:	90 91 14 03 	lds	r25, 0x0314
    3c54:	a0 91 15 03 	lds	r26, 0x0315
    3c58:	b0 91 16 03 	lds	r27, 0x0316
    3c5c:	80 93 7d 02 	sts	0x027D, r24
    3c60:	90 93 7e 02 	sts	0x027E, r25
    3c64:	a0 93 7f 02 	sts	0x027F, r26
    3c68:	b0 93 80 02 	sts	0x0280, r27
    3c6c:	60 91 7d 02 	lds	r22, 0x027D
    3c70:	70 91 7e 02 	lds	r23, 0x027E
    3c74:	80 91 7f 02 	lds	r24, 0x027F
    3c78:	90 91 80 02 	lds	r25, 0x0280
    3c7c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3c80:	70 93 2b 02 	sts	0x022B, r23
    3c84:	60 93 2a 02 	sts	0x022A, r22
    3c88:	21 e0       	ldi	r18, 0x01	; 1
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	57 c1       	rjmp	.+686    	; 0x3f3c <CPsd+0x5f8>
		if(check == 13 && IND_1) {LE return 2;}
    3c8e:	80 91 8d 02 	lds	r24, 0x028D
    3c92:	90 91 8e 02 	lds	r25, 0x028E
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	e1 f1       	breq	.+120    	; 0x3d12 <CPsd+0x3ce>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	80 93 89 02 	sts	0x0289, r24
    3ca4:	90 93 8a 02 	sts	0x028A, r25
    3ca8:	a0 93 8b 02 	sts	0x028B, r26
    3cac:	b0 93 8c 02 	sts	0x028C, r27
    3cb0:	80 91 89 02 	lds	r24, 0x0289
    3cb4:	90 91 8a 02 	lds	r25, 0x028A
    3cb8:	a0 91 8b 02 	lds	r26, 0x028B
    3cbc:	b0 91 8c 02 	lds	r27, 0x028C
    3cc0:	80 93 13 03 	sts	0x0313, r24
    3cc4:	90 93 14 03 	sts	0x0314, r25
    3cc8:	a0 93 15 03 	sts	0x0315, r26
    3ccc:	b0 93 16 03 	sts	0x0316, r27
    3cd0:	80 91 13 03 	lds	r24, 0x0313
    3cd4:	90 91 14 03 	lds	r25, 0x0314
    3cd8:	a0 91 15 03 	lds	r26, 0x0315
    3cdc:	b0 91 16 03 	lds	r27, 0x0316
    3ce0:	80 93 7d 02 	sts	0x027D, r24
    3ce4:	90 93 7e 02 	sts	0x027E, r25
    3ce8:	a0 93 7f 02 	sts	0x027F, r26
    3cec:	b0 93 80 02 	sts	0x0280, r27
    3cf0:	60 91 7d 02 	lds	r22, 0x027D
    3cf4:	70 91 7e 02 	lds	r23, 0x027E
    3cf8:	80 91 7f 02 	lds	r24, 0x027F
    3cfc:	90 91 80 02 	lds	r25, 0x0280
    3d00:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3d04:	70 93 2b 02 	sts	0x022B, r23
    3d08:	60 93 2a 02 	sts	0x022A, r22
    3d0c:	22 e0       	ldi	r18, 0x02	; 2
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	15 c1       	rjmp	.+554    	; 0x3f3c <CPsd+0x5f8>
		x = z = g_psd[ps] - pm;
    3d12:	ed 89       	ldd	r30, Y+21	; 0x15
    3d14:	fe 89       	ldd	r31, Y+22	; 0x16
    3d16:	80 81       	ld	r24, Z
    3d18:	28 2f       	mov	r18, r24
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d20:	24 1b       	sub	r18, r20
    3d22:	35 0b       	sbc	r19, r21
    3d24:	3e 87       	std	Y+14, r19	; 0x0e
    3d26:	2d 87       	std	Y+13, r18	; 0x0d

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
    3d28:	c9 01       	movw	r24, r18
    3d2a:	37 ff       	sbrs	r19, 7
    3d2c:	03 c0       	rjmp	.+6      	; 0x3d34 <CPsd+0x3f0>
    3d2e:	90 95       	com	r25
    3d30:	81 95       	neg	r24
    3d32:	9f 4f       	sbci	r25, 0xFF	; 255
    3d34:	85 30       	cpi	r24, 0x05	; 5
    3d36:	91 05       	cpc	r25, r1
    3d38:	2c f1       	brlt	.+74     	; 0x3d84 <CPsd+0x440>
    3d3a:	6f 89       	ldd	r22, Y+23	; 0x17
    3d3c:	78 8d       	ldd	r23, Y+24	; 0x18
    3d3e:	89 8d       	ldd	r24, Y+25	; 0x19
    3d40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d42:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3d46:	5b 01       	movw	r10, r22
    3d48:	6c 01       	movw	r12, r24
    3d4a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3d4c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d52:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3d56:	2b 01       	movw	r4, r22
    3d58:	3c 01       	movw	r6, r24
    3d5a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d5c:	be 85       	ldd	r27, Y+14	; 0x0e
    3d5e:	bd 01       	movw	r22, r26
    3d60:	88 27       	eor	r24, r24
    3d62:	77 fd       	sbrc	r23, 7
    3d64:	80 95       	com	r24
    3d66:	98 2f       	mov	r25, r24
    3d68:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3d6c:	7b 01       	movw	r14, r22
    3d6e:	8c 01       	movw	r16, r24
    3d70:	c6 01       	movw	r24, r12
    3d72:	b5 01       	movw	r22, r10
    3d74:	a3 01       	movw	r20, r6
    3d76:	92 01       	movw	r18, r4
    3d78:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    3d7c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3d80:	6b 01       	movw	r12, r22
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <CPsd+0x444>
			}
		}

		if(check == 13 && IR_2) {LE return 1;}
		if(check == 13 && IND_1) {LE return 2;}
		x = z = g_psd[ps] - pm;
    3d84:	cd 84       	ldd	r12, Y+13	; 0x0d
    3d86:	de 84       	ldd	r13, Y+14	; 0x0e

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
		if(cm < 0) z *= -1;
    3d88:	eb 81       	ldd	r30, Y+3	; 0x03
    3d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d8c:	f7 ff       	sbrs	r31, 7
    3d8e:	04 c0       	rjmp	.+8      	; 0x3d98 <CPsd+0x454>
    3d90:	d0 94       	com	r13
    3d92:	c1 94       	neg	r12
    3d94:	d1 08       	sbc	r13, r1
    3d96:	d3 94       	inc	r13
		if(check== 12) z = 0, x *= 4;
    3d98:	fc e0       	ldi	r31, 0x0C	; 12
    3d9a:	8f 16       	cp	r8, r31
    3d9c:	91 04       	cpc	r9, r1
    3d9e:	49 f4       	brne	.+18     	; 0x3db2 <CPsd+0x46e>
    3da0:	ed 84       	ldd	r14, Y+13	; 0x0d
    3da2:	fe 84       	ldd	r15, Y+14	; 0x0e
    3da4:	ee 0c       	add	r14, r14
    3da6:	ff 1c       	adc	r15, r15
    3da8:	ee 0c       	add	r14, r14
    3daa:	ff 1c       	adc	r15, r15
    3dac:	cc 24       	eor	r12, r12
    3dae:	dd 24       	eor	r13, r13
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <CPsd+0x472>
			}
		}

		if(check == 13 && IR_2) {LE return 1;}
		if(check == 13 && IND_1) {LE return 2;}
		x = z = g_psd[ps] - pm;
    3db2:	ed 84       	ldd	r14, Y+13	; 0x0d
    3db4:	fe 84       	ldd	r15, Y+14	; 0x0e

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
		if(cm < 0) z *= -1;
		if(check== 12) z = 0, x *= 4;
		x/=2;
		x = LF(sp,-sp,x);
    3db6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3db8:	78 a1       	ldd	r23, Y+32	; 0x20
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbe:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3dc2:	2b 01       	movw	r4, r22
    3dc4:	3c 01       	movw	r6, r24
    3dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    3dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    3dca:	8d a1       	ldd	r24, Y+37	; 0x25
    3dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    3dce:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3dd2:	6d 87       	std	Y+13, r22	; 0x0d
    3dd4:	7e 87       	std	Y+14, r23	; 0x0e
    3dd6:	8f 87       	std	Y+15, r24	; 0x0f
    3dd8:	98 8b       	std	Y+16, r25	; 0x10
		x = z = g_psd[ps] - pm;

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
		if(cm < 0) z *= -1;
		if(check== 12) z = 0, x *= 4;
		x/=2;
    3dda:	c7 01       	movw	r24, r14
    3ddc:	62 e0       	ldi	r22, 0x02	; 2
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
		x = LF(sp,-sp,x);
    3de4:	88 27       	eor	r24, r24
    3de6:	77 fd       	sbrc	r23, 7
    3de8:	80 95       	com	r24
    3dea:	98 2f       	mov	r25, r24
    3dec:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3df0:	7b 01       	movw	r14, r22
    3df2:	8c 01       	movw	r16, r24
    3df4:	c3 01       	movw	r24, r6
    3df6:	b2 01       	movw	r22, r4
    3df8:	2d 85       	ldd	r18, Y+13	; 0x0d
    3dfa:	3e 85       	ldd	r19, Y+14	; 0x0e
    3dfc:	4f 85       	ldd	r20, Y+15	; 0x0f
    3dfe:	58 89       	ldd	r21, Y+16	; 0x10
    3e00:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>


		speed(-x*d, gsp[1], -z*d*v,wa);
    3e04:	20 91 43 03 	lds	r18, 0x0343
    3e08:	30 91 44 03 	lds	r19, 0x0344
    3e0c:	40 91 45 03 	lds	r20, 0x0345
    3e10:	50 91 46 03 	lds	r21, 0x0346

		if(abs(z) >= 5)  z = LF(v*5,-v*5,z);
		if(cm < 0) z *= -1;
		if(check== 12) z = 0, x *= 4;
		x/=2;
		x = LF(sp,-sp,x);
    3e14:	2f a3       	std	Y+39, r18	; 0x27
    3e16:	38 a7       	std	Y+40, r19	; 0x28
    3e18:	49 a7       	std	Y+41, r20	; 0x29
    3e1a:	5a a7       	std	Y+42, r21	; 0x2a
    3e1c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>


		speed(-x*d, gsp[1], -z*d*v,wa);
    3e20:	88 27       	eor	r24, r24
    3e22:	99 27       	eor	r25, r25
    3e24:	86 1b       	sub	r24, r22
    3e26:	97 0b       	sbc	r25, r23
    3e28:	82 9d       	mul	r24, r2
    3e2a:	b0 01       	movw	r22, r0
    3e2c:	83 9d       	mul	r24, r3
    3e2e:	70 0d       	add	r23, r0
    3e30:	92 9d       	mul	r25, r2
    3e32:	70 0d       	add	r23, r0
    3e34:	11 24       	eor	r1, r1
    3e36:	88 27       	eor	r24, r24
    3e38:	77 fd       	sbrc	r23, 7
    3e3a:	80 95       	com	r24
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3e42:	2b 01       	movw	r4, r22
    3e44:	3c 01       	movw	r6, r24
    3e46:	d0 94       	com	r13
    3e48:	c1 94       	neg	r12
    3e4a:	d1 08       	sbc	r13, r1
    3e4c:	d3 94       	inc	r13
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	c8 9e       	mul	r12, r24
    3e54:	b0 01       	movw	r22, r0
    3e56:	c9 9e       	mul	r12, r25
    3e58:	70 0d       	add	r23, r0
    3e5a:	d8 9e       	mul	r13, r24
    3e5c:	70 0d       	add	r23, r0
    3e5e:	11 24       	eor	r1, r1
    3e60:	88 27       	eor	r24, r24
    3e62:	77 fd       	sbrc	r23, 7
    3e64:	80 95       	com	r24
    3e66:	98 2f       	mov	r25, r24
    3e68:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3e6c:	7b 01       	movw	r14, r22
    3e6e:	8c 01       	movw	r16, r24
    3e70:	60 91 50 02 	lds	r22, 0x0250
    3e74:	70 91 51 02 	lds	r23, 0x0251
    3e78:	88 27       	eor	r24, r24
    3e7a:	77 fd       	sbrc	r23, 7
    3e7c:	80 95       	com	r24
    3e7e:	98 2f       	mov	r25, r24
    3e80:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    3e84:	5b 01       	movw	r10, r22
    3e86:	6c 01       	movw	r12, r24
    3e88:	c3 01       	movw	r24, r6
    3e8a:	b2 01       	movw	r22, r4
    3e8c:	2f a1       	ldd	r18, Y+39	; 0x27
    3e8e:	38 a5       	ldd	r19, Y+40	; 0x28
    3e90:	49 a5       	ldd	r20, Y+41	; 0x29
    3e92:	5a a5       	ldd	r21, Y+42	; 0x2a
    3e94:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>

		if(!oc) oc = 1;
    3e98:	80 91 2a 02 	lds	r24, 0x022A
    3e9c:	90 91 2b 02 	lds	r25, 0x022B
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	31 f4       	brne	.+12     	; 0x3eb0 <CPsd+0x56c>
    3ea4:	a1 e0       	ldi	r26, 0x01	; 1
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	b0 93 2b 02 	sts	0x022B, r27
    3eac:	a0 93 2a 02 	sts	0x022A, r26
		if(oc > tot) {LE return;}
    3eb0:	80 91 4f 03 	lds	r24, 0x034F
    3eb4:	90 91 50 03 	lds	r25, 0x0350
    3eb8:	20 91 2a 02 	lds	r18, 0x022A
    3ebc:	30 91 2b 02 	lds	r19, 0x022B
    3ec0:	82 17       	cp	r24, r18
    3ec2:	93 07       	cpc	r25, r19
    3ec4:	0c f0       	brlt	.+2      	; 0x3ec8 <CPsd+0x584>
    3ec6:	45 ce       	rjmp	.-886    	; 0x3b52 <CPsd+0x20e>
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	dc 01       	movw	r26, r24
    3ece:	80 93 89 02 	sts	0x0289, r24
    3ed2:	90 93 8a 02 	sts	0x028A, r25
    3ed6:	a0 93 8b 02 	sts	0x028B, r26
    3eda:	b0 93 8c 02 	sts	0x028C, r27
    3ede:	80 91 89 02 	lds	r24, 0x0289
    3ee2:	90 91 8a 02 	lds	r25, 0x028A
    3ee6:	a0 91 8b 02 	lds	r26, 0x028B
    3eea:	b0 91 8c 02 	lds	r27, 0x028C
    3eee:	80 93 13 03 	sts	0x0313, r24
    3ef2:	90 93 14 03 	sts	0x0314, r25
    3ef6:	a0 93 15 03 	sts	0x0315, r26
    3efa:	b0 93 16 03 	sts	0x0316, r27
    3efe:	80 91 13 03 	lds	r24, 0x0313
    3f02:	90 91 14 03 	lds	r25, 0x0314
    3f06:	a0 91 15 03 	lds	r26, 0x0315
    3f0a:	b0 91 16 03 	lds	r27, 0x0316
    3f0e:	80 93 7d 02 	sts	0x027D, r24
    3f12:	90 93 7e 02 	sts	0x027E, r25
    3f16:	a0 93 7f 02 	sts	0x027F, r26
    3f1a:	b0 93 80 02 	sts	0x0280, r27
    3f1e:	60 91 7d 02 	lds	r22, 0x027D
    3f22:	70 91 7e 02 	lds	r23, 0x027E
    3f26:	80 91 7f 02 	lds	r24, 0x027F
    3f2a:	90 91 80 02 	lds	r25, 0x0280
    3f2e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    3f32:	70 93 2b 02 	sts	0x022B, r23
    3f36:	60 93 2a 02 	sts	0x022A, r22
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <CPsd+0x5fa>
    3f3c:	c9 01       	movw	r24, r18
		
	}
}
    3f3e:	aa 96       	adiw	r28, 0x2a	; 42
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	ff 90       	pop	r15
    3f54:	ef 90       	pop	r14
    3f56:	df 90       	pop	r13
    3f58:	cf 90       	pop	r12
    3f5a:	bf 90       	pop	r11
    3f5c:	af 90       	pop	r10
    3f5e:	9f 90       	pop	r9
    3f60:	8f 90       	pop	r8
    3f62:	7f 90       	pop	r7
    3f64:	6f 90       	pop	r6
    3f66:	5f 90       	pop	r5
    3f68:	4f 90       	pop	r4
    3f6a:	3f 90       	pop	r3
    3f6c:	2f 90       	pop	r2
    3f6e:	08 95       	ret

00003f70 <Drift>:

void Drift(int x, int y, int z, int sp ,int ac)
{
    3f70:	2f 92       	push	r2
    3f72:	3f 92       	push	r3
    3f74:	4f 92       	push	r4
    3f76:	5f 92       	push	r5
    3f78:	6f 92       	push	r6
    3f7a:	7f 92       	push	r7
    3f7c:	8f 92       	push	r8
    3f7e:	9f 92       	push	r9
    3f80:	af 92       	push	r10
    3f82:	bf 92       	push	r11
    3f84:	cf 92       	push	r12
    3f86:	df 92       	push	r13
    3f88:	ef 92       	push	r14
    3f8a:	ff 92       	push	r15
    3f8c:	0f 93       	push	r16
    3f8e:	1f 93       	push	r17
    3f90:	df 93       	push	r29
    3f92:	cf 93       	push	r28
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	28 97       	sbiw	r28, 0x08	; 8
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	4c 01       	movw	r8, r24
    3fa6:	3b 01       	movw	r6, r22
    3fa8:	6a 01       	movw	r12, r20
    3faa:	59 01       	movw	r10, r18
    3fac:	28 01       	movw	r4, r16
	ginit("Drift");
    3fae:	10 92 03 02 	sts	0x0203, r1
    3fb2:	10 92 02 02 	sts	0x0202, r1
    3fb6:	10 92 50 03 	sts	0x0350, r1
    3fba:	10 92 4f 03 	sts	0x034F, r1
    3fbe:	80 91 4f 03 	lds	r24, 0x034F
    3fc2:	90 91 50 03 	lds	r25, 0x0350
    3fc6:	90 93 2b 02 	sts	0x022B, r25
    3fca:	80 93 2a 02 	sts	0x022A, r24
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	70 e0       	ldi	r23, 0x00	; 0
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	9b 01       	movw	r18, r22
    3fda:	22 0f       	add	r18, r18
    3fdc:	33 1f       	adc	r19, r19
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	f9 01       	movw	r30, r18
    3fe4:	e1 5c       	subi	r30, 0xC1	; 193
    3fe6:	fc 4f       	sbci	r31, 0xFC	; 252
    3fe8:	80 83       	st	Z, r24
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	a2 83       	std	Z+2, r26	; 0x02
    3fee:	b3 83       	std	Z+3, r27	; 0x03
    3ff0:	e0 80       	ld	r14, Z
    3ff2:	f1 80       	ldd	r15, Z+1	; 0x01
    3ff4:	02 81       	ldd	r16, Z+2	; 0x02
    3ff6:	13 81       	ldd	r17, Z+3	; 0x03
    3ff8:	f9 01       	movw	r30, r18
    3ffa:	e3 5d       	subi	r30, 0xD3	; 211
    3ffc:	fc 4f       	sbci	r31, 0xFC	; 252
    3ffe:	e0 82       	st	Z, r14
    4000:	f1 82       	std	Z+1, r15	; 0x01
    4002:	02 83       	std	Z+2, r16	; 0x02
    4004:	13 83       	std	Z+3, r17	; 0x03
    4006:	6f 5f       	subi	r22, 0xFF	; 255
    4008:	7f 4f       	sbci	r23, 0xFF	; 255
    400a:	64 30       	cpi	r22, 0x04	; 4
    400c:	71 05       	cpc	r23, r1
    400e:	21 f7       	brne	.-56     	; 0x3fd8 <Drift+0x68>
    4010:	00 d0       	rcall	.+0      	; 0x4012 <Drift+0xa2>
    4012:	00 d0       	rcall	.+0      	; 0x4014 <Drift+0xa4>
    4014:	00 d0       	rcall	.+0      	; 0x4016 <Drift+0xa6>
    4016:	ed b7       	in	r30, 0x3d	; 61
    4018:	fe b7       	in	r31, 0x3e	; 62
    401a:	31 96       	adiw	r30, 0x01	; 1
    401c:	07 e1       	ldi	r16, 0x17	; 23
    401e:	13 e0       	ldi	r17, 0x03	; 3
    4020:	ad b7       	in	r26, 0x3d	; 61
    4022:	be b7       	in	r27, 0x3e	; 62
    4024:	12 96       	adiw	r26, 0x02	; 2
    4026:	1c 93       	st	X, r17
    4028:	0e 93       	st	-X, r16
    402a:	11 97       	sbiw	r26, 0x01	; 1
    402c:	82 eb       	ldi	r24, 0xB2	; 178
    402e:	91 e0       	ldi	r25, 0x01	; 1
    4030:	93 83       	std	Z+3, r25	; 0x03
    4032:	82 83       	std	Z+2, r24	; 0x02
    4034:	8d ed       	ldi	r24, 0xDD	; 221
    4036:	91 e0       	ldi	r25, 0x01	; 1
    4038:	95 83       	std	Z+5, r25	; 0x05
    403a:	84 83       	std	Z+4, r24	; 0x04
    403c:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    4040:	ed b7       	in	r30, 0x3d	; 61
    4042:	fe b7       	in	r31, 0x3e	; 62
    4044:	36 96       	adiw	r30, 0x06	; 6
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	fe bf       	out	0x3e, r31	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	ed bf       	out	0x3d, r30	; 61
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	67 e0       	ldi	r22, 0x07	; 7
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	a8 01       	movw	r20, r16
    405a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double na = 0;
	
	O(x,y,z,0);
    405e:	c4 01       	movw	r24, r8
    4060:	b3 01       	movw	r22, r6
    4062:	a6 01       	movw	r20, r12
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	85 01       	movw	r16, r10
    406a:	72 01       	movw	r14, r4
    406c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
	sp *= fabs(sp/hypot(msp[0],msp[1]));
    4070:	b5 01       	movw	r22, r10
    4072:	88 27       	eor	r24, r24
    4074:	77 fd       	sbrc	r23, 7
    4076:	80 95       	com	r24
    4078:	98 2f       	mov	r25, r24
    407a:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    407e:	7b 01       	movw	r14, r22
    4080:	8c 01       	movw	r16, r24
    4082:	60 91 2d 03 	lds	r22, 0x032D
    4086:	70 91 2e 03 	lds	r23, 0x032E
    408a:	80 91 2f 03 	lds	r24, 0x032F
    408e:	90 91 30 03 	lds	r25, 0x0330
    4092:	20 91 31 03 	lds	r18, 0x0331
    4096:	30 91 32 03 	lds	r19, 0x0332
    409a:	40 91 33 03 	lds	r20, 0x0333
    409e:	50 91 34 03 	lds	r21, 0x0334
    40a2:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    40a6:	9b 01       	movw	r18, r22
    40a8:	ac 01       	movw	r20, r24
    40aa:	c8 01       	movw	r24, r16
    40ac:	b7 01       	movw	r22, r14
    40ae:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    40b2:	9b 01       	movw	r18, r22
    40b4:	ac 01       	movw	r20, r24
    40b6:	5f 77       	andi	r21, 0x7F	; 127
    40b8:	c8 01       	movw	r24, r16
    40ba:	b7 01       	movw	r22, r14
    40bc:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    40c0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    40c4:	7b 01       	movw	r14, r22
    40c6:	8c 01       	movw	r16, r24
	tot = O(x,y,z,0);
    40c8:	c4 01       	movw	r24, r8
    40ca:	b3 01       	movw	r22, r6
    40cc:	a6 01       	movw	r20, r12
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	87 01       	movw	r16, r14
    40d4:	72 01       	movw	r14, r4
    40d6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    40da:	90 93 50 03 	sts	0x0350, r25
    40de:	80 93 4f 03 	sts	0x034F, r24
}

void Drift(int x, int y, int z, int sp ,int ac)
{
	ginit("Drift");
	double na = 0;
    40e2:	99 24       	eor	r9, r9
    40e4:	88 24       	eor	r8, r8
    40e6:	77 24       	eor	r7, r7
    40e8:	66 24       	eor	r6, r6
	{
		OS

		if(!gtc)
		{
			gtc=1;					
    40ea:	51 e0       	ldi	r21, 0x01	; 1
    40ec:	25 2e       	mov	r2, r21
    40ee:	31 2c       	mov	r3, r1
	O(x,y,z,0);
	sp *= fabs(sp/hypot(msp[0],msp[1]));
	tot = O(x,y,z,0);
	while(1)
	{
		OS
    40f0:	80 91 4f 03 	lds	r24, 0x034F
    40f4:	90 91 50 03 	lds	r25, 0x0350
    40f8:	b2 01       	movw	r22, r4
    40fa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		if(!gtc)
    40fe:	80 91 02 02 	lds	r24, 0x0202
    4102:	90 91 03 02 	lds	r25, 0x0203
    4106:	00 97       	sbiw	r24, 0x00	; 0
    4108:	09 f5       	brne	.+66     	; 0x414c <Drift+0x1dc>
		{
			gtc=1;					
    410a:	30 92 03 02 	sts	0x0203, r3
    410e:	20 92 02 02 	sts	0x0202, r2
			na += -gsp[2]/100;			
    4112:	60 91 47 03 	lds	r22, 0x0347
    4116:	70 91 48 03 	lds	r23, 0x0348
    411a:	80 91 49 03 	lds	r24, 0x0349
    411e:	90 91 4a 03 	lds	r25, 0x034A
    4122:	90 58       	subi	r25, 0x80	; 128
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	48 ec       	ldi	r20, 0xC8	; 200
    412a:	52 e4       	ldi	r21, 0x42	; 66
    412c:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    4130:	9b 01       	movw	r18, r22
    4132:	ac 01       	movw	r20, r24
    4134:	d4 01       	movw	r26, r8
    4136:	f3 01       	movw	r30, r6
    4138:	6b 2f       	mov	r22, r27
    413a:	78 2d       	mov	r23, r8
    413c:	8f 2f       	mov	r24, r31
    413e:	96 2d       	mov	r25, r6
    4140:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4144:	96 2e       	mov	r9, r22
    4146:	87 2e       	mov	r8, r23
    4148:	78 2e       	mov	r7, r24
    414a:	69 2e       	mov	r6, r25
		}

		if(!oc)oc=1;
    414c:	80 91 2a 02 	lds	r24, 0x022A
    4150:	90 91 2b 02 	lds	r25, 0x022B
    4154:	00 97       	sbiw	r24, 0x00	; 0
    4156:	21 f4       	brne	.+8      	; 0x4160 <Drift+0x1f0>
    4158:	30 92 2b 02 	sts	0x022B, r3
    415c:	20 92 2a 02 	sts	0x022A, r2
		if(oc>tot){LE return;}
    4160:	80 91 4f 03 	lds	r24, 0x034F
    4164:	90 91 50 03 	lds	r25, 0x0350
    4168:	20 91 2a 02 	lds	r18, 0x022A
    416c:	30 91 2b 02 	lds	r19, 0x022B
    4170:	82 17       	cp	r24, r18
    4172:	93 07       	cpc	r25, r19
    4174:	0c f0       	brlt	.+2      	; 0x4178 <Drift+0x208>
    4176:	52 c0       	rjmp	.+164    	; 0x421c <Drift+0x2ac>
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	dc 01       	movw	r26, r24
    417e:	80 93 89 02 	sts	0x0289, r24
    4182:	90 93 8a 02 	sts	0x028A, r25
    4186:	a0 93 8b 02 	sts	0x028B, r26
    418a:	b0 93 8c 02 	sts	0x028C, r27
    418e:	80 91 89 02 	lds	r24, 0x0289
    4192:	90 91 8a 02 	lds	r25, 0x028A
    4196:	a0 91 8b 02 	lds	r26, 0x028B
    419a:	b0 91 8c 02 	lds	r27, 0x028C
    419e:	80 93 13 03 	sts	0x0313, r24
    41a2:	90 93 14 03 	sts	0x0314, r25
    41a6:	a0 93 15 03 	sts	0x0315, r26
    41aa:	b0 93 16 03 	sts	0x0316, r27
    41ae:	80 91 13 03 	lds	r24, 0x0313
    41b2:	90 91 14 03 	lds	r25, 0x0314
    41b6:	a0 91 15 03 	lds	r26, 0x0315
    41ba:	b0 91 16 03 	lds	r27, 0x0316
    41be:	80 93 7d 02 	sts	0x027D, r24
    41c2:	90 93 7e 02 	sts	0x027E, r25
    41c6:	a0 93 7f 02 	sts	0x027F, r26
    41ca:	b0 93 80 02 	sts	0x0280, r27
    41ce:	60 91 7d 02 	lds	r22, 0x027D
    41d2:	70 91 7e 02 	lds	r23, 0x027E
    41d6:	80 91 7f 02 	lds	r24, 0x027F
    41da:	90 91 80 02 	lds	r25, 0x0280
    41de:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    41e2:	70 93 2b 02 	sts	0x022B, r23
    41e6:	60 93 2a 02 	sts	0x022A, r22
		speed(gsp[0],gsp[1],gsp[2],wa+na);
	}
}
    41ea:	28 96       	adiw	r28, 0x08	; 8
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	f8 94       	cli
    41f0:	de bf       	out	0x3e, r29	; 62
    41f2:	0f be       	out	0x3f, r0	; 63
    41f4:	cd bf       	out	0x3d, r28	; 61
    41f6:	cf 91       	pop	r28
    41f8:	df 91       	pop	r29
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	df 90       	pop	r13
    4204:	cf 90       	pop	r12
    4206:	bf 90       	pop	r11
    4208:	af 90       	pop	r10
    420a:	9f 90       	pop	r9
    420c:	8f 90       	pop	r8
    420e:	7f 90       	pop	r7
    4210:	6f 90       	pop	r6
    4212:	5f 90       	pop	r5
    4214:	4f 90       	pop	r4
    4216:	3f 90       	pop	r3
    4218:	2f 90       	pop	r2
    421a:	08 95       	ret
			na += -gsp[2]/100;			
		}

		if(!oc)oc=1;
		if(oc>tot){LE return;}
		speed(gsp[0],gsp[1],gsp[2],wa+na);
    421c:	80 91 3f 03 	lds	r24, 0x033F
    4220:	90 91 40 03 	lds	r25, 0x0340
    4224:	a0 91 41 03 	lds	r26, 0x0341
    4228:	b0 91 42 03 	lds	r27, 0x0342
    422c:	89 83       	std	Y+1, r24	; 0x01
    422e:	9a 83       	std	Y+2, r25	; 0x02
    4230:	ab 83       	std	Y+3, r26	; 0x03
    4232:	bc 83       	std	Y+4, r27	; 0x04
    4234:	80 91 43 03 	lds	r24, 0x0343
    4238:	90 91 44 03 	lds	r25, 0x0344
    423c:	a0 91 45 03 	lds	r26, 0x0345
    4240:	b0 91 46 03 	lds	r27, 0x0346
    4244:	8d 83       	std	Y+5, r24	; 0x05
    4246:	9e 83       	std	Y+6, r25	; 0x06
    4248:	af 83       	std	Y+7, r26	; 0x07
    424a:	b8 87       	std	Y+8, r27	; 0x08
    424c:	e0 90 47 03 	lds	r14, 0x0347
    4250:	f0 90 48 03 	lds	r15, 0x0348
    4254:	00 91 49 03 	lds	r16, 0x0349
    4258:	10 91 4a 03 	lds	r17, 0x034A
    425c:	60 91 50 02 	lds	r22, 0x0250
    4260:	70 91 51 02 	lds	r23, 0x0251
    4264:	88 27       	eor	r24, r24
    4266:	77 fd       	sbrc	r23, 7
    4268:	80 95       	com	r24
    426a:	98 2f       	mov	r25, r24
    426c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4270:	d4 01       	movw	r26, r8
    4272:	f3 01       	movw	r30, r6
    4274:	2b 2f       	mov	r18, r27
    4276:	38 2d       	mov	r19, r8
    4278:	4f 2f       	mov	r20, r31
    427a:	56 2d       	mov	r21, r6
    427c:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4280:	5b 01       	movw	r10, r22
    4282:	6c 01       	movw	r12, r24
    4284:	69 81       	ldd	r22, Y+1	; 0x01
    4286:	7a 81       	ldd	r23, Y+2	; 0x02
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	9c 81       	ldd	r25, Y+4	; 0x04
    428c:	2d 81       	ldd	r18, Y+5	; 0x05
    428e:	3e 81       	ldd	r19, Y+6	; 0x06
    4290:	4f 81       	ldd	r20, Y+7	; 0x07
    4292:	58 85       	ldd	r21, Y+8	; 0x08
    4294:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	}
    4298:	2b cf       	rjmp	.-426    	; 0x40f0 <Drift+0x180>

0000429a <Ot>:
}


void Ot(int r, int z, int ang ,int sp ,int ac)
{
    429a:	2f 92       	push	r2
    429c:	3f 92       	push	r3
    429e:	4f 92       	push	r4
    42a0:	5f 92       	push	r5
    42a2:	6f 92       	push	r6
    42a4:	7f 92       	push	r7
    42a6:	8f 92       	push	r8
    42a8:	9f 92       	push	r9
    42aa:	af 92       	push	r10
    42ac:	bf 92       	push	r11
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	df 93       	push	r29
    42bc:	cf 93       	push	r28
    42be:	00 d0       	rcall	.+0      	; 0x42c0 <Ot+0x26>
    42c0:	00 d0       	rcall	.+0      	; 0x42c2 <Ot+0x28>
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <Ot+0x2a>
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	7c 01       	movw	r14, r24
    42ca:	96 2e       	mov	r9, r22
    42cc:	87 2e       	mov	r8, r23
    42ce:	1a 01       	movw	r2, r20
    42d0:	59 01       	movw	r10, r18
    42d2:	1a 83       	std	Y+2, r17	; 0x02
    42d4:	09 83       	std	Y+1, r16	; 0x01
	ginit("Ot");
    42d6:	10 92 03 02 	sts	0x0203, r1
    42da:	10 92 02 02 	sts	0x0202, r1
    42de:	10 92 50 03 	sts	0x0350, r1
    42e2:	10 92 4f 03 	sts	0x034F, r1
    42e6:	80 91 4f 03 	lds	r24, 0x034F
    42ea:	90 91 50 03 	lds	r25, 0x0350
    42ee:	90 93 2b 02 	sts	0x022B, r25
    42f2:	80 93 2a 02 	sts	0x022A, r24
    42f6:	60 e0       	ldi	r22, 0x00	; 0
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	dc 01       	movw	r26, r24
    4300:	49 2d       	mov	r20, r9
    4302:	58 2d       	mov	r21, r8
    4304:	9b 01       	movw	r18, r22
    4306:	22 0f       	add	r18, r18
    4308:	33 1f       	adc	r19, r19
    430a:	22 0f       	add	r18, r18
    430c:	33 1f       	adc	r19, r19
    430e:	f9 01       	movw	r30, r18
    4310:	e1 5c       	subi	r30, 0xC1	; 193
    4312:	fc 4f       	sbci	r31, 0xFC	; 252
    4314:	80 83       	st	Z, r24
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	a2 83       	std	Z+2, r26	; 0x02
    431a:	b3 83       	std	Z+3, r27	; 0x03
    431c:	60 80       	ld	r6, Z
    431e:	71 80       	ldd	r7, Z+1	; 0x01
    4320:	82 80       	ldd	r8, Z+2	; 0x02
    4322:	93 80       	ldd	r9, Z+3	; 0x03
    4324:	23 5d       	subi	r18, 0xD3	; 211
    4326:	3c 4f       	sbci	r19, 0xFC	; 252
    4328:	f9 01       	movw	r30, r18
    432a:	60 82       	st	Z, r6
    432c:	71 82       	std	Z+1, r7	; 0x01
    432e:	82 82       	std	Z+2, r8	; 0x02
    4330:	93 82       	std	Z+3, r9	; 0x03
    4332:	6f 5f       	subi	r22, 0xFF	; 255
    4334:	7f 4f       	sbci	r23, 0xFF	; 255
    4336:	64 30       	cpi	r22, 0x04	; 4
    4338:	71 05       	cpc	r23, r1
    433a:	21 f7       	brne	.-56     	; 0x4304 <Ot+0x6a>
    433c:	94 2e       	mov	r9, r20
    433e:	85 2e       	mov	r8, r21
    4340:	00 d0       	rcall	.+0      	; 0x4342 <Ot+0xa8>
    4342:	00 d0       	rcall	.+0      	; 0x4344 <Ot+0xaa>
    4344:	00 d0       	rcall	.+0      	; 0x4346 <Ot+0xac>
    4346:	ed b7       	in	r30, 0x3d	; 61
    4348:	fe b7       	in	r31, 0x3e	; 62
    434a:	31 96       	adiw	r30, 0x01	; 1
    434c:	07 e1       	ldi	r16, 0x17	; 23
    434e:	13 e0       	ldi	r17, 0x03	; 3
    4350:	ad b7       	in	r26, 0x3d	; 61
    4352:	be b7       	in	r27, 0x3e	; 62
    4354:	12 96       	adiw	r26, 0x02	; 2
    4356:	1c 93       	st	X, r17
    4358:	0e 93       	st	-X, r16
    435a:	11 97       	sbiw	r26, 0x01	; 1
    435c:	82 eb       	ldi	r24, 0xB2	; 178
    435e:	91 e0       	ldi	r25, 0x01	; 1
    4360:	93 83       	std	Z+3, r25	; 0x03
    4362:	82 83       	std	Z+2, r24	; 0x02
    4364:	83 ee       	ldi	r24, 0xE3	; 227
    4366:	91 e0       	ldi	r25, 0x01	; 1
    4368:	95 83       	std	Z+5, r25	; 0x05
    436a:	84 83       	std	Z+4, r24	; 0x04
    436c:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    4370:	ed b7       	in	r30, 0x3d	; 61
    4372:	fe b7       	in	r31, 0x3e	; 62
    4374:	36 96       	adiw	r30, 0x06	; 6
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	fe bf       	out	0x3e, r31	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	ed bf       	out	0x3d, r30	; 61
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	67 e0       	ldi	r22, 0x07	; 7
    4386:	70 e0       	ldi	r23, 0x00	; 0
    4388:	a8 01       	movw	r20, r16
    438a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double na=0,na2=0, v[3];
	double y= M_PI * r * abs(z)/180;
    438e:	b7 01       	movw	r22, r14
    4390:	88 27       	eor	r24, r24
    4392:	77 fd       	sbrc	r23, 7
    4394:	80 95       	com	r24
    4396:	98 2f       	mov	r25, r24
    4398:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    439c:	2b ed       	ldi	r18, 0xDB	; 219
    439e:	3f e0       	ldi	r19, 0x0F	; 15
    43a0:	49 e4       	ldi	r20, 0x49	; 73
    43a2:	50 e4       	ldi	r21, 0x40	; 64
    43a4:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    43a8:	7b 01       	movw	r14, r22
    43aa:	8c 01       	movw	r16, r24
    43ac:	c4 01       	movw	r24, r8
    43ae:	69 2f       	mov	r22, r25
    43b0:	78 2f       	mov	r23, r24
    43b2:	77 ff       	sbrs	r23, 7
    43b4:	03 c0       	rjmp	.+6      	; 0x43bc <Ot+0x122>
    43b6:	70 95       	com	r23
    43b8:	61 95       	neg	r22
    43ba:	7f 4f       	sbci	r23, 0xFF	; 255
    43bc:	88 27       	eor	r24, r24
    43be:	77 fd       	sbrc	r23, 7
    43c0:	80 95       	com	r24
    43c2:	98 2f       	mov	r25, r24
    43c4:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    43c8:	9b 01       	movw	r18, r22
    43ca:	ac 01       	movw	r20, r24
    43cc:	c8 01       	movw	r24, r16
    43ce:	b7 01       	movw	r22, r14
    43d0:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	44 e3       	ldi	r20, 0x34	; 52
    43da:	53 e4       	ldi	r21, 0x43	; 67
    43dc:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
	O(0,y,z,ang);
    43e0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    43e4:	2b 01       	movw	r4, r22
    43e6:	3c 01       	movw	r6, r24
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	b2 01       	movw	r22, r4
    43ee:	49 2d       	mov	r20, r9
    43f0:	58 2d       	mov	r21, r8
    43f2:	91 01       	movw	r18, r2
    43f4:	85 01       	movw	r16, r10
    43f6:	e9 80       	ldd	r14, Y+1	; 0x01
    43f8:	fa 80       	ldd	r15, Y+2	; 0x02
    43fa:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
	sp *= fabs(sp/msp[1]);
    43fe:	b5 01       	movw	r22, r10
    4400:	88 27       	eor	r24, r24
    4402:	77 fd       	sbrc	r23, 7
    4404:	80 95       	com	r24
    4406:	98 2f       	mov	r25, r24
    4408:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    440c:	7b 01       	movw	r14, r22
    440e:	8c 01       	movw	r16, r24
    4410:	20 91 31 03 	lds	r18, 0x0331
    4414:	30 91 32 03 	lds	r19, 0x0332
    4418:	40 91 33 03 	lds	r20, 0x0333
    441c:	50 91 34 03 	lds	r21, 0x0334
    4420:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    4424:	9b 01       	movw	r18, r22
    4426:	ac 01       	movw	r20, r24
    4428:	5f 77       	andi	r21, 0x7F	; 127
    442a:	c8 01       	movw	r24, r16
    442c:	b7 01       	movw	r22, r14
    442e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    4432:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4436:	7b 01       	movw	r14, r22
    4438:	8c 01       	movw	r16, r24
	tot = O(0,y,z,ang);
    443a:	80 e0       	ldi	r24, 0x00	; 0
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	b2 01       	movw	r22, r4
    4440:	49 2d       	mov	r20, r9
    4442:	58 2d       	mov	r21, r8
    4444:	91 01       	movw	r18, r2
    4446:	87 01       	movw	r16, r14
    4448:	e9 80       	ldd	r14, Y+1	; 0x01
    444a:	fa 80       	ldd	r15, Y+2	; 0x02
    444c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    4450:	90 93 50 03 	sts	0x0350, r25
    4454:	80 93 4f 03 	sts	0x034F, r24


void Ot(int r, int z, int ang ,int sp ,int ac)
{
	ginit("Ot");
	double na=0,na2=0, v[3];
    4458:	99 24       	eor	r9, r9
    445a:	88 24       	eor	r8, r8
    445c:	77 24       	eor	r7, r7
    445e:	66 24       	eor	r6, r6
    4460:	55 24       	eor	r5, r5
    4462:	44 24       	eor	r4, r4
    4464:	33 24       	eor	r3, r3
    4466:	22 24       	eor	r2, r2
	tot = O(0,y,z,ang);

	while(1)
	{		

		OS
    4468:	80 91 4f 03 	lds	r24, 0x034F
    446c:	90 91 50 03 	lds	r25, 0x0350
    4470:	69 81       	ldd	r22, Y+1	; 0x01
    4472:	7a 81       	ldd	r23, Y+2	; 0x02
    4474:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>
		if(!gtc)
    4478:	80 91 02 02 	lds	r24, 0x0202
    447c:	90 91 03 02 	lds	r25, 0x0203
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	09 f0       	breq	.+2      	; 0x4486 <Ot+0x1ec>
    4484:	3f c0       	rjmp	.+126    	; 0x4504 <Ot+0x26a>
		{
			gtc=1;
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	90 93 03 02 	sts	0x0203, r25
    448e:	80 93 02 02 	sts	0x0202, r24
			na += gsp[2]/100;
    4492:	60 91 47 03 	lds	r22, 0x0347
    4496:	70 91 48 03 	lds	r23, 0x0348
    449a:	80 91 49 03 	lds	r24, 0x0349
    449e:	90 91 4a 03 	lds	r25, 0x034A
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	48 ec       	ldi	r20, 0xC8	; 200
    44a8:	52 e4       	ldi	r21, 0x42	; 66
    44aa:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    44ae:	9b 01       	movw	r18, r22
    44b0:	ac 01       	movw	r20, r24
    44b2:	d2 01       	movw	r26, r4
    44b4:	f1 01       	movw	r30, r2
    44b6:	6b 2f       	mov	r22, r27
    44b8:	74 2d       	mov	r23, r4
    44ba:	8f 2f       	mov	r24, r31
    44bc:	92 2d       	mov	r25, r2
    44be:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    44c2:	56 2e       	mov	r5, r22
    44c4:	47 2e       	mov	r4, r23
    44c6:	38 2e       	mov	r3, r24
    44c8:	29 2e       	mov	r2, r25
			na2 += -gsp[3]/100;			
    44ca:	60 91 4b 03 	lds	r22, 0x034B
    44ce:	70 91 4c 03 	lds	r23, 0x034C
    44d2:	80 91 4d 03 	lds	r24, 0x034D
    44d6:	90 91 4e 03 	lds	r25, 0x034E
    44da:	90 58       	subi	r25, 0x80	; 128
    44dc:	20 e0       	ldi	r18, 0x00	; 0
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	48 ec       	ldi	r20, 0xC8	; 200
    44e2:	52 e4       	ldi	r21, 0x42	; 66
    44e4:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    44e8:	9b 01       	movw	r18, r22
    44ea:	ac 01       	movw	r20, r24
    44ec:	d4 01       	movw	r26, r8
    44ee:	f3 01       	movw	r30, r6
    44f0:	6b 2f       	mov	r22, r27
    44f2:	78 2d       	mov	r23, r8
    44f4:	8f 2f       	mov	r24, r31
    44f6:	96 2d       	mov	r25, r6
    44f8:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    44fc:	96 2e       	mov	r9, r22
    44fe:	87 2e       	mov	r8, r23
    4500:	78 2e       	mov	r7, r24
    4502:	69 2e       	mov	r6, r25
		}	

		if(!oc)oc=1;
    4504:	80 91 2a 02 	lds	r24, 0x022A
    4508:	90 91 2b 02 	lds	r25, 0x022B
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	31 f4       	brne	.+12     	; 0x451c <Ot+0x282>
    4510:	a1 e0       	ldi	r26, 0x01	; 1
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	b0 93 2b 02 	sts	0x022B, r27
    4518:	a0 93 2a 02 	sts	0x022A, r26
		if(oc>tot){ LE return;}
    451c:	80 91 4f 03 	lds	r24, 0x034F
    4520:	90 91 50 03 	lds	r25, 0x0350
    4524:	20 91 2a 02 	lds	r18, 0x022A
    4528:	30 91 2b 02 	lds	r19, 0x022B
    452c:	82 17       	cp	r24, r18
    452e:	93 07       	cpc	r25, r19
    4530:	0c f0       	brlt	.+2      	; 0x4534 <Ot+0x29a>
    4532:	52 c0       	rjmp	.+164    	; 0x45d8 <Ot+0x33e>
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	dc 01       	movw	r26, r24
    453a:	80 93 89 02 	sts	0x0289, r24
    453e:	90 93 8a 02 	sts	0x028A, r25
    4542:	a0 93 8b 02 	sts	0x028B, r26
    4546:	b0 93 8c 02 	sts	0x028C, r27
    454a:	80 91 89 02 	lds	r24, 0x0289
    454e:	90 91 8a 02 	lds	r25, 0x028A
    4552:	a0 91 8b 02 	lds	r26, 0x028B
    4556:	b0 91 8c 02 	lds	r27, 0x028C
    455a:	80 93 13 03 	sts	0x0313, r24
    455e:	90 93 14 03 	sts	0x0314, r25
    4562:	a0 93 15 03 	sts	0x0315, r26
    4566:	b0 93 16 03 	sts	0x0316, r27
    456a:	80 91 13 03 	lds	r24, 0x0313
    456e:	90 91 14 03 	lds	r25, 0x0314
    4572:	a0 91 15 03 	lds	r26, 0x0315
    4576:	b0 91 16 03 	lds	r27, 0x0316
    457a:	80 93 7d 02 	sts	0x027D, r24
    457e:	90 93 7e 02 	sts	0x027E, r25
    4582:	a0 93 7f 02 	sts	0x027F, r26
    4586:	b0 93 80 02 	sts	0x0280, r27
    458a:	60 91 7d 02 	lds	r22, 0x027D
    458e:	70 91 7e 02 	lds	r23, 0x027E
    4592:	80 91 7f 02 	lds	r24, 0x027F
    4596:	90 91 80 02 	lds	r25, 0x0280
    459a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    459e:	70 93 2b 02 	sts	0x022B, r23
    45a2:	60 93 2a 02 	sts	0x022A, r22
		speed(0, gsp[1] ,gsp[3], wa+na+na2);
	}
}
    45a6:	26 96       	adiw	r28, 0x06	; 6
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	ff 90       	pop	r15
    45bc:	ef 90       	pop	r14
    45be:	df 90       	pop	r13
    45c0:	cf 90       	pop	r12
    45c2:	bf 90       	pop	r11
    45c4:	af 90       	pop	r10
    45c6:	9f 90       	pop	r9
    45c8:	8f 90       	pop	r8
    45ca:	7f 90       	pop	r7
    45cc:	6f 90       	pop	r6
    45ce:	5f 90       	pop	r5
    45d0:	4f 90       	pop	r4
    45d2:	3f 90       	pop	r3
    45d4:	2f 90       	pop	r2
    45d6:	08 95       	ret
			na2 += -gsp[3]/100;			
		}	

		if(!oc)oc=1;
		if(oc>tot){ LE return;}
		speed(0, gsp[1] ,gsp[3], wa+na+na2);
    45d8:	80 91 43 03 	lds	r24, 0x0343
    45dc:	90 91 44 03 	lds	r25, 0x0344
    45e0:	a0 91 45 03 	lds	r26, 0x0345
    45e4:	b0 91 46 03 	lds	r27, 0x0346
    45e8:	8b 83       	std	Y+3, r24	; 0x03
    45ea:	9c 83       	std	Y+4, r25	; 0x04
    45ec:	ad 83       	std	Y+5, r26	; 0x05
    45ee:	be 83       	std	Y+6, r27	; 0x06
    45f0:	e0 90 4b 03 	lds	r14, 0x034B
    45f4:	f0 90 4c 03 	lds	r15, 0x034C
    45f8:	00 91 4d 03 	lds	r16, 0x034D
    45fc:	10 91 4e 03 	lds	r17, 0x034E
    4600:	60 91 50 02 	lds	r22, 0x0250
    4604:	70 91 51 02 	lds	r23, 0x0251
    4608:	88 27       	eor	r24, r24
    460a:	77 fd       	sbrc	r23, 7
    460c:	80 95       	com	r24
    460e:	98 2f       	mov	r25, r24
    4610:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4614:	d2 01       	movw	r26, r4
    4616:	f1 01       	movw	r30, r2
    4618:	2b 2f       	mov	r18, r27
    461a:	34 2d       	mov	r19, r4
    461c:	4f 2f       	mov	r20, r31
    461e:	52 2d       	mov	r21, r2
    4620:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4624:	d4 01       	movw	r26, r8
    4626:	f3 01       	movw	r30, r6
    4628:	2b 2f       	mov	r18, r27
    462a:	38 2d       	mov	r19, r8
    462c:	4f 2f       	mov	r20, r31
    462e:	56 2d       	mov	r21, r6
    4630:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4634:	5b 01       	movw	r10, r22
    4636:	6c 01       	movw	r12, r24
    4638:	60 e0       	ldi	r22, 0x00	; 0
    463a:	70 e0       	ldi	r23, 0x00	; 0
    463c:	cb 01       	movw	r24, r22
    463e:	2b 81       	ldd	r18, Y+3	; 0x03
    4640:	3c 81       	ldd	r19, Y+4	; 0x04
    4642:	4d 81       	ldd	r20, Y+5	; 0x05
    4644:	5e 81       	ldd	r21, Y+6	; 0x06
    4646:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	}
    464a:	0e cf       	rjmp	.-484    	; 0x4468 <Ot+0x1ce>

0000464c <At>:
}


void At(double z, int sp)
{
    464c:	2f 92       	push	r2
    464e:	3f 92       	push	r3
    4650:	4f 92       	push	r4
    4652:	5f 92       	push	r5
    4654:	6f 92       	push	r6
    4656:	7f 92       	push	r7
    4658:	8f 92       	push	r8
    465a:	9f 92       	push	r9
    465c:	af 92       	push	r10
    465e:	bf 92       	push	r11
    4660:	cf 92       	push	r12
    4662:	df 92       	push	r13
    4664:	ef 92       	push	r14
    4666:	ff 92       	push	r15
    4668:	0f 93       	push	r16
    466a:	1f 93       	push	r17
    466c:	df 93       	push	r29
    466e:	cf 93       	push	r28
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    4674:	28 97       	sbiw	r28, 0x08	; 8
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	0f be       	out	0x3f, r0	; 63
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	6d 83       	std	Y+5, r22	; 0x05
    4682:	7e 83       	std	Y+6, r23	; 0x06
    4684:	8f 83       	std	Y+7, r24	; 0x07
    4686:	98 87       	std	Y+8, r25	; 0x08
    4688:	7a 01       	movw	r14, r20
	ginit("At");
    468a:	10 92 03 02 	sts	0x0203, r1
    468e:	10 92 02 02 	sts	0x0202, r1
    4692:	10 92 50 03 	sts	0x0350, r1
    4696:	10 92 4f 03 	sts	0x034F, r1
    469a:	80 91 4f 03 	lds	r24, 0x034F
    469e:	90 91 50 03 	lds	r25, 0x0350
    46a2:	90 93 2b 02 	sts	0x022B, r25
    46a6:	80 93 2a 02 	sts	0x022A, r24
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	70 e0       	ldi	r23, 0x00	; 0
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	dc 01       	movw	r26, r24
    46b4:	8b 01       	movw	r16, r22
    46b6:	00 0f       	add	r16, r16
    46b8:	11 1f       	adc	r17, r17
    46ba:	00 0f       	add	r16, r16
    46bc:	11 1f       	adc	r17, r17
    46be:	98 01       	movw	r18, r16
    46c0:	21 5c       	subi	r18, 0xC1	; 193
    46c2:	3c 4f       	sbci	r19, 0xFC	; 252
    46c4:	f9 01       	movw	r30, r18
    46c6:	80 83       	st	Z, r24
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	a2 83       	std	Z+2, r26	; 0x02
    46cc:	b3 83       	std	Z+3, r27	; 0x03
    46ce:	20 81       	ld	r18, Z
    46d0:	31 81       	ldd	r19, Z+1	; 0x01
    46d2:	42 81       	ldd	r20, Z+2	; 0x02
    46d4:	53 81       	ldd	r21, Z+3	; 0x03
    46d6:	f8 01       	movw	r30, r16
    46d8:	e3 5d       	subi	r30, 0xD3	; 211
    46da:	fc 4f       	sbci	r31, 0xFC	; 252
    46dc:	20 83       	st	Z, r18
    46de:	31 83       	std	Z+1, r19	; 0x01
    46e0:	42 83       	std	Z+2, r20	; 0x02
    46e2:	53 83       	std	Z+3, r21	; 0x03
    46e4:	6f 5f       	subi	r22, 0xFF	; 255
    46e6:	7f 4f       	sbci	r23, 0xFF	; 255
    46e8:	64 30       	cpi	r22, 0x04	; 4
    46ea:	71 05       	cpc	r23, r1
    46ec:	19 f7       	brne	.-58     	; 0x46b4 <At+0x68>
    46ee:	00 d0       	rcall	.+0      	; 0x46f0 <At+0xa4>
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <At+0xa6>
    46f2:	00 d0       	rcall	.+0      	; 0x46f4 <At+0xa8>
    46f4:	ed b7       	in	r30, 0x3d	; 61
    46f6:	fe b7       	in	r31, 0x3e	; 62
    46f8:	31 96       	adiw	r30, 0x01	; 1
    46fa:	07 e1       	ldi	r16, 0x17	; 23
    46fc:	13 e0       	ldi	r17, 0x03	; 3
    46fe:	ad b7       	in	r26, 0x3d	; 61
    4700:	be b7       	in	r27, 0x3e	; 62
    4702:	12 96       	adiw	r26, 0x02	; 2
    4704:	1c 93       	st	X, r17
    4706:	0e 93       	st	-X, r16
    4708:	11 97       	sbiw	r26, 0x01	; 1
    470a:	82 eb       	ldi	r24, 0xB2	; 178
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	93 83       	std	Z+3, r25	; 0x03
    4710:	82 83       	std	Z+2, r24	; 0x02
    4712:	86 ee       	ldi	r24, 0xE6	; 230
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	95 83       	std	Z+5, r25	; 0x05
    4718:	84 83       	std	Z+4, r24	; 0x04
    471a:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    471e:	ed b7       	in	r30, 0x3d	; 61
    4720:	fe b7       	in	r31, 0x3e	; 62
    4722:	36 96       	adiw	r30, 0x06	; 6
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	fe bf       	out	0x3e, r31	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	ed bf       	out	0x3d, r30	; 61
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	67 e0       	ldi	r22, 0x07	; 7
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	a8 01       	movw	r20, r16
    4738:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>

	double e, s = gyro;
    473c:	80 91 68 02 	lds	r24, 0x0268
    4740:	90 91 69 02 	lds	r25, 0x0269
    4744:	a0 91 6a 02 	lds	r26, 0x026A
    4748:	b0 91 6b 02 	lds	r27, 0x026B
    474c:	89 83       	std	Y+1, r24	; 0x01
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	ab 83       	std	Y+3, r26	; 0x03
    4752:	bc 83       	std	Y+4, r27	; 0x04
	zacf = 0.2;
    4754:	8d ec       	ldi	r24, 0xCD	; 205
    4756:	9c ec       	ldi	r25, 0xCC	; 204
    4758:	ac e4       	ldi	r26, 0x4C	; 76
    475a:	be e3       	ldi	r27, 0x3E	; 62
    475c:	80 93 18 02 	sts	0x0218, r24
    4760:	90 93 19 02 	sts	0x0219, r25
    4764:	a0 93 1a 02 	sts	0x021A, r26
    4768:	b0 93 1b 02 	sts	0x021B, r27
	while(1)
	{		
		e = (s-gyro) -z;
		e = (double)LF(sp, -sp, e * 5);
    476c:	37 01       	movw	r6, r14
    476e:	88 24       	eor	r8, r8
    4770:	77 fc       	sbrc	r7, 7
    4772:	80 94       	com	r8
    4774:	98 2c       	mov	r9, r8
    4776:	f0 94       	com	r15
    4778:	e1 94       	neg	r14
    477a:	f1 08       	sbc	r15, r1
    477c:	f3 94       	inc	r15
    477e:	17 01       	movw	r2, r14
    4780:	44 24       	eor	r4, r4
    4782:	37 fc       	sbrc	r3, 7
    4784:	40 94       	com	r4
    4786:	54 2c       	mov	r5, r4

	double e, s = gyro;
	zacf = 0.2;
	while(1)
	{		
		e = (s-gyro) -z;
    4788:	20 91 68 02 	lds	r18, 0x0268
    478c:	30 91 69 02 	lds	r19, 0x0269
    4790:	40 91 6a 02 	lds	r20, 0x026A
    4794:	50 91 6b 02 	lds	r21, 0x026B
    4798:	69 81       	ldd	r22, Y+1	; 0x01
    479a:	7a 81       	ldd	r23, Y+2	; 0x02
    479c:	8b 81       	ldd	r24, Y+3	; 0x03
    479e:	9c 81       	ldd	r25, Y+4	; 0x04
    47a0:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    47a4:	2d 81       	ldd	r18, Y+5	; 0x05
    47a6:	3e 81       	ldd	r19, Y+6	; 0x06
    47a8:	4f 81       	ldd	r20, Y+7	; 0x07
    47aa:	58 85       	ldd	r21, Y+8	; 0x08
    47ac:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
		e = (double)LF(sp, -sp, e * 5);
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	40 ea       	ldi	r20, 0xA0	; 160
    47b6:	50 e4       	ldi	r21, 0x40	; 64
    47b8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    47bc:	d6 2e       	mov	r13, r22
    47be:	c7 2e       	mov	r12, r23
    47c0:	b8 2e       	mov	r11, r24
    47c2:	a9 2e       	mov	r10, r25
    47c4:	c4 01       	movw	r24, r8
    47c6:	b3 01       	movw	r22, r6
    47c8:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    47cc:	7b 01       	movw	r14, r22
    47ce:	8c 01       	movw	r16, r24
    47d0:	c2 01       	movw	r24, r4
    47d2:	b1 01       	movw	r22, r2
    47d4:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    47d8:	9b 01       	movw	r18, r22
    47da:	ac 01       	movw	r20, r24
    47dc:	c8 01       	movw	r24, r16
    47de:	b7 01       	movw	r22, r14
    47e0:	ed 2d       	mov	r30, r13
    47e2:	fc 2d       	mov	r31, r12
    47e4:	ab 2d       	mov	r26, r11
    47e6:	ba 2d       	mov	r27, r10
    47e8:	7f 01       	movw	r14, r30
    47ea:	8d 01       	movw	r16, r26
    47ec:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    47f0:	7b 01       	movw	r14, r22
    47f2:	8c 01       	movw	r16, r24

		if(fabs(e) <= 0.1) {LE return;}
    47f4:	9f 77       	andi	r25, 0x7F	; 127
    47f6:	2d ec       	ldi	r18, 0xCD	; 205
    47f8:	3c ec       	ldi	r19, 0xCC	; 204
    47fa:	4c ec       	ldi	r20, 0xCC	; 204
    47fc:	5d e3       	ldi	r21, 0x3D	; 61
    47fe:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    4802:	18 16       	cp	r1, r24
    4804:	0c f4       	brge	.+2      	; 0x4808 <At+0x1bc>
    4806:	52 c0       	rjmp	.+164    	; 0x48ac <At+0x260>
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	dc 01       	movw	r26, r24
    480e:	80 93 89 02 	sts	0x0289, r24
    4812:	90 93 8a 02 	sts	0x028A, r25
    4816:	a0 93 8b 02 	sts	0x028B, r26
    481a:	b0 93 8c 02 	sts	0x028C, r27
    481e:	80 91 89 02 	lds	r24, 0x0289
    4822:	90 91 8a 02 	lds	r25, 0x028A
    4826:	a0 91 8b 02 	lds	r26, 0x028B
    482a:	b0 91 8c 02 	lds	r27, 0x028C
    482e:	80 93 13 03 	sts	0x0313, r24
    4832:	90 93 14 03 	sts	0x0314, r25
    4836:	a0 93 15 03 	sts	0x0315, r26
    483a:	b0 93 16 03 	sts	0x0316, r27
    483e:	80 91 13 03 	lds	r24, 0x0313
    4842:	90 91 14 03 	lds	r25, 0x0314
    4846:	a0 91 15 03 	lds	r26, 0x0315
    484a:	b0 91 16 03 	lds	r27, 0x0316
    484e:	80 93 7d 02 	sts	0x027D, r24
    4852:	90 93 7e 02 	sts	0x027E, r25
    4856:	a0 93 7f 02 	sts	0x027F, r26
    485a:	b0 93 80 02 	sts	0x0280, r27
    485e:	60 91 7d 02 	lds	r22, 0x027D
    4862:	70 91 7e 02 	lds	r23, 0x027E
    4866:	80 91 7f 02 	lds	r24, 0x027F
    486a:	90 91 80 02 	lds	r25, 0x0280
    486e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4872:	70 93 2b 02 	sts	0x022B, r23
    4876:	60 93 2a 02 	sts	0x022A, r22
		speed(0,0,e*zacf,0);		
	}
}
    487a:	28 96       	adiw	r28, 0x08	; 8
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	f8 94       	cli
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	cf 91       	pop	r28
    4888:	df 91       	pop	r29
    488a:	1f 91       	pop	r17
    488c:	0f 91       	pop	r16
    488e:	ff 90       	pop	r15
    4890:	ef 90       	pop	r14
    4892:	df 90       	pop	r13
    4894:	cf 90       	pop	r12
    4896:	bf 90       	pop	r11
    4898:	af 90       	pop	r10
    489a:	9f 90       	pop	r9
    489c:	8f 90       	pop	r8
    489e:	7f 90       	pop	r7
    48a0:	6f 90       	pop	r6
    48a2:	5f 90       	pop	r5
    48a4:	4f 90       	pop	r4
    48a6:	3f 90       	pop	r3
    48a8:	2f 90       	pop	r2
    48aa:	08 95       	ret
	{		
		e = (s-gyro) -z;
		e = (double)LF(sp, -sp, e * 5);

		if(fabs(e) <= 0.1) {LE return;}
		speed(0,0,e*zacf,0);		
    48ac:	c8 01       	movw	r24, r16
    48ae:	b7 01       	movw	r22, r14
    48b0:	20 91 18 02 	lds	r18, 0x0218
    48b4:	30 91 19 02 	lds	r19, 0x0219
    48b8:	40 91 1a 02 	lds	r20, 0x021A
    48bc:	50 91 1b 02 	lds	r21, 0x021B
    48c0:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    48c4:	7b 01       	movw	r14, r22
    48c6:	8c 01       	movw	r16, r24
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	cb 01       	movw	r24, r22
    48ce:	9b 01       	movw	r18, r22
    48d0:	ac 01       	movw	r20, r24
    48d2:	5b 01       	movw	r10, r22
    48d4:	6c 01       	movw	r12, r24
    48d6:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
	}
    48da:	56 cf       	rjmp	.-340    	; 0x4788 <At+0x13c>

000048dc <Ad>:
}

void Ad(int x, int y, int z, int sp, int ac, int zsp){
    48dc:	2f 92       	push	r2
    48de:	3f 92       	push	r3
    48e0:	4f 92       	push	r4
    48e2:	5f 92       	push	r5
    48e4:	6f 92       	push	r6
    48e6:	7f 92       	push	r7
    48e8:	8f 92       	push	r8
    48ea:	9f 92       	push	r9
    48ec:	af 92       	push	r10
    48ee:	bf 92       	push	r11
    48f0:	cf 92       	push	r12
    48f2:	df 92       	push	r13
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	df 93       	push	r29
    48fe:	cf 93       	push	r28
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	66 97       	sbiw	r28, 0x16	; 22
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	5c 01       	movw	r10, r24
    4912:	3b 01       	movw	r6, r22
    4914:	4a 01       	movw	r8, r20
    4916:	19 01       	movw	r2, r18
    4918:	28 01       	movw	r4, r16
    491a:	67 01       	movw	r12, r14
	ginit("Ad");
    491c:	10 92 03 02 	sts	0x0203, r1
    4920:	10 92 02 02 	sts	0x0202, r1
    4924:	10 92 50 03 	sts	0x0350, r1
    4928:	10 92 4f 03 	sts	0x034F, r1
    492c:	80 91 4f 03 	lds	r24, 0x034F
    4930:	90 91 50 03 	lds	r25, 0x0350
    4934:	90 93 2b 02 	sts	0x022B, r25
    4938:	80 93 2a 02 	sts	0x022A, r24
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	0f 2e       	mov	r0, r31
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	ef 2e       	mov	r14, r31
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	ff 2e       	mov	r15, r31
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	0f 2f       	mov	r16, r31
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	1f 2f       	mov	r17, r31
    4952:	f0 2d       	mov	r31, r0
    4954:	c9 01       	movw	r24, r18
    4956:	88 0f       	add	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	88 0f       	add	r24, r24
    495c:	99 1f       	adc	r25, r25
    495e:	fc 01       	movw	r30, r24
    4960:	e1 5c       	subi	r30, 0xC1	; 193
    4962:	fc 4f       	sbci	r31, 0xFC	; 252
    4964:	e0 82       	st	Z, r14
    4966:	f1 82       	std	Z+1, r15	; 0x01
    4968:	02 83       	std	Z+2, r16	; 0x02
    496a:	13 83       	std	Z+3, r17	; 0x03
    496c:	40 81       	ld	r20, Z
    496e:	51 81       	ldd	r21, Z+1	; 0x01
    4970:	62 81       	ldd	r22, Z+2	; 0x02
    4972:	73 81       	ldd	r23, Z+3	; 0x03
    4974:	fc 01       	movw	r30, r24
    4976:	e3 5d       	subi	r30, 0xD3	; 211
    4978:	fc 4f       	sbci	r31, 0xFC	; 252
    497a:	40 83       	st	Z, r20
    497c:	51 83       	std	Z+1, r21	; 0x01
    497e:	62 83       	std	Z+2, r22	; 0x02
    4980:	73 83       	std	Z+3, r23	; 0x03
    4982:	2f 5f       	subi	r18, 0xFF	; 255
    4984:	3f 4f       	sbci	r19, 0xFF	; 255
    4986:	24 30       	cpi	r18, 0x04	; 4
    4988:	31 05       	cpc	r19, r1
    498a:	21 f7       	brne	.-56     	; 0x4954 <Ad+0x78>
    498c:	00 d0       	rcall	.+0      	; 0x498e <Ad+0xb2>
    498e:	00 d0       	rcall	.+0      	; 0x4990 <Ad+0xb4>
    4990:	00 d0       	rcall	.+0      	; 0x4992 <Ad+0xb6>
    4992:	ed b7       	in	r30, 0x3d	; 61
    4994:	fe b7       	in	r31, 0x3e	; 62
    4996:	31 96       	adiw	r30, 0x01	; 1
    4998:	07 e1       	ldi	r16, 0x17	; 23
    499a:	13 e0       	ldi	r17, 0x03	; 3
    499c:	ad b7       	in	r26, 0x3d	; 61
    499e:	be b7       	in	r27, 0x3e	; 62
    49a0:	12 96       	adiw	r26, 0x02	; 2
    49a2:	1c 93       	st	X, r17
    49a4:	0e 93       	st	-X, r16
    49a6:	11 97       	sbiw	r26, 0x01	; 1
    49a8:	82 eb       	ldi	r24, 0xB2	; 178
    49aa:	91 e0       	ldi	r25, 0x01	; 1
    49ac:	93 83       	std	Z+3, r25	; 0x03
    49ae:	82 83       	std	Z+2, r24	; 0x02
    49b0:	89 ee       	ldi	r24, 0xE9	; 233
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	95 83       	std	Z+5, r25	; 0x05
    49b6:	84 83       	std	Z+4, r24	; 0x04
    49b8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    49bc:	ed b7       	in	r30, 0x3d	; 61
    49be:	fe b7       	in	r31, 0x3e	; 62
    49c0:	36 96       	adiw	r30, 0x06	; 6
    49c2:	0f b6       	in	r0, 0x3f	; 63
    49c4:	f8 94       	cli
    49c6:	fe bf       	out	0x3e, r31	; 62
    49c8:	0f be       	out	0x3f, r0	; 63
    49ca:	ed bf       	out	0x3d, r30	; 61
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	67 e0       	ldi	r22, 0x07	; 7
    49d2:	70 e0       	ldi	r23, 0x00	; 0
    49d4:	a8 01       	movw	r20, r16
    49d6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	double e, s = gyro;
    49da:	80 91 68 02 	lds	r24, 0x0268
    49de:	90 91 69 02 	lds	r25, 0x0269
    49e2:	a0 91 6a 02 	lds	r26, 0x026A
    49e6:	b0 91 6b 02 	lds	r27, 0x026B
    49ea:	8b 83       	std	Y+3, r24	; 0x03
    49ec:	9c 83       	std	Y+4, r25	; 0x04
    49ee:	ad 83       	std	Y+5, r26	; 0x05
    49f0:	be 83       	std	Y+6, r27	; 0x06
	double na=0;
	
	if(zsp) zacf = 0.2;
    49f2:	c1 14       	cp	r12, r1
    49f4:	d1 04       	cpc	r13, r1
    49f6:	09 f4       	brne	.+2      	; 0x49fa <Ad+0x11e>
    49f8:	5a c0       	rjmp	.+180    	; 0x4aae <Ad+0x1d2>
    49fa:	8d ec       	ldi	r24, 0xCD	; 205
    49fc:	9c ec       	ldi	r25, 0xCC	; 204
    49fe:	ac e4       	ldi	r26, 0x4C	; 76
    4a00:	be e3       	ldi	r27, 0x3E	; 62
    4a02:	80 93 18 02 	sts	0x0218, r24
    4a06:	90 93 19 02 	sts	0x0219, r25
    4a0a:	a0 93 1a 02 	sts	0x021A, r26
    4a0e:	b0 93 1b 02 	sts	0x021B, r27
	if(zsp > 1)
    4a12:	92 e0       	ldi	r25, 0x02	; 2
    4a14:	c9 16       	cp	r12, r25
    4a16:	d1 04       	cpc	r13, r1
    4a18:	0c f4       	brge	.+2      	; 0x4a1c <Ad+0x140>
    4a1a:	49 c0       	rjmp	.+146    	; 0x4aae <Ad+0x1d2>
	{
		O(x,y,0,0);
    4a1c:	c5 01       	movw	r24, r10
    4a1e:	b3 01       	movw	r22, r6
    4a20:	40 e0       	ldi	r20, 0x00	; 0
    4a22:	50 e0       	ldi	r21, 0x00	; 0
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	81 01       	movw	r16, r2
    4a2a:	72 01       	movw	r14, r4
    4a2c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
		if(x&&y)
    4a30:	a1 14       	cp	r10, r1
    4a32:	b1 04       	cpc	r11, r1
    4a34:	69 f1       	breq	.+90     	; 0x4a90 <Ad+0x1b4>
    4a36:	61 14       	cp	r6, r1
    4a38:	71 04       	cpc	r7, r1
    4a3a:	51 f1       	breq	.+84     	; 0x4a90 <Ad+0x1b4>
			sp *= (double)sp/hypot(msp[1],msp[0]);
    4a3c:	b1 01       	movw	r22, r2
    4a3e:	88 27       	eor	r24, r24
    4a40:	77 fd       	sbrc	r23, 7
    4a42:	80 95       	com	r24
    4a44:	98 2f       	mov	r25, r24
    4a46:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4a4a:	7b 01       	movw	r14, r22
    4a4c:	8c 01       	movw	r16, r24
    4a4e:	60 91 31 03 	lds	r22, 0x0331
    4a52:	70 91 32 03 	lds	r23, 0x0332
    4a56:	80 91 33 03 	lds	r24, 0x0333
    4a5a:	90 91 34 03 	lds	r25, 0x0334
    4a5e:	20 91 2d 03 	lds	r18, 0x032D
    4a62:	30 91 2e 03 	lds	r19, 0x032E
    4a66:	40 91 2f 03 	lds	r20, 0x032F
    4a6a:	50 91 30 03 	lds	r21, 0x0330
    4a6e:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    4a72:	9b 01       	movw	r18, r22
    4a74:	ac 01       	movw	r20, r24
    4a76:	c8 01       	movw	r24, r16
    4a78:	b7 01       	movw	r22, r14
    4a7a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    4a7e:	9b 01       	movw	r18, r22
    4a80:	ac 01       	movw	r20, r24
    4a82:	c8 01       	movw	r24, r16
    4a84:	b7 01       	movw	r22, r14
    4a86:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    4a8a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4a8e:	1b 01       	movw	r2, r22
		tot = O(x,y,0,0);
    4a90:	c5 01       	movw	r24, r10
    4a92:	b3 01       	movw	r22, r6
    4a94:	40 e0       	ldi	r20, 0x00	; 0
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	81 01       	movw	r16, r2
    4a9e:	72 01       	movw	r14, r4
    4aa0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    4aa4:	90 93 50 03 	sts	0x0350, r25
    4aa8:	80 93 4f 03 	sts	0x034F, r24
    4aac:	53 c0       	rjmp	.+166    	; 0x4b54 <Ad+0x278>
	}

	else 
	{
		O(x,y,z,0);
    4aae:	c5 01       	movw	r24, r10
    4ab0:	b3 01       	movw	r22, r6
    4ab2:	a4 01       	movw	r20, r8
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	81 01       	movw	r16, r2
    4aba:	72 01       	movw	r14, r4
    4abc:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
		sp *= (double)sp/hypot(msp[1],msp[0]);
    4ac0:	b1 01       	movw	r22, r2
    4ac2:	88 27       	eor	r24, r24
    4ac4:	77 fd       	sbrc	r23, 7
    4ac6:	80 95       	com	r24
    4ac8:	98 2f       	mov	r25, r24
    4aca:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4ace:	7b 01       	movw	r14, r22
    4ad0:	8c 01       	movw	r16, r24
    4ad2:	60 91 31 03 	lds	r22, 0x0331
    4ad6:	70 91 32 03 	lds	r23, 0x0332
    4ada:	80 91 33 03 	lds	r24, 0x0333
    4ade:	90 91 34 03 	lds	r25, 0x0334
    4ae2:	20 91 2d 03 	lds	r18, 0x032D
    4ae6:	30 91 2e 03 	lds	r19, 0x032E
    4aea:	40 91 2f 03 	lds	r20, 0x032F
    4aee:	50 91 30 03 	lds	r21, 0x0330
    4af2:	0e 94 5f 34 	call	0x68be	; 0x68be <hypot>
    4af6:	9b 01       	movw	r18, r22
    4af8:	ac 01       	movw	r20, r24
    4afa:	c8 01       	movw	r24, r16
    4afc:	b7 01       	movw	r22, r14
    4afe:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    4b02:	9b 01       	movw	r18, r22
    4b04:	ac 01       	movw	r20, r24
    4b06:	c8 01       	movw	r24, r16
    4b08:	b7 01       	movw	r22, r14
    4b0a:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    4b0e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4b12:	7b 01       	movw	r14, r22
    4b14:	8c 01       	movw	r16, r24
		tot = O(x,y,z,0);
    4b16:	c5 01       	movw	r24, r10
    4b18:	b3 01       	movw	r22, r6
    4b1a:	a4 01       	movw	r20, r8
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	87 01       	movw	r16, r14
    4b22:	72 01       	movw	r14, r4
    4b24:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    4b28:	90 93 50 03 	sts	0x0350, r25
    4b2c:	80 93 4f 03 	sts	0x034F, r24
		zsp = abs((int)msp[2]);
    4b30:	60 91 35 03 	lds	r22, 0x0335
    4b34:	70 91 36 03 	lds	r23, 0x0336
    4b38:	80 91 37 03 	lds	r24, 0x0337
    4b3c:	90 91 38 03 	lds	r25, 0x0338
    4b40:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4b44:	c6 2e       	mov	r12, r22
    4b46:	d7 2e       	mov	r13, r23
    4b48:	d7 fe       	sbrs	r13, 7
    4b4a:	04 c0       	rjmp	.+8      	; 0x4b54 <Ad+0x278>
    4b4c:	d0 94       	com	r13
    4b4e:	c1 94       	neg	r12
    4b50:	d1 08       	sbc	r13, r1
    4b52:	d3 94       	inc	r13
		speed(0,0,e*zacf,0);		
	}
}

void Ad(int x, int y, int z, int sp, int ac, int zsp){
	ginit("Ad");
    4b54:	33 24       	eor	r3, r3
    4b56:	22 24       	eor	r2, r2
    4b58:	19 82       	std	Y+1, r1	; 0x01
    4b5a:	1a 82       	std	Y+2, r1	; 0x02

	while(1)
	{		
		OS

		e = (s-gyro) -z;
    4b5c:	c4 01       	movw	r24, r8
    4b5e:	aa 27       	eor	r26, r26
    4b60:	97 fd       	sbrc	r25, 7
    4b62:	a0 95       	com	r26
    4b64:	ba 2f       	mov	r27, r26
    4b66:	8b 87       	std	Y+11, r24	; 0x0b
    4b68:	9c 87       	std	Y+12, r25	; 0x0c
    4b6a:	ad 87       	std	Y+13, r26	; 0x0d
    4b6c:	be 87       	std	Y+14, r27	; 0x0e
		e = (double)LF(zsp, -zsp, e * 5);
    4b6e:	c6 01       	movw	r24, r12
    4b70:	aa 27       	eor	r26, r26
    4b72:	97 fd       	sbrc	r25, 7
    4b74:	a0 95       	com	r26
    4b76:	ba 2f       	mov	r27, r26
    4b78:	8f 87       	std	Y+15, r24	; 0x0f
    4b7a:	98 8b       	std	Y+16, r25	; 0x10
    4b7c:	a9 8b       	std	Y+17, r26	; 0x11
    4b7e:	ba 8b       	std	Y+18, r27	; 0x12
    4b80:	d0 94       	com	r13
    4b82:	c1 94       	neg	r12
    4b84:	d1 08       	sbc	r13, r1
    4b86:	d3 94       	inc	r13
    4b88:	c6 01       	movw	r24, r12
    4b8a:	aa 27       	eor	r26, r26
    4b8c:	97 fd       	sbrc	r25, 7
    4b8e:	a0 95       	com	r26
    4b90:	ba 2f       	mov	r27, r26
    4b92:	8b 8b       	std	Y+19, r24	; 0x13
    4b94:	9c 8b       	std	Y+20, r25	; 0x14
    4b96:	ad 8b       	std	Y+21, r26	; 0x15
    4b98:	be 8b       	std	Y+22, r27	; 0x16
		zsp = abs((int)msp[2]);
	}	

	while(1)
	{		
		OS
    4b9a:	80 91 4f 03 	lds	r24, 0x034F
    4b9e:	90 91 50 03 	lds	r25, 0x0350
    4ba2:	b2 01       	movw	r22, r4
    4ba4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		e = (s-gyro) -z;
    4ba8:	20 91 68 02 	lds	r18, 0x0268
    4bac:	30 91 69 02 	lds	r19, 0x0269
    4bb0:	40 91 6a 02 	lds	r20, 0x026A
    4bb4:	50 91 6b 02 	lds	r21, 0x026B
    4bb8:	6b 81       	ldd	r22, Y+3	; 0x03
    4bba:	7c 81       	ldd	r23, Y+4	; 0x04
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    4bc4:	7b 01       	movw	r14, r22
    4bc6:	8c 01       	movw	r16, r24
    4bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bd0:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4bd4:	9b 01       	movw	r18, r22
    4bd6:	ac 01       	movw	r20, r24
    4bd8:	c8 01       	movw	r24, r16
    4bda:	b7 01       	movw	r22, r14
    4bdc:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
		e = (double)LF(zsp, -zsp, e * 5);
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	40 ea       	ldi	r20, 0xA0	; 160
    4be6:	50 e4       	ldi	r21, 0x40	; 64
    4be8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    4bec:	d6 2e       	mov	r13, r22
    4bee:	c7 2e       	mov	r12, r23
    4bf0:	b8 2e       	mov	r11, r24
    4bf2:	a9 2e       	mov	r10, r25
    4bf4:	6f 85       	ldd	r22, Y+15	; 0x0f
    4bf6:	78 89       	ldd	r23, Y+16	; 0x10
    4bf8:	89 89       	ldd	r24, Y+17	; 0x11
    4bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    4bfc:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4c00:	7b 01       	movw	r14, r22
    4c02:	8c 01       	movw	r16, r24
    4c04:	6b 89       	ldd	r22, Y+19	; 0x13
    4c06:	7c 89       	ldd	r23, Y+20	; 0x14
    4c08:	8d 89       	ldd	r24, Y+21	; 0x15
    4c0a:	9e 89       	ldd	r25, Y+22	; 0x16
    4c0c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4c10:	9b 01       	movw	r18, r22
    4c12:	ac 01       	movw	r20, r24
    4c14:	c8 01       	movw	r24, r16
    4c16:	b7 01       	movw	r22, r14
    4c18:	d6 01       	movw	r26, r12
    4c1a:	f5 01       	movw	r30, r10
    4c1c:	eb 2e       	mov	r14, r27
    4c1e:	fa 2e       	mov	r15, r26
    4c20:	0f 2f       	mov	r16, r31
    4c22:	1e 2f       	mov	r17, r30
    4c24:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    4c28:	7b 01       	movw	r14, r22
    4c2a:	8c 01       	movw	r16, r24
		
		if(!gtc)
    4c2c:	80 91 02 02 	lds	r24, 0x0202
    4c30:	90 91 03 02 	lds	r25, 0x0203
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	d1 f5       	brne	.+116    	; 0x4cac <Ad+0x3d0>
		{
			gtc = 1;
    4c38:	a1 e0       	ldi	r26, 0x01	; 1
    4c3a:	b0 e0       	ldi	r27, 0x00	; 0
    4c3c:	b0 93 03 02 	sts	0x0203, r27
    4c40:	a0 93 02 02 	sts	0x0202, r26
			gsp[2] = e*zacf;
    4c44:	c8 01       	movw	r24, r16
    4c46:	b7 01       	movw	r22, r14
    4c48:	20 91 18 02 	lds	r18, 0x0218
    4c4c:	30 91 19 02 	lds	r19, 0x0219
    4c50:	40 91 1a 02 	lds	r20, 0x021A
    4c54:	50 91 1b 02 	lds	r21, 0x021B
    4c58:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    4c5c:	9b 01       	movw	r18, r22
    4c5e:	ac 01       	movw	r20, r24
    4c60:	20 93 47 03 	sts	0x0347, r18
    4c64:	30 93 48 03 	sts	0x0348, r19
    4c68:	40 93 49 03 	sts	0x0349, r20
    4c6c:	50 93 4a 03 	sts	0x034A, r21
			na += -gsp[2]/100;
    4c70:	60 91 47 03 	lds	r22, 0x0347
    4c74:	70 91 48 03 	lds	r23, 0x0348
    4c78:	80 91 49 03 	lds	r24, 0x0349
    4c7c:	90 91 4a 03 	lds	r25, 0x034A
    4c80:	90 58       	subi	r25, 0x80	; 128
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	48 ec       	ldi	r20, 0xC8	; 200
    4c88:	52 e4       	ldi	r21, 0x42	; 66
    4c8a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    4c8e:	9b 01       	movw	r18, r22
    4c90:	ac 01       	movw	r20, r24
    4c92:	d1 01       	movw	r26, r2
    4c94:	d9 80       	ldd	r13, Y+1	; 0x01
    4c96:	ca 80       	ldd	r12, Y+2	; 0x02
    4c98:	6b 2f       	mov	r22, r27
    4c9a:	72 2d       	mov	r23, r2
    4c9c:	8d 2d       	mov	r24, r13
    4c9e:	9c 2d       	mov	r25, r12
    4ca0:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4ca4:	36 2e       	mov	r3, r22
    4ca6:	27 2e       	mov	r2, r23
    4ca8:	89 83       	std	Y+1, r24	; 0x01
    4caa:	9a 83       	std	Y+2, r25	; 0x02
		}

		if(!oc)oc=1;
    4cac:	80 91 2a 02 	lds	r24, 0x022A
    4cb0:	90 91 2b 02 	lds	r25, 0x022B
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	31 f4       	brne	.+12     	; 0x4cc4 <Ad+0x3e8>
    4cb8:	e1 e0       	ldi	r30, 0x01	; 1
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	f0 93 2b 02 	sts	0x022B, r31
    4cc0:	e0 93 2a 02 	sts	0x022A, r30
		if(oc>tot){gsp[0]=gsp[1]=0;}
    4cc4:	c0 90 2a 02 	lds	r12, 0x022A
    4cc8:	d0 90 2b 02 	lds	r13, 0x022B
    4ccc:	80 91 4f 03 	lds	r24, 0x034F
    4cd0:	90 91 50 03 	lds	r25, 0x0350
    4cd4:	8c 15       	cp	r24, r12
    4cd6:	9d 05       	cpc	r25, r13
    4cd8:	dc f4       	brge	.+54     	; 0x4d10 <Ad+0x434>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	dc 01       	movw	r26, r24
    4ce0:	80 93 43 03 	sts	0x0343, r24
    4ce4:	90 93 44 03 	sts	0x0344, r25
    4ce8:	a0 93 45 03 	sts	0x0345, r26
    4cec:	b0 93 46 03 	sts	0x0346, r27
    4cf0:	80 91 43 03 	lds	r24, 0x0343
    4cf4:	90 91 44 03 	lds	r25, 0x0344
    4cf8:	a0 91 45 03 	lds	r26, 0x0345
    4cfc:	b0 91 46 03 	lds	r27, 0x0346
    4d00:	80 93 3f 03 	sts	0x033F, r24
    4d04:	90 93 40 03 	sts	0x0340, r25
    4d08:	a0 93 41 03 	sts	0x0341, r26
    4d0c:	b0 93 42 03 	sts	0x0342, r27
		if(abs(e)<=0.1){gsp[2] = 0;}
    4d10:	c8 01       	movw	r24, r16
    4d12:	b7 01       	movw	r22, r14
    4d14:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4d18:	77 ff       	sbrs	r23, 7
    4d1a:	03 c0       	rjmp	.+6      	; 0x4d22 <Ad+0x446>
    4d1c:	70 95       	com	r23
    4d1e:	61 95       	neg	r22
    4d20:	7f 4f       	sbci	r23, 0xFF	; 255
    4d22:	88 27       	eor	r24, r24
    4d24:	77 fd       	sbrc	r23, 7
    4d26:	80 95       	com	r24
    4d28:	98 2f       	mov	r25, r24
    4d2a:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4d2e:	01 e0       	ldi	r16, 0x01	; 1
    4d30:	2d ec       	ldi	r18, 0xCD	; 205
    4d32:	3c ec       	ldi	r19, 0xCC	; 204
    4d34:	4c ec       	ldi	r20, 0xCC	; 204
    4d36:	5d e3       	ldi	r21, 0x3D	; 61
    4d38:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    4d3c:	18 16       	cp	r1, r24
    4d3e:	14 f4       	brge	.+4      	; 0x4d44 <Ad+0x468>
    4d40:	00 e0       	ldi	r16, 0x00	; 0
    4d42:	0b c0       	rjmp	.+22     	; 0x4d5a <Ad+0x47e>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	dc 01       	movw	r26, r24
    4d4a:	80 93 47 03 	sts	0x0347, r24
    4d4e:	90 93 48 03 	sts	0x0348, r25
    4d52:	a0 93 49 03 	sts	0x0349, r26
    4d56:	b0 93 4a 03 	sts	0x034A, r27
		if(oc>tot && abs(e)<=0.1) {LE return;}
    4d5a:	80 91 4f 03 	lds	r24, 0x034F
    4d5e:	90 91 50 03 	lds	r25, 0x0350
    4d62:	8c 15       	cp	r24, r12
    4d64:	9d 05       	cpc	r25, r13
    4d66:	0c f0       	brlt	.+2      	; 0x4d6a <Ad+0x48e>
    4d68:	55 c0       	rjmp	.+170    	; 0x4e14 <Ad+0x538>
    4d6a:	00 23       	and	r16, r16
    4d6c:	09 f4       	brne	.+2      	; 0x4d70 <Ad+0x494>
    4d6e:	52 c0       	rjmp	.+164    	; 0x4e14 <Ad+0x538>
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	dc 01       	movw	r26, r24
    4d76:	80 93 89 02 	sts	0x0289, r24
    4d7a:	90 93 8a 02 	sts	0x028A, r25
    4d7e:	a0 93 8b 02 	sts	0x028B, r26
    4d82:	b0 93 8c 02 	sts	0x028C, r27
    4d86:	80 91 89 02 	lds	r24, 0x0289
    4d8a:	90 91 8a 02 	lds	r25, 0x028A
    4d8e:	a0 91 8b 02 	lds	r26, 0x028B
    4d92:	b0 91 8c 02 	lds	r27, 0x028C
    4d96:	80 93 13 03 	sts	0x0313, r24
    4d9a:	90 93 14 03 	sts	0x0314, r25
    4d9e:	a0 93 15 03 	sts	0x0315, r26
    4da2:	b0 93 16 03 	sts	0x0316, r27
    4da6:	80 91 13 03 	lds	r24, 0x0313
    4daa:	90 91 14 03 	lds	r25, 0x0314
    4dae:	a0 91 15 03 	lds	r26, 0x0315
    4db2:	b0 91 16 03 	lds	r27, 0x0316
    4db6:	80 93 7d 02 	sts	0x027D, r24
    4dba:	90 93 7e 02 	sts	0x027E, r25
    4dbe:	a0 93 7f 02 	sts	0x027F, r26
    4dc2:	b0 93 80 02 	sts	0x0280, r27
    4dc6:	60 91 7d 02 	lds	r22, 0x027D
    4dca:	70 91 7e 02 	lds	r23, 0x027E
    4dce:	80 91 7f 02 	lds	r24, 0x027F
    4dd2:	90 91 80 02 	lds	r25, 0x0280
    4dd6:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    4dda:	70 93 2b 02 	sts	0x022B, r23
    4dde:	60 93 2a 02 	sts	0x022A, r22
		speed(gsp[0],gsp[1],gsp[2],wa+na);
		
	}
}
    4de2:	66 96       	adiw	r28, 0x16	; 22
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	f8 94       	cli
    4de8:	de bf       	out	0x3e, r29	; 62
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	cf 91       	pop	r28
    4df0:	df 91       	pop	r29
    4df2:	1f 91       	pop	r17
    4df4:	0f 91       	pop	r16
    4df6:	ff 90       	pop	r15
    4df8:	ef 90       	pop	r14
    4dfa:	df 90       	pop	r13
    4dfc:	cf 90       	pop	r12
    4dfe:	bf 90       	pop	r11
    4e00:	af 90       	pop	r10
    4e02:	9f 90       	pop	r9
    4e04:	8f 90       	pop	r8
    4e06:	7f 90       	pop	r7
    4e08:	6f 90       	pop	r6
    4e0a:	5f 90       	pop	r5
    4e0c:	4f 90       	pop	r4
    4e0e:	3f 90       	pop	r3
    4e10:	2f 90       	pop	r2
    4e12:	08 95       	ret

		if(!oc)oc=1;
		if(oc>tot){gsp[0]=gsp[1]=0;}
		if(abs(e)<=0.1){gsp[2] = 0;}
		if(oc>tot && abs(e)<=0.1) {LE return;}
		speed(gsp[0],gsp[1],gsp[2],wa+na);
    4e14:	60 90 3f 03 	lds	r6, 0x033F
    4e18:	70 90 40 03 	lds	r7, 0x0340
    4e1c:	80 90 41 03 	lds	r8, 0x0341
    4e20:	90 90 42 03 	lds	r9, 0x0342
    4e24:	80 91 43 03 	lds	r24, 0x0343
    4e28:	90 91 44 03 	lds	r25, 0x0344
    4e2c:	a0 91 45 03 	lds	r26, 0x0345
    4e30:	b0 91 46 03 	lds	r27, 0x0346
    4e34:	8f 83       	std	Y+7, r24	; 0x07
    4e36:	98 87       	std	Y+8, r25	; 0x08
    4e38:	a9 87       	std	Y+9, r26	; 0x09
    4e3a:	ba 87       	std	Y+10, r27	; 0x0a
    4e3c:	e0 90 47 03 	lds	r14, 0x0347
    4e40:	f0 90 48 03 	lds	r15, 0x0348
    4e44:	00 91 49 03 	lds	r16, 0x0349
    4e48:	10 91 4a 03 	lds	r17, 0x034A
    4e4c:	60 91 50 02 	lds	r22, 0x0250
    4e50:	70 91 51 02 	lds	r23, 0x0251
    4e54:	88 27       	eor	r24, r24
    4e56:	77 fd       	sbrc	r23, 7
    4e58:	80 95       	com	r24
    4e5a:	98 2f       	mov	r25, r24
    4e5c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    4e60:	d1 01       	movw	r26, r2
    4e62:	d9 80       	ldd	r13, Y+1	; 0x01
    4e64:	ca 80       	ldd	r12, Y+2	; 0x02
    4e66:	2b 2f       	mov	r18, r27
    4e68:	32 2d       	mov	r19, r2
    4e6a:	4d 2d       	mov	r20, r13
    4e6c:	5c 2d       	mov	r21, r12
    4e6e:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    4e72:	5b 01       	movw	r10, r22
    4e74:	6c 01       	movw	r12, r24
    4e76:	c4 01       	movw	r24, r8
    4e78:	b3 01       	movw	r22, r6
    4e7a:	2f 81       	ldd	r18, Y+7	; 0x07
    4e7c:	38 85       	ldd	r19, Y+8	; 0x08
    4e7e:	49 85       	ldd	r20, Y+9	; 0x09
    4e80:	5a 85       	ldd	r21, Y+10	; 0x0a
    4e82:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
		
	}
    4e86:	89 ce       	rjmp	.-750    	; 0x4b9a <Ad+0x2be>

00004e88 <Avoid>:
}

void Avoid(int ps, int pm ,int pm2, int dis, int y, int sp, int ac){
    4e88:	2f 92       	push	r2
    4e8a:	3f 92       	push	r3
    4e8c:	4f 92       	push	r4
    4e8e:	5f 92       	push	r5
    4e90:	6f 92       	push	r6
    4e92:	7f 92       	push	r7
    4e94:	8f 92       	push	r8
    4e96:	9f 92       	push	r9
    4e98:	af 92       	push	r10
    4e9a:	bf 92       	push	r11
    4e9c:	cf 92       	push	r12
    4e9e:	df 92       	push	r13
    4ea0:	ef 92       	push	r14
    4ea2:	ff 92       	push	r15
    4ea4:	0f 93       	push	r16
    4ea6:	1f 93       	push	r17
    4ea8:	df 93       	push	r29
    4eaa:	cf 93       	push	r28
    4eac:	cd b7       	in	r28, 0x3d	; 61
    4eae:	de b7       	in	r29, 0x3e	; 62
    4eb0:	68 97       	sbiw	r28, 0x18	; 24
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	7e 83       	std	Y+6, r23	; 0x06
    4ec2:	6d 83       	std	Y+5, r22	; 0x05
    4ec4:	58 87       	std	Y+8, r21	; 0x08
    4ec6:	4f 83       	std	Y+7, r20	; 0x07
    4ec8:	3a 87       	std	Y+10, r19	; 0x0a
    4eca:	29 87       	std	Y+9, r18	; 0x09
    4ecc:	57 01       	movw	r10, r14
    4ece:	dc 86       	std	Y+12, r13	; 0x0c
    4ed0:	cb 86       	std	Y+11, r12	; 0x0b
	ginit("Avoid");	
    4ed2:	10 92 03 02 	sts	0x0203, r1
    4ed6:	10 92 02 02 	sts	0x0202, r1
    4eda:	10 92 50 03 	sts	0x0350, r1
    4ede:	10 92 4f 03 	sts	0x034F, r1
    4ee2:	80 91 4f 03 	lds	r24, 0x034F
    4ee6:	90 91 50 03 	lds	r25, 0x0350
    4eea:	90 93 2b 02 	sts	0x022B, r25
    4eee:	80 93 2a 02 	sts	0x022A, r24
    4ef2:	60 e0       	ldi	r22, 0x00	; 0
    4ef4:	70 e0       	ldi	r23, 0x00	; 0
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	dc 01       	movw	r26, r24
    4efc:	9b 01       	movw	r18, r22
    4efe:	22 0f       	add	r18, r18
    4f00:	33 1f       	adc	r19, r19
    4f02:	22 0f       	add	r18, r18
    4f04:	33 1f       	adc	r19, r19
    4f06:	f9 01       	movw	r30, r18
    4f08:	e1 5c       	subi	r30, 0xC1	; 193
    4f0a:	fc 4f       	sbci	r31, 0xFC	; 252
    4f0c:	80 83       	st	Z, r24
    4f0e:	91 83       	std	Z+1, r25	; 0x01
    4f10:	a2 83       	std	Z+2, r26	; 0x02
    4f12:	b3 83       	std	Z+3, r27	; 0x03
    4f14:	60 80       	ld	r6, Z
    4f16:	71 80       	ldd	r7, Z+1	; 0x01
    4f18:	82 80       	ldd	r8, Z+2	; 0x02
    4f1a:	93 80       	ldd	r9, Z+3	; 0x03
    4f1c:	23 5d       	subi	r18, 0xD3	; 211
    4f1e:	3c 4f       	sbci	r19, 0xFC	; 252
    4f20:	f9 01       	movw	r30, r18
    4f22:	60 82       	st	Z, r6
    4f24:	71 82       	std	Z+1, r7	; 0x01
    4f26:	82 82       	std	Z+2, r8	; 0x02
    4f28:	93 82       	std	Z+3, r9	; 0x03
    4f2a:	6f 5f       	subi	r22, 0xFF	; 255
    4f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2e:	64 30       	cpi	r22, 0x04	; 4
    4f30:	71 05       	cpc	r23, r1
    4f32:	21 f7       	brne	.-56     	; 0x4efc <Avoid+0x74>
    4f34:	00 d0       	rcall	.+0      	; 0x4f36 <Avoid+0xae>
    4f36:	00 d0       	rcall	.+0      	; 0x4f38 <Avoid+0xb0>
    4f38:	00 d0       	rcall	.+0      	; 0x4f3a <Avoid+0xb2>
    4f3a:	ed b7       	in	r30, 0x3d	; 61
    4f3c:	fe b7       	in	r31, 0x3e	; 62
    4f3e:	31 96       	adiw	r30, 0x01	; 1
    4f40:	57 e1       	ldi	r21, 0x17	; 23
    4f42:	e5 2e       	mov	r14, r21
    4f44:	53 e0       	ldi	r21, 0x03	; 3
    4f46:	f5 2e       	mov	r15, r21
    4f48:	ad b7       	in	r26, 0x3d	; 61
    4f4a:	be b7       	in	r27, 0x3e	; 62
    4f4c:	12 96       	adiw	r26, 0x02	; 2
    4f4e:	fc 92       	st	X, r15
    4f50:	ee 92       	st	-X, r14
    4f52:	11 97       	sbiw	r26, 0x01	; 1
    4f54:	82 eb       	ldi	r24, 0xB2	; 178
    4f56:	91 e0       	ldi	r25, 0x01	; 1
    4f58:	93 83       	std	Z+3, r25	; 0x03
    4f5a:	82 83       	std	Z+2, r24	; 0x02
    4f5c:	8c ee       	ldi	r24, 0xEC	; 236
    4f5e:	91 e0       	ldi	r25, 0x01	; 1
    4f60:	95 83       	std	Z+5, r25	; 0x05
    4f62:	84 83       	std	Z+4, r24	; 0x04
    4f64:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    4f68:	ed b7       	in	r30, 0x3d	; 61
    4f6a:	fe b7       	in	r31, 0x3e	; 62
    4f6c:	36 96       	adiw	r30, 0x06	; 6
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	f8 94       	cli
    4f72:	fe bf       	out	0x3e, r31	; 62
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	ed bf       	out	0x3d, r30	; 61
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	67 e0       	ldi	r22, 0x07	; 7
    4f7e:	70 e0       	ldi	r23, 0x00	; 0
    4f80:	a7 01       	movw	r20, r14
    4f82:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	int zig=0,l=(ps+1)%9,r=(ps+8)%9,d=1;
    4f86:	89 81       	ldd	r24, Y+1	; 0x01
    4f88:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8a:	01 96       	adiw	r24, 0x01	; 1
    4f8c:	29 e0       	ldi	r18, 0x09	; 9
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	b9 01       	movw	r22, r18
    4f92:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    4f96:	3c 01       	movw	r6, r24
    4f98:	89 81       	ldd	r24, Y+1	; 0x01
    4f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9c:	08 96       	adiw	r24, 0x08	; 8
    4f9e:	b9 01       	movw	r22, r18
    4fa0:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    4fa4:	1c 01       	movw	r2, r24
	double s=gyro,e;
    4fa6:	80 91 68 02 	lds	r24, 0x0268
    4faa:	90 91 69 02 	lds	r25, 0x0269
    4fae:	a0 91 6a 02 	lds	r26, 0x026A
    4fb2:	b0 91 6b 02 	lds	r27, 0x026B
    4fb6:	89 8b       	std	Y+17, r24	; 0x11
    4fb8:	9a 8b       	std	Y+18, r25	; 0x12
    4fba:	ab 8b       	std	Y+19, r26	; 0x13
    4fbc:	bc 8b       	std	Y+20, r27	; 0x14
	if(y<0) d= -1;
    4fbe:	17 fd       	sbrc	r17, 7
    4fc0:	05 c0       	rjmp	.+10     	; 0x4fcc <Avoid+0x144>
	}
}

void Avoid(int ps, int pm ,int pm2, int dis, int y, int sp, int ac){
	ginit("Avoid");	
	int zig=0,l=(ps+1)%9,r=(ps+8)%9,d=1;
    4fc2:	a1 e0       	ldi	r26, 0x01	; 1
    4fc4:	b0 e0       	ldi	r27, 0x00	; 0
    4fc6:	bc 83       	std	Y+4, r27	; 0x04
    4fc8:	ab 83       	std	Y+3, r26	; 0x03
    4fca:	04 c0       	rjmp	.+8      	; 0x4fd4 <Avoid+0x14c>
	double s=gyro,e;
	if(y<0) d= -1;
    4fcc:	ef ef       	ldi	r30, 0xFF	; 255
    4fce:	ff ef       	ldi	r31, 0xFF	; 255
    4fd0:	fc 83       	std	Y+4, r31	; 0x04
    4fd2:	eb 83       	std	Y+3, r30	; 0x03
	tot = O(0,y,0,0);
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	b8 01       	movw	r22, r16
    4fda:	40 e0       	ldi	r20, 0x00	; 0
    4fdc:	50 e0       	ldi	r21, 0x00	; 0
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	85 01       	movw	r16, r10
    4fe4:	eb 84       	ldd	r14, Y+11	; 0x0b
    4fe6:	fc 84       	ldd	r15, Y+12	; 0x0c
    4fe8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    4fec:	90 93 50 03 	sts	0x0350, r25
    4ff0:	80 93 4f 03 	sts	0x034F, r24
	{
	
		OS

		e = s-gyro;
		e *= (sp+10)/10;
    4ff4:	c5 01       	movw	r24, r10
    4ff6:	0a 96       	adiw	r24, 0x0a	; 10
    4ff8:	6a e0       	ldi	r22, 0x0A	; 10
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    5000:	cb 01       	movw	r24, r22
    5002:	aa 27       	eor	r26, r26
    5004:	97 fd       	sbrc	r25, 7
    5006:	a0 95       	com	r26
    5008:	ba 2f       	mov	r27, r26
    500a:	8d 8b       	std	Y+21, r24	; 0x15
    500c:	9e 8b       	std	Y+22, r25	; 0x16
    500e:	af 8b       	std	Y+23, r26	; 0x17
    5010:	b8 8f       	std	Y+24, r27	; 0x18
		if(e > 30 || e< -30) e= 0;			
	
		zig=0;
		if(g_psd[l] <= pm) zig += (g_psd[l]-pm)*3.5;
    5012:	d3 01       	movw	r26, r6
    5014:	a2 5e       	subi	r26, 0xE2	; 226
    5016:	bd 4f       	sbci	r27, 0xFD	; 253
    5018:	be 87       	std	Y+14, r27	; 0x0e
    501a:	ad 87       	std	Y+13, r26	; 0x0d
		if(g_psd[r] <= pm2) zig += (g_psd[r]-pm2)*-3.5;
    501c:	f1 01       	movw	r30, r2
    501e:	e2 5e       	subi	r30, 0xE2	; 226
    5020:	fd 4f       	sbci	r31, 0xFD	; 253
    5022:	f8 8b       	std	Y+16, r31	; 0x10
    5024:	ef 87       	std	Y+15, r30	; 0x0f
	if(y<0) d= -1;
	tot = O(0,y,0,0);
	while(1)
	{
	
		OS
    5026:	80 91 4f 03 	lds	r24, 0x034F
    502a:	90 91 50 03 	lds	r25, 0x0350
    502e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5030:	7c 85       	ldd	r23, Y+12	; 0x0c
    5032:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>

		e = s-gyro;
    5036:	20 91 68 02 	lds	r18, 0x0268
    503a:	30 91 69 02 	lds	r19, 0x0269
    503e:	40 91 6a 02 	lds	r20, 0x026A
    5042:	50 91 6b 02 	lds	r21, 0x026B
    5046:	69 89       	ldd	r22, Y+17	; 0x11
    5048:	7a 89       	ldd	r23, Y+18	; 0x12
    504a:	8b 89       	ldd	r24, Y+19	; 0x13
    504c:	9c 89       	ldd	r25, Y+20	; 0x14
    504e:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    5052:	7b 01       	movw	r14, r22
    5054:	8c 01       	movw	r16, r24
		e *= (sp+10)/10;
    5056:	6d 89       	ldd	r22, Y+21	; 0x15
    5058:	7e 89       	ldd	r23, Y+22	; 0x16
    505a:	8f 89       	ldd	r24, Y+23	; 0x17
    505c:	98 8d       	ldd	r25, Y+24	; 0x18
    505e:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5062:	9b 01       	movw	r18, r22
    5064:	ac 01       	movw	r20, r24
    5066:	6e 2d       	mov	r22, r14
    5068:	7f 2d       	mov	r23, r15
    506a:	80 2f       	mov	r24, r16
    506c:	91 2f       	mov	r25, r17
    506e:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5072:	8b 01       	movw	r16, r22
    5074:	f8 2e       	mov	r15, r24
    5076:	e9 2e       	mov	r14, r25
		if(e > 30 || e< -30) e= 0;			
    5078:	97 01       	movw	r18, r14
    507a:	71 2f       	mov	r23, r17
    507c:	83 2f       	mov	r24, r19
    507e:	92 2f       	mov	r25, r18
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	40 ef       	ldi	r20, 0xF0	; 240
    5086:	51 e4       	ldi	r21, 0x41	; 65
    5088:	0e 94 52 34 	call	0x68a4	; 0x68a4 <__gesf2>
    508c:	18 16       	cp	r1, r24
    508e:	6c f0       	brlt	.+26     	; 0x50aa <Avoid+0x222>
    5090:	97 01       	movw	r18, r14
    5092:	60 2f       	mov	r22, r16
    5094:	71 2f       	mov	r23, r17
    5096:	83 2f       	mov	r24, r19
    5098:	92 2f       	mov	r25, r18
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	40 ef       	ldi	r20, 0xF0	; 240
    50a0:	51 ec       	ldi	r21, 0xC1	; 193
    50a2:	0e 94 62 32 	call	0x64c4	; 0x64c4 <__cmpsf2>
    50a6:	87 ff       	sbrs	r24, 7
    50a8:	04 c0       	rjmp	.+8      	; 0x50b2 <Avoid+0x22a>
    50aa:	00 e0       	ldi	r16, 0x00	; 0
    50ac:	10 e0       	ldi	r17, 0x00	; 0
    50ae:	ff 24       	eor	r15, r15
    50b0:	ee 24       	eor	r14, r14
	
		zig=0;
		if(g_psd[l] <= pm) zig += (g_psd[l]-pm)*3.5;
    50b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    50b4:	be 85       	ldd	r27, Y+14	; 0x0e
    50b6:	8c 91       	ld	r24, X
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	ed 81       	ldd	r30, Y+5	; 0x05
    50bc:	fe 81       	ldd	r31, Y+6	; 0x06
    50be:	e8 17       	cp	r30, r24
    50c0:	f9 07       	cpc	r31, r25
    50c2:	cc f0       	brlt	.+50     	; 0x50f6 <Avoid+0x26e>
    50c4:	6c 91       	ld	r22, X
    50c6:	70 e0       	ldi	r23, 0x00	; 0
    50c8:	6e 1b       	sub	r22, r30
    50ca:	7f 0b       	sbc	r23, r31
    50cc:	88 27       	eor	r24, r24
    50ce:	77 fd       	sbrc	r23, 7
    50d0:	80 95       	com	r24
    50d2:	98 2f       	mov	r25, r24
    50d4:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e6       	ldi	r20, 0x60	; 96
    50de:	50 e4       	ldi	r21, 0x40	; 64
    50e0:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	a9 01       	movw	r20, r18
    50ea:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    50ee:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    50f2:	5b 01       	movw	r10, r22
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <Avoid+0x272>

		e = s-gyro;
		e *= (sp+10)/10;
		if(e > 30 || e< -30) e= 0;			
	
		zig=0;
    50f6:	aa 24       	eor	r10, r10
    50f8:	bb 24       	eor	r11, r11
		if(g_psd[l] <= pm) zig += (g_psd[l]-pm)*3.5;
		if(g_psd[r] <= pm2) zig += (g_psd[r]-pm2)*-3.5;
    50fa:	af 85       	ldd	r26, Y+15	; 0x0f
    50fc:	b8 89       	ldd	r27, Y+16	; 0x10
    50fe:	8c 91       	ld	r24, X
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	ef 81       	ldd	r30, Y+7	; 0x07
    5104:	f8 85       	ldd	r31, Y+8	; 0x08
    5106:	e8 17       	cp	r30, r24
    5108:	f9 07       	cpc	r31, r25
    510a:	2c f1       	brlt	.+74     	; 0x5156 <Avoid+0x2ce>
    510c:	6c 90       	ld	r6, X
    510e:	b5 01       	movw	r22, r10
    5110:	88 27       	eor	r24, r24
    5112:	77 fd       	sbrc	r23, 7
    5114:	80 95       	com	r24
    5116:	98 2f       	mov	r25, r24
    5118:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    511c:	5b 01       	movw	r10, r22
    511e:	6c 01       	movw	r12, r24
    5120:	66 2d       	mov	r22, r6
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	2f 81       	ldd	r18, Y+7	; 0x07
    5126:	38 85       	ldd	r19, Y+8	; 0x08
    5128:	62 1b       	sub	r22, r18
    512a:	73 0b       	sbc	r23, r19
    512c:	88 27       	eor	r24, r24
    512e:	77 fd       	sbrc	r23, 7
    5130:	80 95       	com	r24
    5132:	98 2f       	mov	r25, r24
    5134:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	40 e6       	ldi	r20, 0x60	; 96
    513e:	50 ec       	ldi	r21, 0xC0	; 192
    5140:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5144:	9b 01       	movw	r18, r22
    5146:	ac 01       	movw	r20, r24
    5148:	c6 01       	movw	r24, r12
    514a:	b5 01       	movw	r22, r10
    514c:	0e 94 89 31 	call	0x6312	; 0x6312 <__addsf3>
    5150:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5154:	5b 01       	movw	r10, r22

		if(dis) { if(SensorIn(ps, dis)) {LE return;} }
    5156:	89 85       	ldd	r24, Y+9	; 0x09
    5158:	9a 85       	ldd	r25, Y+10	; 0x0a
    515a:	00 97       	sbiw	r24, 0x00	; 0
    515c:	41 f0       	breq	.+16     	; 0x516e <Avoid+0x2e6>
    515e:	89 81       	ldd	r24, Y+1	; 0x01
    5160:	9a 81       	ldd	r25, Y+2	; 0x02
    5162:	69 85       	ldd	r22, Y+9	; 0x09
    5164:	7a 85       	ldd	r23, Y+10	; 0x0a
    5166:	0e 94 3c 11 	call	0x2278	; 0x2278 <SensorIn>
    516a:	00 97       	sbiw	r24, 0x00	; 0
    516c:	c1 f4       	brne	.+48     	; 0x519e <Avoid+0x316>

		if(!oc)oc=1;
    516e:	80 91 2a 02 	lds	r24, 0x022A
    5172:	90 91 2b 02 	lds	r25, 0x022B
    5176:	00 97       	sbiw	r24, 0x00	; 0
    5178:	31 f4       	brne	.+12     	; 0x5186 <Avoid+0x2fe>
    517a:	a1 e0       	ldi	r26, 0x01	; 1
    517c:	b0 e0       	ldi	r27, 0x00	; 0
    517e:	b0 93 2b 02 	sts	0x022B, r27
    5182:	a0 93 2a 02 	sts	0x022A, r26
		if(oc>tot){LE return ;}
    5186:	80 91 4f 03 	lds	r24, 0x034F
    518a:	90 91 50 03 	lds	r25, 0x0350
    518e:	20 91 2a 02 	lds	r18, 0x022A
    5192:	30 91 2b 02 	lds	r19, 0x022B
    5196:	82 17       	cp	r24, r18
    5198:	93 07       	cpc	r25, r19
    519a:	0c f0       	brlt	.+2      	; 0x519e <Avoid+0x316>
    519c:	52 c0       	rjmp	.+164    	; 0x5242 <Avoid+0x3ba>
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	90 e0       	ldi	r25, 0x00	; 0
    51a2:	dc 01       	movw	r26, r24
    51a4:	80 93 89 02 	sts	0x0289, r24
    51a8:	90 93 8a 02 	sts	0x028A, r25
    51ac:	a0 93 8b 02 	sts	0x028B, r26
    51b0:	b0 93 8c 02 	sts	0x028C, r27
    51b4:	80 91 89 02 	lds	r24, 0x0289
    51b8:	90 91 8a 02 	lds	r25, 0x028A
    51bc:	a0 91 8b 02 	lds	r26, 0x028B
    51c0:	b0 91 8c 02 	lds	r27, 0x028C
    51c4:	80 93 13 03 	sts	0x0313, r24
    51c8:	90 93 14 03 	sts	0x0314, r25
    51cc:	a0 93 15 03 	sts	0x0315, r26
    51d0:	b0 93 16 03 	sts	0x0316, r27
    51d4:	80 91 13 03 	lds	r24, 0x0313
    51d8:	90 91 14 03 	lds	r25, 0x0314
    51dc:	a0 91 15 03 	lds	r26, 0x0315
    51e0:	b0 91 16 03 	lds	r27, 0x0316
    51e4:	80 93 7d 02 	sts	0x027D, r24
    51e8:	90 93 7e 02 	sts	0x027E, r25
    51ec:	a0 93 7f 02 	sts	0x027F, r26
    51f0:	b0 93 80 02 	sts	0x0280, r27
    51f4:	60 91 7d 02 	lds	r22, 0x027D
    51f8:	70 91 7e 02 	lds	r23, 0x027E
    51fc:	80 91 7f 02 	lds	r24, 0x027F
    5200:	90 91 80 02 	lds	r25, 0x0280
    5204:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5208:	70 93 2b 02 	sts	0x022B, r23
    520c:	60 93 2a 02 	sts	0x022A, r22
		speed(-zig*d, gsp[1], (double)e, wa);
		
	}
}
    5210:	68 96       	adiw	r28, 0x18	; 24
    5212:	0f b6       	in	r0, 0x3f	; 63
    5214:	f8 94       	cli
    5216:	de bf       	out	0x3e, r29	; 62
    5218:	0f be       	out	0x3f, r0	; 63
    521a:	cd bf       	out	0x3d, r28	; 61
    521c:	cf 91       	pop	r28
    521e:	df 91       	pop	r29
    5220:	1f 91       	pop	r17
    5222:	0f 91       	pop	r16
    5224:	ff 90       	pop	r15
    5226:	ef 90       	pop	r14
    5228:	df 90       	pop	r13
    522a:	cf 90       	pop	r12
    522c:	bf 90       	pop	r11
    522e:	af 90       	pop	r10
    5230:	9f 90       	pop	r9
    5232:	8f 90       	pop	r8
    5234:	7f 90       	pop	r7
    5236:	6f 90       	pop	r6
    5238:	5f 90       	pop	r5
    523a:	4f 90       	pop	r4
    523c:	3f 90       	pop	r3
    523e:	2f 90       	pop	r2
    5240:	08 95       	ret

		if(dis) { if(SensorIn(ps, dis)) {LE return;} }

		if(!oc)oc=1;
		if(oc>tot){LE return ;}
		speed(-zig*d, gsp[1], (double)e, wa);
    5242:	20 90 43 03 	lds	r2, 0x0343
    5246:	30 90 44 03 	lds	r3, 0x0344
    524a:	40 90 45 03 	lds	r4, 0x0345
    524e:	50 90 46 03 	lds	r5, 0x0346
    5252:	b0 94       	com	r11
    5254:	a1 94       	neg	r10
    5256:	b1 08       	sbc	r11, r1
    5258:	b3 94       	inc	r11
    525a:	eb 81       	ldd	r30, Y+3	; 0x03
    525c:	fc 81       	ldd	r31, Y+4	; 0x04
    525e:	ae 9e       	mul	r10, r30
    5260:	b0 01       	movw	r22, r0
    5262:	af 9e       	mul	r10, r31
    5264:	70 0d       	add	r23, r0
    5266:	be 9e       	mul	r11, r30
    5268:	70 0d       	add	r23, r0
    526a:	11 24       	eor	r1, r1
    526c:	88 27       	eor	r24, r24
    526e:	77 fd       	sbrc	r23, 7
    5270:	80 95       	com	r24
    5272:	98 2f       	mov	r25, r24
    5274:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5278:	5b 01       	movw	r10, r22
    527a:	6c 01       	movw	r12, r24
    527c:	60 91 50 02 	lds	r22, 0x0250
    5280:	70 91 51 02 	lds	r23, 0x0251
    5284:	88 27       	eor	r24, r24
    5286:	77 fd       	sbrc	r23, 7
    5288:	80 95       	com	r24
    528a:	98 2f       	mov	r25, r24
    528c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5290:	3b 01       	movw	r6, r22
    5292:	4c 01       	movw	r8, r24
    5294:	c6 01       	movw	r24, r12
    5296:	b5 01       	movw	r22, r10
    5298:	a2 01       	movw	r20, r4
    529a:	91 01       	movw	r18, r2
    529c:	af 2d       	mov	r26, r15
    529e:	be 2d       	mov	r27, r14
    52a0:	78 01       	movw	r14, r16
    52a2:	8d 01       	movw	r16, r26
    52a4:	64 01       	movw	r12, r8
    52a6:	53 01       	movw	r10, r6
    52a8:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
		
	}
    52ac:	bc ce       	rjmp	.-648    	; 0x5026 <Avoid+0x19e>

000052ae <AB>:
}

void AB(int yp, int ym ,int xp, int xm, int zp, int zm, int xsp, int ysp)
{
    52ae:	2f 92       	push	r2
    52b0:	3f 92       	push	r3
    52b2:	4f 92       	push	r4
    52b4:	5f 92       	push	r5
    52b6:	6f 92       	push	r6
    52b8:	7f 92       	push	r7
    52ba:	8f 92       	push	r8
    52bc:	9f 92       	push	r9
    52be:	af 92       	push	r10
    52c0:	bf 92       	push	r11
    52c2:	cf 92       	push	r12
    52c4:	df 92       	push	r13
    52c6:	ef 92       	push	r14
    52c8:	ff 92       	push	r15
    52ca:	0f 93       	push	r16
    52cc:	1f 93       	push	r17
    52ce:	df 93       	push	r29
    52d0:	cf 93       	push	r28
    52d2:	cd b7       	in	r28, 0x3d	; 61
    52d4:	de b7       	in	r29, 0x3e	; 62
    52d6:	c2 54       	subi	r28, 0x42	; 66
    52d8:	d0 40       	sbci	r29, 0x00	; 0
    52da:	0f b6       	in	r0, 0x3f	; 63
    52dc:	f8 94       	cli
    52de:	de bf       	out	0x3e, r29	; 62
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	cd bf       	out	0x3d, r28	; 61
    52e4:	9a 87       	std	Y+10, r25	; 0x0a
    52e6:	89 87       	std	Y+9, r24	; 0x09
    52e8:	78 8b       	std	Y+16, r23	; 0x10
    52ea:	6f 87       	std	Y+15, r22	; 0x0f
    52ec:	1a 01       	movw	r2, r20
    52ee:	38 87       	std	Y+8, r19	; 0x08
    52f0:	2f 83       	std	Y+7, r18	; 0x07
    52f2:	28 01       	movw	r4, r16
    52f4:	f8 8e       	std	Y+24, r15	; 0x18
    52f6:	ef 8a       	std	Y+23, r14	; 0x17
    52f8:	ba 82       	std	Y+2, r11	; 0x02
    52fa:	a9 82       	std	Y+1, r10	; 0x01
	ginit("AB");
    52fc:	10 92 03 02 	sts	0x0203, r1
    5300:	10 92 02 02 	sts	0x0202, r1
    5304:	10 92 50 03 	sts	0x0350, r1
    5308:	10 92 4f 03 	sts	0x034F, r1
    530c:	80 91 4f 03 	lds	r24, 0x034F
    5310:	90 91 50 03 	lds	r25, 0x0350
    5314:	90 93 2b 02 	sts	0x022B, r25
    5318:	80 93 2a 02 	sts	0x022A, r24
    531c:	60 e0       	ldi	r22, 0x00	; 0
    531e:	70 e0       	ldi	r23, 0x00	; 0
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	dc 01       	movw	r26, r24
    5326:	9b 01       	movw	r18, r22
    5328:	22 0f       	add	r18, r18
    532a:	33 1f       	adc	r19, r19
    532c:	22 0f       	add	r18, r18
    532e:	33 1f       	adc	r19, r19
    5330:	f9 01       	movw	r30, r18
    5332:	e1 5c       	subi	r30, 0xC1	; 193
    5334:	fc 4f       	sbci	r31, 0xFC	; 252
    5336:	80 83       	st	Z, r24
    5338:	91 83       	std	Z+1, r25	; 0x01
    533a:	a2 83       	std	Z+2, r26	; 0x02
    533c:	b3 83       	std	Z+3, r27	; 0x03
    533e:	e0 80       	ld	r14, Z
    5340:	f1 80       	ldd	r15, Z+1	; 0x01
    5342:	02 81       	ldd	r16, Z+2	; 0x02
    5344:	13 81       	ldd	r17, Z+3	; 0x03
    5346:	23 5d       	subi	r18, 0xD3	; 211
    5348:	3c 4f       	sbci	r19, 0xFC	; 252
    534a:	f9 01       	movw	r30, r18
    534c:	e0 82       	st	Z, r14
    534e:	f1 82       	std	Z+1, r15	; 0x01
    5350:	02 83       	std	Z+2, r16	; 0x02
    5352:	13 83       	std	Z+3, r17	; 0x03
    5354:	6f 5f       	subi	r22, 0xFF	; 255
    5356:	7f 4f       	sbci	r23, 0xFF	; 255
    5358:	64 30       	cpi	r22, 0x04	; 4
    535a:	71 05       	cpc	r23, r1
    535c:	21 f7       	brne	.-56     	; 0x5326 <AB+0x78>
    535e:	00 d0       	rcall	.+0      	; 0x5360 <AB+0xb2>
    5360:	00 d0       	rcall	.+0      	; 0x5362 <AB+0xb4>
    5362:	00 d0       	rcall	.+0      	; 0x5364 <AB+0xb6>
    5364:	ed b7       	in	r30, 0x3d	; 61
    5366:	fe b7       	in	r31, 0x3e	; 62
    5368:	31 96       	adiw	r30, 0x01	; 1
    536a:	07 e1       	ldi	r16, 0x17	; 23
    536c:	13 e0       	ldi	r17, 0x03	; 3
    536e:	ad b7       	in	r26, 0x3d	; 61
    5370:	be b7       	in	r27, 0x3e	; 62
    5372:	12 96       	adiw	r26, 0x02	; 2
    5374:	1c 93       	st	X, r17
    5376:	0e 93       	st	-X, r16
    5378:	11 97       	sbiw	r26, 0x01	; 1
    537a:	82 eb       	ldi	r24, 0xB2	; 178
    537c:	91 e0       	ldi	r25, 0x01	; 1
    537e:	93 83       	std	Z+3, r25	; 0x03
    5380:	82 83       	std	Z+2, r24	; 0x02
    5382:	82 ef       	ldi	r24, 0xF2	; 242
    5384:	91 e0       	ldi	r25, 0x01	; 1
    5386:	95 83       	std	Z+5, r25	; 0x05
    5388:	84 83       	std	Z+4, r24	; 0x04
    538a:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    538e:	ed b7       	in	r30, 0x3d	; 61
    5390:	fe b7       	in	r31, 0x3e	; 62
    5392:	36 96       	adiw	r30, 0x06	; 6
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	fe bf       	out	0x3e, r31	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	ed bf       	out	0x3d, r30	; 61
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	67 e0       	ldi	r22, 0x07	; 7
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	a8 01       	movw	r20, r16
    53a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>

	int x=0,y=0,z=0;
	int xbo=1,ybo=1,zbo=1;
	double s=gyro,e;
    53ac:	20 91 68 02 	lds	r18, 0x0268
    53b0:	30 91 69 02 	lds	r19, 0x0269
    53b4:	40 91 6a 02 	lds	r20, 0x026A
    53b8:	50 91 6b 02 	lds	r21, 0x026B
    53bc:	2b 8f       	std	Y+27, r18	; 0x1b
    53be:	3c 8f       	std	Y+28, r19	; 0x1c
    53c0:	4d 8f       	std	Y+29, r20	; 0x1d
    53c2:	5e 8f       	std	Y+30, r21	; 0x1e
	double xra, yra;

	int ap = xp+zp; if((xp&&zp)) ap/=2;
    53c4:	b2 01       	movw	r22, r4
    53c6:	62 0d       	add	r22, r2
    53c8:	73 1d       	adc	r23, r3
    53ca:	21 14       	cp	r2, r1
    53cc:	31 04       	cpc	r3, r1
    53ce:	41 f0       	breq	.+16     	; 0x53e0 <AB+0x132>
    53d0:	41 14       	cp	r4, r1
    53d2:	51 04       	cpc	r5, r1
    53d4:	29 f0       	breq	.+10     	; 0x53e0 <AB+0x132>
    53d6:	cb 01       	movw	r24, r22
    53d8:	62 e0       	ldi	r22, 0x02	; 2
    53da:	70 e0       	ldi	r23, 0x00	; 0
    53dc:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
	int ya = (abs(yp*40-360) > abs(yp*40))?	yp*40: yp*40-360;
    53e0:	88 e2       	ldi	r24, 0x28	; 40
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	49 85       	ldd	r20, Y+9	; 0x09
    53e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    53e8:	48 9f       	mul	r20, r24
    53ea:	90 01       	movw	r18, r0
    53ec:	49 9f       	mul	r20, r25
    53ee:	30 0d       	add	r19, r0
    53f0:	58 9f       	mul	r21, r24
    53f2:	30 0d       	add	r19, r0
    53f4:	11 24       	eor	r1, r1
    53f6:	c9 01       	movw	r24, r18
    53f8:	88 56       	subi	r24, 0x68	; 104
    53fa:	91 40       	sbci	r25, 0x01	; 1
    53fc:	fc 01       	movw	r30, r24
    53fe:	97 ff       	sbrs	r25, 7
    5400:	04 c0       	rjmp	.+8      	; 0x540a <AB+0x15c>
    5402:	ee 27       	eor	r30, r30
    5404:	ff 27       	eor	r31, r31
    5406:	e8 1b       	sub	r30, r24
    5408:	f9 0b       	sbc	r31, r25
    540a:	a9 01       	movw	r20, r18
    540c:	37 ff       	sbrs	r19, 7
    540e:	04 c0       	rjmp	.+8      	; 0x5418 <AB+0x16a>
    5410:	44 27       	eor	r20, r20
    5412:	55 27       	eor	r21, r21
    5414:	42 1b       	sub	r20, r18
    5416:	53 0b       	sbc	r21, r19
    5418:	4e 17       	cp	r20, r30
    541a:	5f 07       	cpc	r21, r31
    541c:	0c f4       	brge	.+2      	; 0x5420 <AB+0x172>
    541e:	c9 01       	movw	r24, r18

	if((ap*40+wa) > 180) xbo*=-1;
    5420:	40 91 50 02 	lds	r20, 0x0250
    5424:	50 91 51 02 	lds	r21, 0x0251
    5428:	e8 e2       	ldi	r30, 0x28	; 40
    542a:	f0 e0       	ldi	r31, 0x00	; 0
    542c:	6e 9f       	mul	r22, r30
    542e:	90 01       	movw	r18, r0
    5430:	6f 9f       	mul	r22, r31
    5432:	30 0d       	add	r19, r0
    5434:	7e 9f       	mul	r23, r30
    5436:	30 0d       	add	r19, r0
    5438:	11 24       	eor	r1, r1
    543a:	24 0f       	add	r18, r20
    543c:	35 1f       	adc	r19, r21
    543e:	25 3b       	cpi	r18, 0xB5	; 181
    5440:	31 05       	cpc	r19, r1
    5442:	2c f4       	brge	.+10     	; 0x544e <AB+0x1a0>
void AB(int yp, int ym ,int xp, int xm, int zp, int zm, int xsp, int ysp)
{
	ginit("AB");

	int x=0,y=0,z=0;
	int xbo=1,ybo=1,zbo=1;
    5444:	61 e0       	ldi	r22, 0x01	; 1
    5446:	70 e0       	ldi	r23, 0x00	; 0
    5448:	7c 83       	std	Y+4, r23	; 0x04
    544a:	6b 83       	std	Y+3, r22	; 0x03
    544c:	04 c0       	rjmp	.+8      	; 0x5456 <AB+0x1a8>
	double xra, yra;

	int ap = xp+zp; if((xp&&zp)) ap/=2;
	int ya = (abs(yp*40-360) > abs(yp*40))?	yp*40: yp*40-360;

	if((ap*40+wa) > 180) xbo*=-1;
    544e:	af ef       	ldi	r26, 0xFF	; 255
    5450:	bf ef       	ldi	r27, 0xFF	; 255
    5452:	bc 83       	std	Y+4, r27	; 0x04
    5454:	ab 83       	std	Y+3, r26	; 0x03
	if(abs(ya+wa) < 90) ybo*=-1;
    5456:	84 0f       	add	r24, r20
    5458:	95 1f       	adc	r25, r21
    545a:	87 5a       	subi	r24, 0xA7	; 167
    545c:	9f 4f       	sbci	r25, 0xFF	; 255
    545e:	83 3b       	cpi	r24, 0xB3	; 179
    5460:	91 05       	cpc	r25, r1
    5462:	28 f0       	brcs	.+10     	; 0x546e <AB+0x1c0>
void AB(int yp, int ym ,int xp, int xm, int zp, int zm, int xsp, int ysp)
{
	ginit("AB");

	int x=0,y=0,z=0;
	int xbo=1,ybo=1,zbo=1;
    5464:	e1 e0       	ldi	r30, 0x01	; 1
    5466:	f0 e0       	ldi	r31, 0x00	; 0
    5468:	fa 8b       	std	Y+18, r31	; 0x12
    546a:	e9 8b       	std	Y+17, r30	; 0x11
    546c:	04 c0       	rjmp	.+8      	; 0x5476 <AB+0x1c8>

	int ap = xp+zp; if((xp&&zp)) ap/=2;
	int ya = (abs(yp*40-360) > abs(yp*40))?	yp*40: yp*40-360;

	if((ap*40+wa) > 180) xbo*=-1;
	if(abs(ya+wa) < 90) ybo*=-1;
    546e:	4f ef       	ldi	r20, 0xFF	; 255
    5470:	5f ef       	ldi	r21, 0xFF	; 255
    5472:	5a 8b       	std	Y+18, r21	; 0x12
    5474:	49 8b       	std	Y+17, r20	; 0x11
	if((ap*40+wa) > 180) zbo = xbo<0? 1:-1;
    5476:	25 3b       	cpi	r18, 0xB5	; 181
    5478:	31 05       	cpc	r19, r1
    547a:	5c f0       	brlt	.+22     	; 0x5492 <AB+0x1e4>
    547c:	6b 81       	ldd	r22, Y+3	; 0x03
    547e:	7c 81       	ldd	r23, Y+4	; 0x04
    5480:	8f ef       	ldi	r24, 0xFF	; 255
    5482:	6f 3f       	cpi	r22, 0xFF	; 255
    5484:	78 07       	cpc	r23, r24
    5486:	81 f4       	brne	.+32     	; 0x54a8 <AB+0x1fa>
    5488:	a1 e0       	ldi	r26, 0x01	; 1
    548a:	b0 e0       	ldi	r27, 0x00	; 0
    548c:	be 83       	std	Y+6, r27	; 0x06
    548e:	ad 83       	std	Y+5, r26	; 0x05
    5490:	14 c0       	rjmp	.+40     	; 0x54ba <AB+0x20c>
	else	zbo = xbo<0? -1:1;
    5492:	eb 81       	ldd	r30, Y+3	; 0x03
    5494:	fc 81       	ldd	r31, Y+4	; 0x04
    5496:	2f ef       	ldi	r18, 0xFF	; 255
    5498:	ef 3f       	cpi	r30, 0xFF	; 255
    549a:	f2 07       	cpc	r31, r18
    549c:	51 f4       	brne	.+20     	; 0x54b2 <AB+0x204>
    549e:	4f ef       	ldi	r20, 0xFF	; 255
    54a0:	5f ef       	ldi	r21, 0xFF	; 255
    54a2:	5e 83       	std	Y+6, r21	; 0x06
    54a4:	4d 83       	std	Y+5, r20	; 0x05
    54a6:	09 c0       	rjmp	.+18     	; 0x54ba <AB+0x20c>
	int ap = xp+zp; if((xp&&zp)) ap/=2;
	int ya = (abs(yp*40-360) > abs(yp*40))?	yp*40: yp*40-360;

	if((ap*40+wa) > 180) xbo*=-1;
	if(abs(ya+wa) < 90) ybo*=-1;
	if((ap*40+wa) > 180) zbo = xbo<0? 1:-1;
    54a8:	6f ef       	ldi	r22, 0xFF	; 255
    54aa:	7f ef       	ldi	r23, 0xFF	; 255
    54ac:	7e 83       	std	Y+6, r23	; 0x06
    54ae:	6d 83       	std	Y+5, r22	; 0x05
    54b0:	04 c0       	rjmp	.+8      	; 0x54ba <AB+0x20c>
	else	zbo = xbo<0? -1:1;
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	9e 83       	std	Y+6, r25	; 0x06
    54b8:	8d 83       	std	Y+5, r24	; 0x05
	
	xra = (xm-10)/xsp;
    54ba:	8f 81       	ldd	r24, Y+7	; 0x07
    54bc:	98 85       	ldd	r25, Y+8	; 0x08
    54be:	0a 97       	sbiw	r24, 0x0a	; 10
    54c0:	b6 01       	movw	r22, r12
    54c2:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    54c6:	88 27       	eor	r24, r24
    54c8:	77 fd       	sbrc	r23, 7
    54ca:	80 95       	com	r24
    54cc:	98 2f       	mov	r25, r24
    54ce:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    54d2:	6f a3       	std	Y+39, r22	; 0x27
    54d4:	78 a7       	std	Y+40, r23	; 0x28
    54d6:	89 a7       	std	Y+41, r24	; 0x29
    54d8:	9a a7       	std	Y+42, r25	; 0x2a
	yra = (ym-10)/ysp;
    54da:	8f 85       	ldd	r24, Y+15	; 0x0f
    54dc:	98 89       	ldd	r25, Y+16	; 0x10
    54de:	0a 97       	sbiw	r24, 0x0a	; 10
    54e0:	69 81       	ldd	r22, Y+1	; 0x01
    54e2:	7a 81       	ldd	r23, Y+2	; 0x02
    54e4:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    54e8:	88 27       	eor	r24, r24
    54ea:	77 fd       	sbrc	r23, 7
    54ec:	80 95       	com	r24
    54ee:	98 2f       	mov	r25, r24
    54f0:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    54f4:	6b a7       	std	Y+43, r22	; 0x2b
    54f6:	7c a7       	std	Y+44, r23	; 0x2c
    54f8:	8d a7       	std	Y+45, r24	; 0x2d
    54fa:	9e a7       	std	Y+46, r25	; 0x2e

		if(!zm){
			get_gyro();
			z = gyro-s;
			if(ysp) z *= (ysp+10)/10;			
			else	z *= (xsp+10)/10;
    54fc:	c6 01       	movw	r24, r12
    54fe:	0a 96       	adiw	r24, 0x0a	; 10
    5500:	2a e0       	ldi	r18, 0x0A	; 10
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	b9 01       	movw	r22, r18
    5506:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    550a:	7c a3       	std	Y+36, r23	; 0x24
    550c:	6b a3       	std	Y+35, r22	; 0x23
			z=(psd[xp]-psd[zp]-xm+zm)*zbo* 1.2;

		if(!zm){
			get_gyro();
			z = gyro-s;
			if(ysp) z *= (ysp+10)/10;			
    550e:	89 81       	ldd	r24, Y+1	; 0x01
    5510:	9a 81       	ldd	r25, Y+2	; 0x02
    5512:	0a 96       	adiw	r24, 0x0a	; 10
    5514:	b9 01       	movw	r22, r18
    5516:	0e 94 76 38 	call	0x70ec	; 0x70ec <__divmodhi4>
    551a:	7e a3       	std	Y+38, r23	; 0x26
    551c:	6d a3       	std	Y+37, r22	; 0x25

void AB(int yp, int ym ,int xp, int xm, int zp, int zm, int xsp, int ysp)
{
	ginit("AB");

	int x=0,y=0,z=0;
    551e:	66 24       	eor	r6, r6
    5520:	77 24       	eor	r7, r7
    5522:	88 24       	eor	r8, r8
    5524:	99 24       	eor	r9, r9
	while(1)
	{
		
		if(ym)
		{
			y=(psd[yp]-ym)*ybo;
    5526:	a9 85       	ldd	r26, Y+9	; 0x09
    5528:	ba 85       	ldd	r27, Y+10	; 0x0a
    552a:	ae 5c       	subi	r26, 0xCE	; 206
    552c:	bd 4f       	sbci	r27, 0xFD	; 253
    552e:	ba 87       	std	Y+10, r27	; 0x0a
    5530:	a9 87       	std	Y+9, r26	; 0x09
			y/=yra;
		}

		if(xm)
		{
			x=(psd[xp]-xm)*xbo;
    5532:	f1 01       	movw	r30, r2
    5534:	ee 5c       	subi	r30, 0xCE	; 206
    5536:	fd 4f       	sbci	r31, 0xFD	; 253
    5538:	fa 8f       	std	Y+26, r31	; 0x1a
    553a:	e9 8f       	std	Y+25, r30	; 0x19
			x/=xra;
		}

		if(zm)
			z=(psd[xp]-psd[zp]-xm+zm)*zbo* 1.2;
    553c:	92 01       	movw	r18, r4
    553e:	2e 5c       	subi	r18, 0xCE	; 206
    5540:	3d 4f       	sbci	r19, 0xFD	; 253
    5542:	38 ab       	std	Y+48, r19	; 0x30
    5544:	2f a7       	std	Y+47, r18	; 0x2f
			if(ysp) z *= (ysp+10)/10;			
			else	z *= (xsp+10)/10;
			if(z > 30 || z < -30) z=0;
		}

		x= (int)LF(xsp,-xsp,x);
    5546:	a6 01       	movw	r20, r12
    5548:	66 27       	eor	r22, r22
    554a:	57 fd       	sbrc	r21, 7
    554c:	60 95       	com	r22
    554e:	76 2f       	mov	r23, r22
    5550:	49 ab       	std	Y+49, r20	; 0x31
    5552:	5a ab       	std	Y+50, r21	; 0x32
    5554:	6b ab       	std	Y+51, r22	; 0x33
    5556:	7c ab       	std	Y+52, r23	; 0x34
    5558:	d0 94       	com	r13
    555a:	c1 94       	neg	r12
    555c:	d1 08       	sbc	r13, r1
    555e:	d3 94       	inc	r13
    5560:	b6 01       	movw	r22, r12
    5562:	88 27       	eor	r24, r24
    5564:	77 fd       	sbrc	r23, 7
    5566:	80 95       	com	r24
    5568:	98 2f       	mov	r25, r24
    556a:	6d ab       	std	Y+53, r22	; 0x35
    556c:	7e ab       	std	Y+54, r23	; 0x36
    556e:	8f ab       	std	Y+55, r24	; 0x37
    5570:	98 af       	std	Y+56, r25	; 0x38
		y= (int)LF(ysp,-ysp,y);
    5572:	89 81       	ldd	r24, Y+1	; 0x01
    5574:	9a 81       	ldd	r25, Y+2	; 0x02
    5576:	aa 27       	eor	r26, r26
    5578:	97 fd       	sbrc	r25, 7
    557a:	a0 95       	com	r26
    557c:	ba 2f       	mov	r27, r26
    557e:	89 af       	std	Y+57, r24	; 0x39
    5580:	9a af       	std	Y+58, r25	; 0x3a
    5582:	ab af       	std	Y+59, r26	; 0x3b
    5584:	bc af       	std	Y+60, r27	; 0x3c
    5586:	89 81       	ldd	r24, Y+1	; 0x01
    5588:	9a 81       	ldd	r25, Y+2	; 0x02
    558a:	90 95       	com	r25
    558c:	81 95       	neg	r24
    558e:	9f 4f       	sbci	r25, 0xFF	; 255
    5590:	9c 01       	movw	r18, r24
    5592:	44 27       	eor	r20, r20
    5594:	37 fd       	sbrc	r19, 7
    5596:	40 95       	com	r20
    5598:	54 2f       	mov	r21, r20
    559a:	21 96       	adiw	r28, 0x01	; 1
    559c:	2c af       	std	Y+60, r18	; 0x3c
    559e:	3d af       	std	Y+61, r19	; 0x3d
    55a0:	4e af       	std	Y+62, r20	; 0x3e
    55a2:	5f af       	std	Y+63, r21	; 0x3f
    55a4:	21 97       	sbiw	r28, 0x01	; 1


	while(1)
	{
		
		if(ym)
    55a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    55a8:	58 89       	ldd	r21, Y+16	; 0x10
    55aa:	41 15       	cp	r20, r1
    55ac:	51 05       	cpc	r21, r1
    55ae:	11 f1       	breq	.+68     	; 0x55f4 <AB+0x346>
		{
			y=(psd[yp]-ym)*ybo;
    55b0:	a9 85       	ldd	r26, Y+9	; 0x09
    55b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    55b4:	8c 91       	ld	r24, X
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	84 1b       	sub	r24, r20
    55ba:	95 0b       	sbc	r25, r21
    55bc:	e9 89       	ldd	r30, Y+17	; 0x11
    55be:	fa 89       	ldd	r31, Y+18	; 0x12
    55c0:	e8 9f       	mul	r30, r24
    55c2:	b0 01       	movw	r22, r0
    55c4:	e9 9f       	mul	r30, r25
    55c6:	70 0d       	add	r23, r0
    55c8:	f8 9f       	mul	r31, r24
    55ca:	70 0d       	add	r23, r0
    55cc:	11 24       	eor	r1, r1
			y/=yra;
    55ce:	88 27       	eor	r24, r24
    55d0:	77 fd       	sbrc	r23, 7
    55d2:	80 95       	com	r24
    55d4:	98 2f       	mov	r25, r24
    55d6:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    55da:	bb a5       	ldd	r27, Y+43	; 0x2b
    55dc:	ac a5       	ldd	r26, Y+44	; 0x2c
    55de:	0d a5       	ldd	r16, Y+45	; 0x2d
    55e0:	ee a4       	ldd	r14, Y+46	; 0x2e
    55e2:	2b 2f       	mov	r18, r27
    55e4:	3a 2f       	mov	r19, r26
    55e6:	40 2f       	mov	r20, r16
    55e8:	5e 2d       	mov	r21, r14
    55ea:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    55ee:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    55f2:	3b 01       	movw	r6, r22
		}

		if(xm)
    55f4:	2f 81       	ldd	r18, Y+7	; 0x07
    55f6:	38 85       	ldd	r19, Y+8	; 0x08
    55f8:	21 15       	cp	r18, r1
    55fa:	31 05       	cpc	r19, r1
    55fc:	11 f1       	breq	.+68     	; 0x5642 <AB+0x394>
		{
			x=(psd[xp]-xm)*xbo;
    55fe:	a9 8d       	ldd	r26, Y+25	; 0x19
    5600:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5602:	8c 91       	ld	r24, X
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	82 1b       	sub	r24, r18
    5608:	93 0b       	sbc	r25, r19
    560a:	eb 81       	ldd	r30, Y+3	; 0x03
    560c:	fc 81       	ldd	r31, Y+4	; 0x04
    560e:	e8 9f       	mul	r30, r24
    5610:	b0 01       	movw	r22, r0
    5612:	e9 9f       	mul	r30, r25
    5614:	70 0d       	add	r23, r0
    5616:	f8 9f       	mul	r31, r24
    5618:	70 0d       	add	r23, r0
    561a:	11 24       	eor	r1, r1
			x/=xra;
    561c:	88 27       	eor	r24, r24
    561e:	77 fd       	sbrc	r23, 7
    5620:	80 95       	com	r24
    5622:	98 2f       	mov	r25, r24
    5624:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5628:	bf a1       	ldd	r27, Y+39	; 0x27
    562a:	a8 a5       	ldd	r26, Y+40	; 0x28
    562c:	09 a5       	ldd	r16, Y+41	; 0x29
    562e:	ea a4       	ldd	r14, Y+42	; 0x2a
    5630:	2b 2f       	mov	r18, r27
    5632:	3a 2f       	mov	r19, r26
    5634:	40 2f       	mov	r20, r16
    5636:	5e 2d       	mov	r21, r14
    5638:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    563c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5640:	4b 01       	movw	r8, r22
		}

		if(zm)
    5642:	2f 89       	ldd	r18, Y+23	; 0x17
    5644:	38 8d       	ldd	r19, Y+24	; 0x18
    5646:	21 15       	cp	r18, r1
    5648:	31 05       	cpc	r19, r1
    564a:	69 f1       	breq	.+90     	; 0x56a6 <AB+0x3f8>
			z=(psd[xp]-psd[zp]-xm+zm)*zbo* 1.2;
    564c:	a9 8d       	ldd	r26, Y+25	; 0x19
    564e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5650:	8c 91       	ld	r24, X
    5652:	ef a5       	ldd	r30, Y+47	; 0x2f
    5654:	f8 a9       	ldd	r31, Y+48	; 0x30
    5656:	20 81       	ld	r18, Z
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	4f 81       	ldd	r20, Y+7	; 0x07
    565c:	58 85       	ldd	r21, Y+8	; 0x08
    565e:	84 1b       	sub	r24, r20
    5660:	95 0b       	sbc	r25, r21
    5662:	6f 89       	ldd	r22, Y+23	; 0x17
    5664:	78 8d       	ldd	r23, Y+24	; 0x18
    5666:	86 0f       	add	r24, r22
    5668:	97 1f       	adc	r25, r23
    566a:	82 1b       	sub	r24, r18
    566c:	91 09       	sbc	r25, r1
    566e:	ad 81       	ldd	r26, Y+5	; 0x05
    5670:	be 81       	ldd	r27, Y+6	; 0x06
    5672:	a8 9f       	mul	r26, r24
    5674:	b0 01       	movw	r22, r0
    5676:	a9 9f       	mul	r26, r25
    5678:	70 0d       	add	r23, r0
    567a:	b8 9f       	mul	r27, r24
    567c:	70 0d       	add	r23, r0
    567e:	11 24       	eor	r1, r1
    5680:	88 27       	eor	r24, r24
    5682:	77 fd       	sbrc	r23, 7
    5684:	80 95       	com	r24
    5686:	98 2f       	mov	r25, r24
    5688:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    568c:	2a e9       	ldi	r18, 0x9A	; 154
    568e:	39 e9       	ldi	r19, 0x99	; 153
    5690:	49 e9       	ldi	r20, 0x99	; 153
    5692:	5f e3       	ldi	r21, 0x3F	; 63
    5694:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5698:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    569c:	23 96       	adiw	r28, 0x03	; 3
    569e:	7f af       	std	Y+63, r23	; 0x3f
    56a0:	6e af       	std	Y+62, r22	; 0x3e
    56a2:	23 97       	sbiw	r28, 0x03	; 3
    56a4:	3d c0       	rjmp	.+122    	; 0x5720 <AB+0x472>

		if(!zm){
			get_gyro();
    56a6:	0e 94 46 08 	call	0x108c	; 0x108c <get_gyro>
			z = gyro-s;
    56aa:	60 91 68 02 	lds	r22, 0x0268
    56ae:	70 91 69 02 	lds	r23, 0x0269
    56b2:	80 91 6a 02 	lds	r24, 0x026A
    56b6:	90 91 6b 02 	lds	r25, 0x026B
    56ba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    56bc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    56be:	4d 8d       	ldd	r20, Y+29	; 0x1d
    56c0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    56c2:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    56c6:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
			if(ysp) z *= (ysp+10)/10;			
    56ca:	e9 81       	ldd	r30, Y+1	; 0x01
    56cc:	fa 81       	ldd	r31, Y+2	; 0x02
    56ce:	30 97       	sbiw	r30, 0x00	; 0
    56d0:	71 f0       	breq	.+28     	; 0x56ee <AB+0x440>
    56d2:	4d a1       	ldd	r20, Y+37	; 0x25
    56d4:	5e a1       	ldd	r21, Y+38	; 0x26
    56d6:	46 9f       	mul	r20, r22
    56d8:	90 01       	movw	r18, r0
    56da:	47 9f       	mul	r20, r23
    56dc:	30 0d       	add	r19, r0
    56de:	56 9f       	mul	r21, r22
    56e0:	30 0d       	add	r19, r0
    56e2:	11 24       	eor	r1, r1
    56e4:	23 96       	adiw	r28, 0x03	; 3
    56e6:	3f af       	std	Y+63, r19	; 0x3f
    56e8:	2e af       	std	Y+62, r18	; 0x3e
    56ea:	23 97       	sbiw	r28, 0x03	; 3
    56ec:	0d c0       	rjmp	.+26     	; 0x5708 <AB+0x45a>
			else	z *= (xsp+10)/10;
    56ee:	ab a1       	ldd	r26, Y+35	; 0x23
    56f0:	bc a1       	ldd	r27, Y+36	; 0x24
    56f2:	a6 9f       	mul	r26, r22
    56f4:	c0 01       	movw	r24, r0
    56f6:	a7 9f       	mul	r26, r23
    56f8:	90 0d       	add	r25, r0
    56fa:	b6 9f       	mul	r27, r22
    56fc:	90 0d       	add	r25, r0
    56fe:	11 24       	eor	r1, r1
    5700:	23 96       	adiw	r28, 0x03	; 3
    5702:	9f af       	std	Y+63, r25	; 0x3f
    5704:	8e af       	std	Y+62, r24	; 0x3e
    5706:	23 97       	sbiw	r28, 0x03	; 3
			if(z > 30 || z < -30) z=0;
    5708:	23 96       	adiw	r28, 0x03	; 3
    570a:	8e ad       	ldd	r24, Y+62	; 0x3e
    570c:	9f ad       	ldd	r25, Y+63	; 0x3f
    570e:	23 97       	sbiw	r28, 0x03	; 3
    5710:	4e 96       	adiw	r24, 0x1e	; 30
    5712:	8d 33       	cpi	r24, 0x3D	; 61
    5714:	91 05       	cpc	r25, r1
    5716:	20 f0       	brcs	.+8      	; 0x5720 <AB+0x472>
    5718:	23 96       	adiw	r28, 0x03	; 3
    571a:	1f ae       	std	Y+63, r1	; 0x3f
    571c:	1e ae       	std	Y+62, r1	; 0x3e
    571e:	23 97       	sbiw	r28, 0x03	; 3
		}

		x= (int)LF(xsp,-xsp,x);
    5720:	69 a9       	ldd	r22, Y+49	; 0x31
    5722:	7a a9       	ldd	r23, Y+50	; 0x32
    5724:	8b a9       	ldd	r24, Y+51	; 0x33
    5726:	9c a9       	ldd	r25, Y+52	; 0x34
    5728:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    572c:	6b 87       	std	Y+11, r22	; 0x0b
    572e:	7c 87       	std	Y+12, r23	; 0x0c
    5730:	8d 87       	std	Y+13, r24	; 0x0d
    5732:	9e 87       	std	Y+14, r25	; 0x0e
    5734:	6d a9       	ldd	r22, Y+53	; 0x35
    5736:	7e a9       	ldd	r23, Y+54	; 0x36
    5738:	8f a9       	ldd	r24, Y+55	; 0x37
    573a:	98 ad       	ldd	r25, Y+56	; 0x38
    573c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5740:	6b 8b       	std	Y+19, r22	; 0x13
    5742:	7c 8b       	std	Y+20, r23	; 0x14
    5744:	8d 8b       	std	Y+21, r24	; 0x15
    5746:	9e 8b       	std	Y+22, r25	; 0x16
    5748:	b4 01       	movw	r22, r8
    574a:	88 27       	eor	r24, r24
    574c:	77 fd       	sbrc	r23, 7
    574e:	80 95       	com	r24
    5750:	98 2f       	mov	r25, r24
    5752:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5756:	7b 01       	movw	r14, r22
    5758:	8c 01       	movw	r16, r24
    575a:	6b 85       	ldd	r22, Y+11	; 0x0b
    575c:	7c 85       	ldd	r23, Y+12	; 0x0c
    575e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5760:	9e 85       	ldd	r25, Y+14	; 0x0e
    5762:	2b 89       	ldd	r18, Y+19	; 0x13
    5764:	3c 89       	ldd	r19, Y+20	; 0x14
    5766:	4d 89       	ldd	r20, Y+21	; 0x15
    5768:	5e 89       	ldd	r21, Y+22	; 0x16
    576a:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    576e:	6f 8f       	std	Y+31, r22	; 0x1f
    5770:	78 a3       	std	Y+32, r23	; 0x20
    5772:	89 a3       	std	Y+33, r24	; 0x21
    5774:	9a a3       	std	Y+34, r25	; 0x22
		y= (int)LF(ysp,-ysp,y);
    5776:	69 ad       	ldd	r22, Y+57	; 0x39
    5778:	7a ad       	ldd	r23, Y+58	; 0x3a
    577a:	8b ad       	ldd	r24, Y+59	; 0x3b
    577c:	9c ad       	ldd	r25, Y+60	; 0x3c
    577e:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5782:	5b 01       	movw	r10, r22
    5784:	6c 01       	movw	r12, r24
    5786:	21 96       	adiw	r28, 0x01	; 1
    5788:	6c ad       	ldd	r22, Y+60	; 0x3c
    578a:	7d ad       	ldd	r23, Y+61	; 0x3d
    578c:	8e ad       	ldd	r24, Y+62	; 0x3e
    578e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5790:	21 97       	sbiw	r28, 0x01	; 1
    5792:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5796:	1b 01       	movw	r2, r22
    5798:	2c 01       	movw	r4, r24
    579a:	b3 01       	movw	r22, r6
    579c:	88 27       	eor	r24, r24
    579e:	77 fd       	sbrc	r23, 7
    57a0:	80 95       	com	r24
    57a2:	98 2f       	mov	r25, r24
    57a4:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    57a8:	7b 01       	movw	r14, r22
    57aa:	8c 01       	movw	r16, r24
    57ac:	c6 01       	movw	r24, r12
    57ae:	b5 01       	movw	r22, r10
    57b0:	a2 01       	movw	r20, r4
    57b2:	91 01       	movw	r18, r2
    57b4:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    57b8:	5b 01       	movw	r10, r22
    57ba:	6c 01       	movw	r12, r24
		z= (int)LF(xsp,-xsp,z);
    57bc:	23 96       	adiw	r28, 0x03	; 3
    57be:	ee ad       	ldd	r30, Y+62	; 0x3e
    57c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    57c2:	23 97       	sbiw	r28, 0x03	; 3
    57c4:	bf 01       	movw	r22, r30
    57c6:	88 27       	eor	r24, r24
    57c8:	77 fd       	sbrc	r23, 7
    57ca:	80 95       	com	r24
    57cc:	98 2f       	mov	r25, r24
    57ce:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    57d2:	7b 01       	movw	r14, r22
    57d4:	8c 01       	movw	r16, r24
    57d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    57da:	8d 85       	ldd	r24, Y+13	; 0x0d
    57dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    57de:	2b 89       	ldd	r18, Y+19	; 0x13
    57e0:	3c 89       	ldd	r19, Y+20	; 0x14
    57e2:	4d 89       	ldd	r20, Y+21	; 0x15
    57e4:	5e 89       	ldd	r21, Y+22	; 0x16
    57e6:	0e 94 c3 11 	call	0x2386	; 0x2386 <LF>
    57ea:	7b 01       	movw	r14, r22
    57ec:	8c 01       	movw	r16, r24

		if(!oc)oc=1;
    57ee:	80 91 2a 02 	lds	r24, 0x022A
    57f2:	90 91 2b 02 	lds	r25, 0x022B
    57f6:	00 97       	sbiw	r24, 0x00	; 0
    57f8:	31 f4       	brne	.+12     	; 0x5806 <AB+0x558>
    57fa:	21 e0       	ldi	r18, 0x01	; 1
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	30 93 2b 02 	sts	0x022B, r19
    5802:	20 93 2a 02 	sts	0x022A, r18
		if(oc>500){LE return;}
    5806:	80 91 2a 02 	lds	r24, 0x022A
    580a:	90 91 2b 02 	lds	r25, 0x022B
    580e:	31 e0       	ldi	r19, 0x01	; 1
    5810:	85 3f       	cpi	r24, 0xF5	; 245
    5812:	93 07       	cpc	r25, r19
    5814:	ec f4       	brge	.+58     	; 0x5850 <AB+0x5a2>
			if(ysp) z *= (ysp+10)/10;			
			else	z *= (xsp+10)/10;
			if(z > 30 || z < -30) z=0;
		}

		x= (int)LF(xsp,-xsp,x);
    5816:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5818:	78 a1       	ldd	r23, Y+32	; 0x20
    581a:	89 a1       	ldd	r24, Y+33	; 0x21
    581c:	9a a1       	ldd	r25, Y+34	; 0x22
    581e:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5822:	4b 01       	movw	r8, r22
		y= (int)LF(ysp,-ysp,y);
    5824:	c6 01       	movw	r24, r12
    5826:	b5 01       	movw	r22, r10
    5828:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    582c:	3b 01       	movw	r6, r22
		z= (int)LF(xsp,-xsp,z);
    582e:	c8 01       	movw	r24, r16
    5830:	b7 01       	movw	r22, r14
    5832:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5836:	6b 01       	movw	r12, r22

		if(!oc)oc=1;
		if(oc>500){LE return;}
		if(abs(y)<1 && abs(x)<1 && abs(z)<1){LE return;}
    5838:	61 14       	cp	r6, r1
    583a:	71 04       	cpc	r7, r1
    583c:	09 f0       	breq	.+2      	; 0x5840 <AB+0x592>
    583e:	5b c0       	rjmp	.+182    	; 0x58f6 <AB+0x648>
    5840:	81 14       	cp	r8, r1
    5842:	91 04       	cpc	r9, r1
    5844:	09 f0       	breq	.+2      	; 0x5848 <AB+0x59a>
    5846:	57 c0       	rjmp	.+174    	; 0x58f6 <AB+0x648>
    5848:	61 15       	cp	r22, r1
    584a:	71 05       	cpc	r23, r1
    584c:	09 f0       	breq	.+2      	; 0x5850 <AB+0x5a2>
    584e:	53 c0       	rjmp	.+166    	; 0x58f6 <AB+0x648>
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	dc 01       	movw	r26, r24
    5856:	80 93 89 02 	sts	0x0289, r24
    585a:	90 93 8a 02 	sts	0x028A, r25
    585e:	a0 93 8b 02 	sts	0x028B, r26
    5862:	b0 93 8c 02 	sts	0x028C, r27
    5866:	80 91 89 02 	lds	r24, 0x0289
    586a:	90 91 8a 02 	lds	r25, 0x028A
    586e:	a0 91 8b 02 	lds	r26, 0x028B
    5872:	b0 91 8c 02 	lds	r27, 0x028C
    5876:	80 93 13 03 	sts	0x0313, r24
    587a:	90 93 14 03 	sts	0x0314, r25
    587e:	a0 93 15 03 	sts	0x0315, r26
    5882:	b0 93 16 03 	sts	0x0316, r27
    5886:	80 91 13 03 	lds	r24, 0x0313
    588a:	90 91 14 03 	lds	r25, 0x0314
    588e:	a0 91 15 03 	lds	r26, 0x0315
    5892:	b0 91 16 03 	lds	r27, 0x0316
    5896:	80 93 7d 02 	sts	0x027D, r24
    589a:	90 93 7e 02 	sts	0x027E, r25
    589e:	a0 93 7f 02 	sts	0x027F, r26
    58a2:	b0 93 80 02 	sts	0x0280, r27
    58a6:	60 91 7d 02 	lds	r22, 0x027D
    58aa:	70 91 7e 02 	lds	r23, 0x027E
    58ae:	80 91 7f 02 	lds	r24, 0x027F
    58b2:	90 91 80 02 	lds	r25, 0x0280
    58b6:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    58ba:	70 93 2b 02 	sts	0x022B, r23
    58be:	60 93 2a 02 	sts	0x022A, r22
		speed(acf*x,cacf*y,acf*z,wa);
		
	}
}
    58c2:	ce 5b       	subi	r28, 0xBE	; 190
    58c4:	df 4f       	sbci	r29, 0xFF	; 255
    58c6:	0f b6       	in	r0, 0x3f	; 63
    58c8:	f8 94       	cli
    58ca:	de bf       	out	0x3e, r29	; 62
    58cc:	0f be       	out	0x3f, r0	; 63
    58ce:	cd bf       	out	0x3d, r28	; 61
    58d0:	cf 91       	pop	r28
    58d2:	df 91       	pop	r29
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	ff 90       	pop	r15
    58da:	ef 90       	pop	r14
    58dc:	df 90       	pop	r13
    58de:	cf 90       	pop	r12
    58e0:	bf 90       	pop	r11
    58e2:	af 90       	pop	r10
    58e4:	9f 90       	pop	r9
    58e6:	8f 90       	pop	r8
    58e8:	7f 90       	pop	r7
    58ea:	6f 90       	pop	r6
    58ec:	5f 90       	pop	r5
    58ee:	4f 90       	pop	r4
    58f0:	3f 90       	pop	r3
    58f2:	2f 90       	pop	r2
    58f4:	08 95       	ret
		z= (int)LF(xsp,-xsp,z);

		if(!oc)oc=1;
		if(oc>500){LE return;}
		if(abs(y)<1 && abs(x)<1 && abs(z)<1){LE return;}
		speed(acf*x,cacf*y,acf*z,wa);
    58f6:	e0 90 14 02 	lds	r14, 0x0214
    58fa:	f0 90 15 02 	lds	r15, 0x0215
    58fe:	00 91 16 02 	lds	r16, 0x0216
    5902:	10 91 17 02 	lds	r17, 0x0217
    5906:	b4 01       	movw	r22, r8
    5908:	88 27       	eor	r24, r24
    590a:	77 fd       	sbrc	r23, 7
    590c:	80 95       	com	r24
    590e:	98 2f       	mov	r25, r24
    5910:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5914:	9b 01       	movw	r18, r22
    5916:	ac 01       	movw	r20, r24
    5918:	c8 01       	movw	r24, r16
    591a:	b7 01       	movw	r22, r14
    591c:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5920:	6b 87       	std	Y+11, r22	; 0x0b
    5922:	7c 87       	std	Y+12, r23	; 0x0c
    5924:	8d 87       	std	Y+13, r24	; 0x0d
    5926:	9e 87       	std	Y+14, r25	; 0x0e
    5928:	b3 01       	movw	r22, r6
    592a:	88 27       	eor	r24, r24
    592c:	77 fd       	sbrc	r23, 7
    592e:	80 95       	com	r24
    5930:	98 2f       	mov	r25, r24
    5932:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5936:	20 91 2e 02 	lds	r18, 0x022E
    593a:	30 91 2f 02 	lds	r19, 0x022F
    593e:	40 91 30 02 	lds	r20, 0x0230
    5942:	50 91 31 02 	lds	r21, 0x0231
    5946:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    594a:	1b 01       	movw	r2, r22
    594c:	2c 01       	movw	r4, r24
    594e:	b6 01       	movw	r22, r12
    5950:	88 27       	eor	r24, r24
    5952:	77 fd       	sbrc	r23, 7
    5954:	80 95       	com	r24
    5956:	98 2f       	mov	r25, r24
    5958:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    595c:	9b 01       	movw	r18, r22
    595e:	ac 01       	movw	r20, r24
    5960:	c8 01       	movw	r24, r16
    5962:	b7 01       	movw	r22, r14
    5964:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5968:	7b 01       	movw	r14, r22
    596a:	8c 01       	movw	r16, r24
    596c:	60 91 50 02 	lds	r22, 0x0250
    5970:	70 91 51 02 	lds	r23, 0x0251
    5974:	88 27       	eor	r24, r24
    5976:	77 fd       	sbrc	r23, 7
    5978:	80 95       	com	r24
    597a:	98 2f       	mov	r25, r24
    597c:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5980:	5b 01       	movw	r10, r22
    5982:	6c 01       	movw	r12, r24
    5984:	6b 85       	ldd	r22, Y+11	; 0x0b
    5986:	7c 85       	ldd	r23, Y+12	; 0x0c
    5988:	8d 85       	ldd	r24, Y+13	; 0x0d
    598a:	9e 85       	ldd	r25, Y+14	; 0x0e
    598c:	a2 01       	movw	r20, r4
    598e:	91 01       	movw	r18, r2
    5990:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>
		
	}
    5994:	08 ce       	rjmp	.-1008   	; 0x55a6 <AB+0x2f8>

00005996 <LS>:
}

int LS(){
	int lines = 0;
	
	if(IR_1 == 0 && IR_2 == 0 && IR_3 ==0 ) lines=  0;
    5996:	80 91 87 02 	lds	r24, 0x0287
    599a:	90 91 88 02 	lds	r25, 0x0288
    599e:	00 97       	sbiw	r24, 0x00	; 0
    59a0:	51 f4       	brne	.+20     	; 0x59b6 <LS+0x20>
    59a2:	80 91 83 02 	lds	r24, 0x0283
    59a6:	90 91 84 02 	lds	r25, 0x0284
    59aa:	00 97       	sbiw	r24, 0x00	; 0
    59ac:	21 f4       	brne	.+8      	; 0x59b6 <LS+0x20>
    59ae:	80 91 3d 03 	lds	r24, 0x033D
    59b2:	90 91 3e 03 	lds	r25, 0x033E
	if(IR_1 == 1 && IR_2 == 0 && IR_3 ==0 ) lines=  1;
    59b6:	80 91 87 02 	lds	r24, 0x0287
    59ba:	90 91 88 02 	lds	r25, 0x0288
    59be:	81 30       	cpi	r24, 0x01	; 1
    59c0:	91 05       	cpc	r25, r1
    59c2:	71 f4       	brne	.+28     	; 0x59e0 <LS+0x4a>
    59c4:	80 91 83 02 	lds	r24, 0x0283
    59c8:	90 91 84 02 	lds	r25, 0x0284
    59cc:	00 97       	sbiw	r24, 0x00	; 0
    59ce:	41 f4       	brne	.+16     	; 0x59e0 <LS+0x4a>
    59d0:	80 91 3d 03 	lds	r24, 0x033D
    59d4:	90 91 3e 03 	lds	r25, 0x033E
    59d8:	21 e0       	ldi	r18, 0x01	; 1
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	00 97       	sbiw	r24, 0x00	; 0
    59de:	11 f0       	breq	.+4      	; 0x59e4 <LS+0x4e>
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	30 e0       	ldi	r19, 0x00	; 0
	if(IR_1 == 1 && IR_2 == 1 && IR_3 ==0 ) lines=  2;
    59e4:	80 91 87 02 	lds	r24, 0x0287
    59e8:	90 91 88 02 	lds	r25, 0x0288
    59ec:	81 30       	cpi	r24, 0x01	; 1
    59ee:	91 05       	cpc	r25, r1
    59f0:	79 f4       	brne	.+30     	; 0x5a10 <LS+0x7a>
    59f2:	80 91 83 02 	lds	r24, 0x0283
    59f6:	90 91 84 02 	lds	r25, 0x0284
    59fa:	81 30       	cpi	r24, 0x01	; 1
    59fc:	91 05       	cpc	r25, r1
    59fe:	41 f4       	brne	.+16     	; 0x5a10 <LS+0x7a>
    5a00:	80 91 3d 03 	lds	r24, 0x033D
    5a04:	90 91 3e 03 	lds	r25, 0x033E
    5a08:	00 97       	sbiw	r24, 0x00	; 0
    5a0a:	11 f4       	brne	.+4      	; 0x5a10 <LS+0x7a>
    5a0c:	22 e0       	ldi	r18, 0x02	; 2
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
	if(IR_1 == 0 && IR_2 == 1 && IR_3 ==0 ) lines=  3;
    5a10:	80 91 87 02 	lds	r24, 0x0287
    5a14:	90 91 88 02 	lds	r25, 0x0288
    5a18:	00 97       	sbiw	r24, 0x00	; 0
    5a1a:	79 f4       	brne	.+30     	; 0x5a3a <LS+0xa4>
    5a1c:	80 91 83 02 	lds	r24, 0x0283
    5a20:	90 91 84 02 	lds	r25, 0x0284
    5a24:	81 30       	cpi	r24, 0x01	; 1
    5a26:	91 05       	cpc	r25, r1
    5a28:	41 f4       	brne	.+16     	; 0x5a3a <LS+0xa4>
    5a2a:	80 91 3d 03 	lds	r24, 0x033D
    5a2e:	90 91 3e 03 	lds	r25, 0x033E
    5a32:	00 97       	sbiw	r24, 0x00	; 0
    5a34:	11 f4       	brne	.+4      	; 0x5a3a <LS+0xa4>
    5a36:	23 e0       	ldi	r18, 0x03	; 3
    5a38:	30 e0       	ldi	r19, 0x00	; 0
	if(IR_1 == 0 && IR_2 == 1 && IR_3 ==1 ) lines=  4;
    5a3a:	80 91 87 02 	lds	r24, 0x0287
    5a3e:	90 91 88 02 	lds	r25, 0x0288
    5a42:	00 97       	sbiw	r24, 0x00	; 0
    5a44:	81 f4       	brne	.+32     	; 0x5a66 <LS+0xd0>
    5a46:	80 91 83 02 	lds	r24, 0x0283
    5a4a:	90 91 84 02 	lds	r25, 0x0284
    5a4e:	81 30       	cpi	r24, 0x01	; 1
    5a50:	91 05       	cpc	r25, r1
    5a52:	49 f4       	brne	.+18     	; 0x5a66 <LS+0xd0>
    5a54:	80 91 3d 03 	lds	r24, 0x033D
    5a58:	90 91 3e 03 	lds	r25, 0x033E
    5a5c:	81 30       	cpi	r24, 0x01	; 1
    5a5e:	91 05       	cpc	r25, r1
    5a60:	11 f4       	brne	.+4      	; 0x5a66 <LS+0xd0>
    5a62:	24 e0       	ldi	r18, 0x04	; 4
    5a64:	30 e0       	ldi	r19, 0x00	; 0
	if(IR_1 == 0 && IR_2 == 0 && IR_3 ==1 ) lines=  5;
    5a66:	80 91 87 02 	lds	r24, 0x0287
    5a6a:	90 91 88 02 	lds	r25, 0x0288
    5a6e:	00 97       	sbiw	r24, 0x00	; 0
    5a70:	79 f4       	brne	.+30     	; 0x5a90 <LS+0xfa>
    5a72:	80 91 83 02 	lds	r24, 0x0283
    5a76:	90 91 84 02 	lds	r25, 0x0284
    5a7a:	00 97       	sbiw	r24, 0x00	; 0
    5a7c:	49 f4       	brne	.+18     	; 0x5a90 <LS+0xfa>
    5a7e:	80 91 3d 03 	lds	r24, 0x033D
    5a82:	90 91 3e 03 	lds	r25, 0x033E
    5a86:	81 30       	cpi	r24, 0x01	; 1
    5a88:	91 05       	cpc	r25, r1
    5a8a:	11 f4       	brne	.+4      	; 0x5a90 <LS+0xfa>
    5a8c:	25 e0       	ldi	r18, 0x05	; 5
    5a8e:	30 e0       	ldi	r19, 0x00	; 0

	if(IR_1 == 1 && IR_2 == 1 && IR_3 ==1 ) lines=  10;
    5a90:	80 91 87 02 	lds	r24, 0x0287
    5a94:	90 91 88 02 	lds	r25, 0x0288
    5a98:	81 30       	cpi	r24, 0x01	; 1
    5a9a:	91 05       	cpc	r25, r1
    5a9c:	81 f4       	brne	.+32     	; 0x5abe <LS+0x128>
    5a9e:	80 91 83 02 	lds	r24, 0x0283
    5aa2:	90 91 84 02 	lds	r25, 0x0284
    5aa6:	81 30       	cpi	r24, 0x01	; 1
    5aa8:	91 05       	cpc	r25, r1
    5aaa:	49 f4       	brne	.+18     	; 0x5abe <LS+0x128>
    5aac:	80 91 3d 03 	lds	r24, 0x033D
    5ab0:	90 91 3e 03 	lds	r25, 0x033E
    5ab4:	81 30       	cpi	r24, 0x01	; 1
    5ab6:	91 05       	cpc	r25, r1
    5ab8:	11 f4       	brne	.+4      	; 0x5abe <LS+0x128>
    5aba:	2a e0       	ldi	r18, 0x0A	; 10
    5abc:	30 e0       	ldi	r19, 0x00	; 0

	return lines;
}
    5abe:	c9 01       	movw	r24, r18
    5ac0:	08 95       	ret

00005ac2 <LC>:
int LC(int sel, int lines){
    5ac2:	df 93       	push	r29
    5ac4:	cf 93       	push	r28
    5ac6:	cd b7       	in	r28, 0x3d	; 61
    5ac8:	de b7       	in	r29, 0x3e	; 62
    5aca:	a4 97       	sbiw	r28, 0x24	; 36
    5acc:	0f b6       	in	r0, 0x3f	; 63
    5ace:	f8 94       	cli
    5ad0:	de bf       	out	0x3e, r29	; 62
    5ad2:	0f be       	out	0x3f, r0	; 63
    5ad4:	cd bf       	out	0x3d, r28	; 61
	int hd[3][6] = {
    5ad6:	de 01       	movw	r26, r28
    5ad8:	11 96       	adiw	r26, 0x01	; 1
    5ada:	24 e2       	ldi	r18, 0x24	; 36
    5adc:	fd 01       	movw	r30, r26
    5ade:	11 92       	st	Z+, r1
    5ae0:	2a 95       	dec	r18
    5ae2:	e9 f7       	brne	.-6      	; 0x5ade <LC+0x1c>
    5ae4:	24 e6       	ldi	r18, 0x64	; 100
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	3c 83       	std	Y+4, r19	; 0x04
    5aea:	2b 83       	std	Y+3, r18	; 0x03
    5aec:	22 e3       	ldi	r18, 0x32	; 50
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	3e 83       	std	Y+6, r19	; 0x06
    5af2:	2d 83       	std	Y+5, r18	; 0x05
    5af4:	2e ec       	ldi	r18, 0xCE	; 206
    5af6:	3f ef       	ldi	r19, 0xFF	; 255
    5af8:	3a 87       	std	Y+10, r19	; 0x0a
    5afa:	29 87       	std	Y+9, r18	; 0x09
    5afc:	2c e9       	ldi	r18, 0x9C	; 156
    5afe:	3f ef       	ldi	r19, 0xFF	; 255
    5b00:	3c 87       	std	Y+12, r19	; 0x0c
    5b02:	2b 87       	std	Y+11, r18	; 0x0b
		{0,100,50,0,-50,-100}
	};

	return (int)(hd[sel][lines] * 0.25);
    5b04:	fc 01       	movw	r30, r24
    5b06:	ee 0f       	add	r30, r30
    5b08:	ff 1f       	adc	r31, r31
    5b0a:	e8 0f       	add	r30, r24
    5b0c:	f9 1f       	adc	r31, r25
    5b0e:	ee 0f       	add	r30, r30
    5b10:	ff 1f       	adc	r31, r31
    5b12:	e6 0f       	add	r30, r22
    5b14:	f7 1f       	adc	r31, r23
    5b16:	ee 0f       	add	r30, r30
    5b18:	ff 1f       	adc	r31, r31
    5b1a:	ea 0f       	add	r30, r26
    5b1c:	fb 1f       	adc	r31, r27
    5b1e:	60 81       	ld	r22, Z
    5b20:	71 81       	ldd	r23, Z+1	; 0x01
    5b22:	88 27       	eor	r24, r24
    5b24:	77 fd       	sbrc	r23, 7
    5b26:	80 95       	com	r24
    5b28:	98 2f       	mov	r25, r24
    5b2a:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5b2e:	20 e0       	ldi	r18, 0x00	; 0
    5b30:	30 e0       	ldi	r19, 0x00	; 0
    5b32:	40 e8       	ldi	r20, 0x80	; 128
    5b34:	5e e3       	ldi	r21, 0x3E	; 62
    5b36:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulsf3>
    5b3a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
}
    5b3e:	cb 01       	movw	r24, r22
    5b40:	a4 96       	adiw	r28, 0x24	; 36
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	0f be       	out	0x3f, r0	; 63
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	08 95       	ret

00005b52 <MoveLine>:
		speed(gsp[0],gsp[1],gsp[2],wa);
		
	}
}

void MoveLine(int check, int sel ,int cm, int sp, int ac){
    5b52:	2f 92       	push	r2
    5b54:	3f 92       	push	r3
    5b56:	4f 92       	push	r4
    5b58:	5f 92       	push	r5
    5b5a:	6f 92       	push	r6
    5b5c:	7f 92       	push	r7
    5b5e:	8f 92       	push	r8
    5b60:	9f 92       	push	r9
    5b62:	af 92       	push	r10
    5b64:	bf 92       	push	r11
    5b66:	cf 92       	push	r12
    5b68:	df 92       	push	r13
    5b6a:	ef 92       	push	r14
    5b6c:	ff 92       	push	r15
    5b6e:	0f 93       	push	r16
    5b70:	1f 93       	push	r17
    5b72:	df 93       	push	r29
    5b74:	cf 93       	push	r28
    5b76:	00 d0       	rcall	.+0      	; 0x5b78 <MoveLine+0x26>
    5b78:	cd b7       	in	r28, 0x3d	; 61
    5b7a:	de b7       	in	r29, 0x3e	; 62
    5b7c:	1c 01       	movw	r2, r24
    5b7e:	7a 83       	std	Y+2, r23	; 0x02
    5b80:	69 83       	std	Y+1, r22	; 0x01
    5b82:	5a 01       	movw	r10, r20
    5b84:	79 01       	movw	r14, r18
    5b86:	28 01       	movw	r4, r16
	ginit("MoveLine");
    5b88:	10 92 03 02 	sts	0x0203, r1
    5b8c:	10 92 02 02 	sts	0x0202, r1
    5b90:	10 92 50 03 	sts	0x0350, r1
    5b94:	10 92 4f 03 	sts	0x034F, r1
    5b98:	80 91 4f 03 	lds	r24, 0x034F
    5b9c:	90 91 50 03 	lds	r25, 0x0350
    5ba0:	90 93 2b 02 	sts	0x022B, r25
    5ba4:	80 93 2a 02 	sts	0x022A, r24
    5ba8:	60 e0       	ldi	r22, 0x00	; 0
    5baa:	70 e0       	ldi	r23, 0x00	; 0
    5bac:	80 e0       	ldi	r24, 0x00	; 0
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	8b 01       	movw	r16, r22
    5bb4:	00 0f       	add	r16, r16
    5bb6:	11 1f       	adc	r17, r17
    5bb8:	00 0f       	add	r16, r16
    5bba:	11 1f       	adc	r17, r17
    5bbc:	98 01       	movw	r18, r16
    5bbe:	21 5c       	subi	r18, 0xC1	; 193
    5bc0:	3c 4f       	sbci	r19, 0xFC	; 252
    5bc2:	f9 01       	movw	r30, r18
    5bc4:	80 83       	st	Z, r24
    5bc6:	91 83       	std	Z+1, r25	; 0x01
    5bc8:	a2 83       	std	Z+2, r26	; 0x02
    5bca:	b3 83       	std	Z+3, r27	; 0x03
    5bcc:	20 81       	ld	r18, Z
    5bce:	31 81       	ldd	r19, Z+1	; 0x01
    5bd0:	42 81       	ldd	r20, Z+2	; 0x02
    5bd2:	53 81       	ldd	r21, Z+3	; 0x03
    5bd4:	f8 01       	movw	r30, r16
    5bd6:	e3 5d       	subi	r30, 0xD3	; 211
    5bd8:	fc 4f       	sbci	r31, 0xFC	; 252
    5bda:	20 83       	st	Z, r18
    5bdc:	31 83       	std	Z+1, r19	; 0x01
    5bde:	42 83       	std	Z+2, r20	; 0x02
    5be0:	53 83       	std	Z+3, r21	; 0x03
    5be2:	6f 5f       	subi	r22, 0xFF	; 255
    5be4:	7f 4f       	sbci	r23, 0xFF	; 255
    5be6:	64 30       	cpi	r22, 0x04	; 4
    5be8:	71 05       	cpc	r23, r1
    5bea:	19 f7       	brne	.-58     	; 0x5bb2 <MoveLine+0x60>
    5bec:	00 d0       	rcall	.+0      	; 0x5bee <MoveLine+0x9c>
    5bee:	00 d0       	rcall	.+0      	; 0x5bf0 <MoveLine+0x9e>
    5bf0:	00 d0       	rcall	.+0      	; 0x5bf2 <MoveLine+0xa0>
    5bf2:	ed b7       	in	r30, 0x3d	; 61
    5bf4:	fe b7       	in	r31, 0x3e	; 62
    5bf6:	31 96       	adiw	r30, 0x01	; 1
    5bf8:	07 e1       	ldi	r16, 0x17	; 23
    5bfa:	13 e0       	ldi	r17, 0x03	; 3
    5bfc:	ad b7       	in	r26, 0x3d	; 61
    5bfe:	be b7       	in	r27, 0x3e	; 62
    5c00:	12 96       	adiw	r26, 0x02	; 2
    5c02:	1c 93       	st	X, r17
    5c04:	0e 93       	st	-X, r16
    5c06:	11 97       	sbiw	r26, 0x01	; 1
    5c08:	82 eb       	ldi	r24, 0xB2	; 178
    5c0a:	91 e0       	ldi	r25, 0x01	; 1
    5c0c:	93 83       	std	Z+3, r25	; 0x03
    5c0e:	82 83       	std	Z+2, r24	; 0x02
    5c10:	85 ef       	ldi	r24, 0xF5	; 245
    5c12:	91 e0       	ldi	r25, 0x01	; 1
    5c14:	95 83       	std	Z+5, r25	; 0x05
    5c16:	84 83       	std	Z+4, r24	; 0x04
    5c18:	0e 94 58 31 	call	0x62b0	; 0x62b0 <sprintf>
    5c1c:	ed b7       	in	r30, 0x3d	; 61
    5c1e:	fe b7       	in	r31, 0x3e	; 62
    5c20:	36 96       	adiw	r30, 0x06	; 6
    5c22:	0f b6       	in	r0, 0x3f	; 63
    5c24:	f8 94       	cli
    5c26:	fe bf       	out	0x3e, r31	; 62
    5c28:	0f be       	out	0x3f, r0	; 63
    5c2a:	ed bf       	out	0x3d, r30	; 61
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	67 e0       	ldi	r22, 0x07	; 7
    5c32:	70 e0       	ldi	r23, 0x00	; 0
    5c34:	a8 01       	movw	r20, r16
    5c36:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD>
	int c = 0, lines= 0;

	tot = O(0,cm,0,0)
    5c3a:	80 e0       	ldi	r24, 0x00	; 0
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	b5 01       	movw	r22, r10
    5c40:	40 e0       	ldi	r20, 0x00	; 0
    5c42:	50 e0       	ldi	r21, 0x00	; 0
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	87 01       	movw	r16, r14
    5c4a:	72 01       	movw	r14, r4
    5c4c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Omni>
    5c50:	90 93 50 03 	sts	0x0350, r25
    5c54:	80 93 4f 03 	sts	0x034F, r24

	while(1){
		OS
    5c58:	80 91 4f 03 	lds	r24, 0x034F
    5c5c:	90 91 50 03 	lds	r25, 0x0350
    5c60:	b2 01       	movw	r22, r4
    5c62:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <OmniSet>
		
		
		lines = LS();
    5c66:	0e 94 cb 2c 	call	0x5996	; 0x5996 <LS>
    5c6a:	7c 01       	movw	r14, r24
		if(lines != 6) c = LC(sel,lines);
    5c6c:	86 30       	cpi	r24, 0x06	; 6
    5c6e:	91 05       	cpc	r25, r1
    5c70:	31 f0       	breq	.+12     	; 0x5c7e <MoveLine+0x12c>
    5c72:	89 81       	ldd	r24, Y+1	; 0x01
    5c74:	9a 81       	ldd	r25, Y+2	; 0x02
    5c76:	b7 01       	movw	r22, r14
    5c78:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <LC>
    5c7c:	02 c0       	rjmp	.+4      	; 0x5c82 <MoveLine+0x130>
		else c=  0;
    5c7e:	80 e0       	ldi	r24, 0x00	; 0
    5c80:	90 e0       	ldi	r25, 0x00	; 0
	
		if(check == 1 && lines == 10) {LE return;}
    5c82:	21 e0       	ldi	r18, 0x01	; 1
    5c84:	22 16       	cp	r2, r18
    5c86:	31 04       	cpc	r3, r1
    5c88:	29 f4       	brne	.+10     	; 0x5c94 <MoveLine+0x142>
    5c8a:	aa e0       	ldi	r26, 0x0A	; 10
    5c8c:	ea 16       	cp	r14, r26
    5c8e:	f1 04       	cpc	r15, r1
    5c90:	41 f4       	brne	.+16     	; 0x5ca2 <MoveLine+0x150>
    5c92:	46 c0       	rjmp	.+140    	; 0x5d20 <MoveLine+0x1ce>
		if(check == 0 && lines == 0) {LE return;}
    5c94:	21 14       	cp	r2, r1
    5c96:	31 04       	cpc	r3, r1
    5c98:	21 f4       	brne	.+8      	; 0x5ca2 <MoveLine+0x150>
    5c9a:	e1 14       	cp	r14, r1
    5c9c:	f1 04       	cpc	r15, r1
    5c9e:	09 f4       	brne	.+2      	; 0x5ca2 <MoveLine+0x150>
    5ca0:	3f c0       	rjmp	.+126    	; 0x5d20 <MoveLine+0x1ce>

		speed(0,gsp[1],-c,wa);
    5ca2:	60 90 43 03 	lds	r6, 0x0343
    5ca6:	70 90 44 03 	lds	r7, 0x0344
    5caa:	80 90 45 03 	lds	r8, 0x0345
    5cae:	90 90 46 03 	lds	r9, 0x0346
    5cb2:	66 27       	eor	r22, r22
    5cb4:	77 27       	eor	r23, r23
    5cb6:	68 1b       	sub	r22, r24
    5cb8:	79 0b       	sbc	r23, r25
    5cba:	88 27       	eor	r24, r24
    5cbc:	77 fd       	sbrc	r23, 7
    5cbe:	80 95       	com	r24
    5cc0:	98 2f       	mov	r25, r24
    5cc2:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5cc6:	7b 01       	movw	r14, r22
    5cc8:	8c 01       	movw	r16, r24
    5cca:	60 91 50 02 	lds	r22, 0x0250
    5cce:	70 91 51 02 	lds	r23, 0x0251
    5cd2:	88 27       	eor	r24, r24
    5cd4:	77 fd       	sbrc	r23, 7
    5cd6:	80 95       	com	r24
    5cd8:	98 2f       	mov	r25, r24
    5cda:	0e 94 04 33 	call	0x6608	; 0x6608 <__floatsisf>
    5cde:	5b 01       	movw	r10, r22
    5ce0:	6c 01       	movw	r12, r24
    5ce2:	60 e0       	ldi	r22, 0x00	; 0
    5ce4:	70 e0       	ldi	r23, 0x00	; 0
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	a4 01       	movw	r20, r8
    5cea:	93 01       	movw	r18, r6
    5cec:	0e 94 8b 09 	call	0x1316	; 0x1316 <speed>

		if(!oc) oc = 1;
    5cf0:	80 91 2a 02 	lds	r24, 0x022A
    5cf4:	90 91 2b 02 	lds	r25, 0x022B
    5cf8:	00 97       	sbiw	r24, 0x00	; 0
    5cfa:	31 f4       	brne	.+12     	; 0x5d08 <MoveLine+0x1b6>
    5cfc:	e1 e0       	ldi	r30, 0x01	; 1
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	f0 93 2b 02 	sts	0x022B, r31
    5d04:	e0 93 2a 02 	sts	0x022A, r30
		if(oc > tot) {LE return;}
    5d08:	80 91 4f 03 	lds	r24, 0x034F
    5d0c:	90 91 50 03 	lds	r25, 0x0350
    5d10:	20 91 2a 02 	lds	r18, 0x022A
    5d14:	30 91 2b 02 	lds	r19, 0x022B
    5d18:	82 17       	cp	r24, r18
    5d1a:	93 07       	cpc	r25, r19
    5d1c:	0c f0       	brlt	.+2      	; 0x5d20 <MoveLine+0x1ce>
    5d1e:	9c cf       	rjmp	.-200    	; 0x5c58 <MoveLine+0x106>
    5d20:	80 e0       	ldi	r24, 0x00	; 0
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	dc 01       	movw	r26, r24
    5d26:	80 93 89 02 	sts	0x0289, r24
    5d2a:	90 93 8a 02 	sts	0x028A, r25
    5d2e:	a0 93 8b 02 	sts	0x028B, r26
    5d32:	b0 93 8c 02 	sts	0x028C, r27
    5d36:	80 91 89 02 	lds	r24, 0x0289
    5d3a:	90 91 8a 02 	lds	r25, 0x028A
    5d3e:	a0 91 8b 02 	lds	r26, 0x028B
    5d42:	b0 91 8c 02 	lds	r27, 0x028C
    5d46:	80 93 13 03 	sts	0x0313, r24
    5d4a:	90 93 14 03 	sts	0x0314, r25
    5d4e:	a0 93 15 03 	sts	0x0315, r26
    5d52:	b0 93 16 03 	sts	0x0316, r27
    5d56:	80 91 13 03 	lds	r24, 0x0313
    5d5a:	90 91 14 03 	lds	r25, 0x0314
    5d5e:	a0 91 15 03 	lds	r26, 0x0315
    5d62:	b0 91 16 03 	lds	r27, 0x0316
    5d66:	80 93 7d 02 	sts	0x027D, r24
    5d6a:	90 93 7e 02 	sts	0x027E, r25
    5d6e:	a0 93 7f 02 	sts	0x027F, r26
    5d72:	b0 93 80 02 	sts	0x0280, r27
    5d76:	60 91 7d 02 	lds	r22, 0x027D
    5d7a:	70 91 7e 02 	lds	r23, 0x027E
    5d7e:	80 91 7f 02 	lds	r24, 0x027F
    5d82:	90 91 80 02 	lds	r25, 0x0280
    5d86:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    5d8a:	70 93 2b 02 	sts	0x022B, r23
    5d8e:	60 93 2a 02 	sts	0x022A, r22
		
	}
}
    5d92:	0f 90       	pop	r0
    5d94:	0f 90       	pop	r0
    5d96:	cf 91       	pop	r28
    5d98:	df 91       	pop	r29
    5d9a:	1f 91       	pop	r17
    5d9c:	0f 91       	pop	r16
    5d9e:	ff 90       	pop	r15
    5da0:	ef 90       	pop	r14
    5da2:	df 90       	pop	r13
    5da4:	cf 90       	pop	r12
    5da6:	bf 90       	pop	r11
    5da8:	af 90       	pop	r10
    5daa:	9f 90       	pop	r9
    5dac:	8f 90       	pop	r8
    5dae:	7f 90       	pop	r7
    5db0:	6f 90       	pop	r6
    5db2:	5f 90       	pop	r5
    5db4:	4f 90       	pop	r4
    5db6:	3f 90       	pop	r3
    5db8:	2f 90       	pop	r2
    5dba:	08 95       	ret

00005dbc <V1>:
	};

	return (int)(hd[sel][lines] * 0.25);
}

int V1(){
    5dbc:	af 92       	push	r10
    5dbe:	bf 92       	push	r11
    5dc0:	cf 92       	push	r12
    5dc2:	df 92       	push	r13
    5dc4:	ef 92       	push	r14
    5dc6:	ff 92       	push	r15
    5dc8:	0f 93       	push	r16
    5dca:	1f 93       	push	r17
    5dcc:	df 93       	push	r29
    5dce:	cf 93       	push	r28
    5dd0:	cd b7       	in	r28, 0x3d	; 61
    5dd2:	de b7       	in	r29, 0x3e	; 62
    5dd4:	c0 59       	subi	r28, 0x90	; 144
    5dd6:	d1 40       	sbci	r29, 0x01	; 1
    5dd8:	0f b6       	in	r0, 0x3f	; 63
    5dda:	f8 94       	cli
    5ddc:	de bf       	out	0x3e, r29	; 62
    5dde:	0f be       	out	0x3f, r0	; 63
    5de0:	cd bf       	out	0x3d, r28	; 61
	for(int i = 0;  i < 9 ; i++){
    5de2:	80 e0       	ldi	r24, 0x00	; 0
    5de4:	90 e0       	ldi	r25, 0x00	; 0
		for(int j = 0 ; j< 5 ; j++){
			pro[i][j] = 0;
    5de6:	fc 01       	movw	r30, r24
    5de8:	ee 0f       	add	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	9c 01       	movw	r18, r24
    5dee:	43 e0       	ldi	r20, 0x03	; 3
    5df0:	22 0f       	add	r18, r18
    5df2:	33 1f       	adc	r19, r19
    5df4:	4a 95       	dec	r20
    5df6:	e1 f7       	brne	.-8      	; 0x5df0 <V1+0x34>
    5df8:	e2 0f       	add	r30, r18
    5dfa:	f3 1f       	adc	r31, r19
    5dfc:	e1 57       	subi	r30, 0x71	; 113
    5dfe:	fd 4f       	sbci	r31, 0xFD	; 253
    5e00:	11 82       	std	Z+1, r1	; 0x01
    5e02:	10 82       	st	Z, r1
    5e04:	13 82       	std	Z+3, r1	; 0x03
    5e06:	12 82       	std	Z+2, r1	; 0x02
    5e08:	15 82       	std	Z+5, r1	; 0x05
    5e0a:	14 82       	std	Z+4, r1	; 0x04
    5e0c:	17 82       	std	Z+7, r1	; 0x07
    5e0e:	16 82       	std	Z+6, r1	; 0x06
    5e10:	11 86       	std	Z+9, r1	; 0x09
    5e12:	10 86       	std	Z+8, r1	; 0x08

	return (int)(hd[sel][lines] * 0.25);
}

int V1(){
	for(int i = 0;  i < 9 ; i++){
    5e14:	01 96       	adiw	r24, 0x01	; 1
    5e16:	89 30       	cpi	r24, 0x09	; 9
    5e18:	91 05       	cpc	r25, r1
    5e1a:	29 f7       	brne	.-54     	; 0x5de6 <V1+0x2a>

	int am,str[200];

	while(1){
		rx1_flg = 0;
		gtc = 200;
    5e1c:	08 ec       	ldi	r16, 0xC8	; 200
    5e1e:	10 e0       	ldi	r17, 0x00	; 0
	}

	int am,str[200];

	while(1){
		rx1_flg = 0;
    5e20:	10 92 fe 01 	sts	0x01FE, r1
		gtc = 200;
    5e24:	10 93 03 02 	sts	0x0203, r17
    5e28:	00 93 02 02 	sts	0x0202, r16

		while(!rx1_flg) if(!gtc) {return 0;}
    5e2c:	07 c0       	rjmp	.+14     	; 0x5e3c <V1+0x80>
    5e2e:	80 91 02 02 	lds	r24, 0x0202
    5e32:	90 91 03 02 	lds	r25, 0x0203
    5e36:	00 97       	sbiw	r24, 0x00	; 0
    5e38:	09 f4       	brne	.+2      	; 0x5e3c <V1+0x80>
    5e3a:	13 c1       	rjmp	.+550    	; 0x6062 <V1+0x2a6>
    5e3c:	80 91 fe 01 	lds	r24, 0x01FE
    5e40:	88 23       	and	r24, r24
    5e42:	a9 f3       	breq	.-22     	; 0x5e2e <V1+0x72>

		if(getchar1() == 'V'){
    5e44:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
    5e48:	86 35       	cpi	r24, 0x56	; 86
    5e4a:	51 f7       	brne	.-44     	; 0x5e20 <V1+0x64>
			rx1_flg=  0;
    5e4c:	10 92 fe 01 	sts	0x01FE, r1
			while(!rx1_flg);
    5e50:	80 91 fe 01 	lds	r24, 0x01FE
    5e54:	88 23       	and	r24, r24
    5e56:	e1 f3       	breq	.-8      	; 0x5e50 <V1+0x94>

			am = getchar1() - '0';
    5e58:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
    5e5c:	a8 2e       	mov	r10, r24
    5e5e:	bb 24       	eor	r11, r11
    5e60:	80 ed       	ldi	r24, 0xD0	; 208
    5e62:	9f ef       	ldi	r25, 0xFF	; 255
    5e64:	a8 0e       	add	r10, r24
    5e66:	b9 1e       	adc	r11, r25
	
			for(int i = 0 ; i  < am  *15 ; i++){
    5e68:	75 01       	movw	r14, r10
    5e6a:	84 e0       	ldi	r24, 0x04	; 4
    5e6c:	ee 0c       	add	r14, r14
    5e6e:	ff 1c       	adc	r15, r15
    5e70:	8a 95       	dec	r24
    5e72:	e1 f7       	brne	.-8      	; 0x5e6c <V1+0xb0>
    5e74:	ea 18       	sub	r14, r10
    5e76:	fb 08       	sbc	r15, r11
    5e78:	6e 01       	movw	r12, r28
    5e7a:	08 94       	sec
    5e7c:	c1 1c       	adc	r12, r1
    5e7e:	d1 1c       	adc	r13, r1
    5e80:	00 e0       	ldi	r16, 0x00	; 0
    5e82:	10 e0       	ldi	r17, 0x00	; 0
    5e84:	10 c0       	rjmp	.+32     	; 0x5ea6 <V1+0xea>
				rx1_flg=  0;
    5e86:	10 92 fe 01 	sts	0x01FE, r1
				while(!rx1_flg);
    5e8a:	80 91 fe 01 	lds	r24, 0x01FE
    5e8e:	88 23       	and	r24, r24
    5e90:	e1 f3       	breq	.-8      	; 0x5e8a <V1+0xce>
				str[i] = getchar1() - '0';
    5e92:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	c0 97       	sbiw	r24, 0x30	; 48
    5e9a:	f6 01       	movw	r30, r12
    5e9c:	81 93       	st	Z+, r24
    5e9e:	91 93       	st	Z+, r25
    5ea0:	6f 01       	movw	r12, r30
			rx1_flg=  0;
			while(!rx1_flg);

			am = getchar1() - '0';
	
			for(int i = 0 ; i  < am  *15 ; i++){
    5ea2:	0f 5f       	subi	r16, 0xFF	; 255
    5ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea6:	0e 15       	cp	r16, r14
    5ea8:	1f 05       	cpc	r17, r15
    5eaa:	6c f3       	brlt	.-38     	; 0x5e86 <V1+0xca>
    5eac:	fe 01       	movw	r30, r28
    5eae:	31 96       	adiw	r30, 0x01	; 1
    5eb0:	80 e0       	ldi	r24, 0x00	; 0
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	for(int i = 0 ; i < am ; i++){
		pro[i][0] = str[i * 15 + 1];
		pro[i][1] = str[i * 15 + 3]* 100 + str[i * 15 + 4]  *10 + str[i * 15 + 5];
    5eb4:	44 e6       	ldi	r20, 0x64	; 100
    5eb6:	50 e0       	ldi	r21, 0x00	; 0
    5eb8:	94 c0       	rjmp	.+296    	; 0x5fe2 <V1+0x226>
			break;
		}
	}

	for(int i = 0 ; i < am ; i++){
		pro[i][0] = str[i * 15 + 1];
    5eba:	22 81       	ldd	r18, Z+2	; 0x02
    5ebc:	33 81       	ldd	r19, Z+3	; 0x03
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	aa 0f       	add	r26, r26
    5ec2:	bb 1f       	adc	r27, r27
    5ec4:	bc 01       	movw	r22, r24
    5ec6:	13 e0       	ldi	r17, 0x03	; 3
    5ec8:	66 0f       	add	r22, r22
    5eca:	77 1f       	adc	r23, r23
    5ecc:	1a 95       	dec	r17
    5ece:	e1 f7       	brne	.-8      	; 0x5ec8 <V1+0x10c>
    5ed0:	a6 0f       	add	r26, r22
    5ed2:	b7 1f       	adc	r27, r23
    5ed4:	a1 57       	subi	r26, 0x71	; 113
    5ed6:	bd 4f       	sbci	r27, 0xFD	; 253
    5ed8:	11 96       	adiw	r26, 0x01	; 1
    5eda:	3c 93       	st	X, r19
    5edc:	2e 93       	st	-X, r18
		pro[i][1] = str[i * 15 + 3]* 100 + str[i * 15 + 4]  *10 + str[i * 15 + 5];
    5ede:	66 81       	ldd	r22, Z+6	; 0x06
    5ee0:	77 81       	ldd	r23, Z+7	; 0x07
    5ee2:	64 9f       	mul	r22, r20
    5ee4:	90 01       	movw	r18, r0
    5ee6:	65 9f       	mul	r22, r21
    5ee8:	30 0d       	add	r19, r0
    5eea:	74 9f       	mul	r23, r20
    5eec:	30 0d       	add	r19, r0
    5eee:	11 24       	eor	r1, r1
    5ef0:	60 85       	ldd	r22, Z+8	; 0x08
    5ef2:	71 85       	ldd	r23, Z+9	; 0x09
    5ef4:	8b 01       	movw	r16, r22
    5ef6:	00 0f       	add	r16, r16
    5ef8:	11 1f       	adc	r17, r17
    5efa:	66 0f       	add	r22, r22
    5efc:	77 1f       	adc	r23, r23
    5efe:	66 0f       	add	r22, r22
    5f00:	77 1f       	adc	r23, r23
    5f02:	66 0f       	add	r22, r22
    5f04:	77 1f       	adc	r23, r23
    5f06:	06 0f       	add	r16, r22
    5f08:	17 1f       	adc	r17, r23
    5f0a:	20 0f       	add	r18, r16
    5f0c:	31 1f       	adc	r19, r17
    5f0e:	62 85       	ldd	r22, Z+10	; 0x0a
    5f10:	73 85       	ldd	r23, Z+11	; 0x0b
    5f12:	26 0f       	add	r18, r22
    5f14:	37 1f       	adc	r19, r23
    5f16:	13 96       	adiw	r26, 0x03	; 3
    5f18:	3c 93       	st	X, r19
    5f1a:	2e 93       	st	-X, r18
    5f1c:	12 97       	sbiw	r26, 0x02	; 2
		pro[i][2] = str[i * 15 + 6]* 100 + str[i * 15 + 7]  *10 + str[i * 15 + 8];
    5f1e:	64 85       	ldd	r22, Z+12	; 0x0c
    5f20:	75 85       	ldd	r23, Z+13	; 0x0d
    5f22:	64 9f       	mul	r22, r20
    5f24:	90 01       	movw	r18, r0
    5f26:	65 9f       	mul	r22, r21
    5f28:	30 0d       	add	r19, r0
    5f2a:	74 9f       	mul	r23, r20
    5f2c:	30 0d       	add	r19, r0
    5f2e:	11 24       	eor	r1, r1
    5f30:	66 85       	ldd	r22, Z+14	; 0x0e
    5f32:	77 85       	ldd	r23, Z+15	; 0x0f
    5f34:	8b 01       	movw	r16, r22
    5f36:	00 0f       	add	r16, r16
    5f38:	11 1f       	adc	r17, r17
    5f3a:	66 0f       	add	r22, r22
    5f3c:	77 1f       	adc	r23, r23
    5f3e:	66 0f       	add	r22, r22
    5f40:	77 1f       	adc	r23, r23
    5f42:	66 0f       	add	r22, r22
    5f44:	77 1f       	adc	r23, r23
    5f46:	06 0f       	add	r16, r22
    5f48:	17 1f       	adc	r17, r23
    5f4a:	20 0f       	add	r18, r16
    5f4c:	31 1f       	adc	r19, r17
    5f4e:	60 89       	ldd	r22, Z+16	; 0x10
    5f50:	71 89       	ldd	r23, Z+17	; 0x11
    5f52:	26 0f       	add	r18, r22
    5f54:	37 1f       	adc	r19, r23
    5f56:	15 96       	adiw	r26, 0x05	; 5
    5f58:	3c 93       	st	X, r19
    5f5a:	2e 93       	st	-X, r18
    5f5c:	14 97       	sbiw	r26, 0x04	; 4
		pro[i][3] = str[i * 15 + 9]* 100 + str[i * 15 + 10]  *10 + str[i * 15 + 11];
    5f5e:	62 89       	ldd	r22, Z+18	; 0x12
    5f60:	73 89       	ldd	r23, Z+19	; 0x13
    5f62:	64 9f       	mul	r22, r20
    5f64:	90 01       	movw	r18, r0
    5f66:	65 9f       	mul	r22, r21
    5f68:	30 0d       	add	r19, r0
    5f6a:	74 9f       	mul	r23, r20
    5f6c:	30 0d       	add	r19, r0
    5f6e:	11 24       	eor	r1, r1
    5f70:	64 89       	ldd	r22, Z+20	; 0x14
    5f72:	75 89       	ldd	r23, Z+21	; 0x15
    5f74:	8b 01       	movw	r16, r22
    5f76:	00 0f       	add	r16, r16
    5f78:	11 1f       	adc	r17, r17
    5f7a:	66 0f       	add	r22, r22
    5f7c:	77 1f       	adc	r23, r23
    5f7e:	66 0f       	add	r22, r22
    5f80:	77 1f       	adc	r23, r23
    5f82:	66 0f       	add	r22, r22
    5f84:	77 1f       	adc	r23, r23
    5f86:	06 0f       	add	r16, r22
    5f88:	17 1f       	adc	r17, r23
    5f8a:	20 0f       	add	r18, r16
    5f8c:	31 1f       	adc	r19, r17
    5f8e:	66 89       	ldd	r22, Z+22	; 0x16
    5f90:	77 89       	ldd	r23, Z+23	; 0x17
    5f92:	26 0f       	add	r18, r22
    5f94:	37 1f       	adc	r19, r23
    5f96:	17 96       	adiw	r26, 0x07	; 7
    5f98:	3c 93       	st	X, r19
    5f9a:	2e 93       	st	-X, r18
    5f9c:	16 97       	sbiw	r26, 0x06	; 6
		pro[i][4] = str[i * 15 + 12]* 100 + str[i * 15 + 13]  *10 + str[i * 15 + 14];
    5f9e:	60 8d       	ldd	r22, Z+24	; 0x18
    5fa0:	71 8d       	ldd	r23, Z+25	; 0x19
    5fa2:	64 9f       	mul	r22, r20
    5fa4:	90 01       	movw	r18, r0
    5fa6:	65 9f       	mul	r22, r21
    5fa8:	30 0d       	add	r19, r0
    5faa:	74 9f       	mul	r23, r20
    5fac:	30 0d       	add	r19, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	62 8d       	ldd	r22, Z+26	; 0x1a
    5fb2:	73 8d       	ldd	r23, Z+27	; 0x1b
    5fb4:	8b 01       	movw	r16, r22
    5fb6:	00 0f       	add	r16, r16
    5fb8:	11 1f       	adc	r17, r17
    5fba:	66 0f       	add	r22, r22
    5fbc:	77 1f       	adc	r23, r23
    5fbe:	66 0f       	add	r22, r22
    5fc0:	77 1f       	adc	r23, r23
    5fc2:	66 0f       	add	r22, r22
    5fc4:	77 1f       	adc	r23, r23
    5fc6:	06 0f       	add	r16, r22
    5fc8:	17 1f       	adc	r17, r23
    5fca:	20 0f       	add	r18, r16
    5fcc:	31 1f       	adc	r19, r17
    5fce:	64 8d       	ldd	r22, Z+28	; 0x1c
    5fd0:	75 8d       	ldd	r23, Z+29	; 0x1d
    5fd2:	26 0f       	add	r18, r22
    5fd4:	37 1f       	adc	r19, r23
    5fd6:	19 96       	adiw	r26, 0x09	; 9
    5fd8:	3c 93       	st	X, r19
    5fda:	2e 93       	st	-X, r18
    5fdc:	18 97       	sbiw	r26, 0x08	; 8
			}
			break;
		}
	}

	for(int i = 0 ; i < am ; i++){
    5fde:	01 96       	adiw	r24, 0x01	; 1
    5fe0:	7e 96       	adiw	r30, 0x1e	; 30
    5fe2:	8a 15       	cp	r24, r10
    5fe4:	9b 05       	cpc	r25, r11
    5fe6:	0c f4       	brge	.+2      	; 0x5fea <V1+0x22e>
    5fe8:	68 cf       	rjmp	.-304    	; 0x5eba <V1+0xfe>
		pro[i][1] = str[i * 15 + 3]* 100 + str[i * 15 + 4]  *10 + str[i * 15 + 5];
		pro[i][2] = str[i * 15 + 6]* 100 + str[i * 15 + 7]  *10 + str[i * 15 + 8];
		pro[i][3] = str[i * 15 + 9]* 100 + str[i * 15 + 10]  *10 + str[i * 15 + 11];
		pro[i][4] = str[i * 15 + 12]* 100 + str[i * 15 + 13]  *10 + str[i * 15 + 14];
	}
	LE return 1;
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	dc 01       	movw	r26, r24
    5ff0:	80 93 89 02 	sts	0x0289, r24
    5ff4:	90 93 8a 02 	sts	0x028A, r25
    5ff8:	a0 93 8b 02 	sts	0x028B, r26
    5ffc:	b0 93 8c 02 	sts	0x028C, r27
    6000:	80 91 89 02 	lds	r24, 0x0289
    6004:	90 91 8a 02 	lds	r25, 0x028A
    6008:	a0 91 8b 02 	lds	r26, 0x028B
    600c:	b0 91 8c 02 	lds	r27, 0x028C
    6010:	80 93 13 03 	sts	0x0313, r24
    6014:	90 93 14 03 	sts	0x0314, r25
    6018:	a0 93 15 03 	sts	0x0315, r26
    601c:	b0 93 16 03 	sts	0x0316, r27
    6020:	80 91 13 03 	lds	r24, 0x0313
    6024:	90 91 14 03 	lds	r25, 0x0314
    6028:	a0 91 15 03 	lds	r26, 0x0315
    602c:	b0 91 16 03 	lds	r27, 0x0316
    6030:	80 93 7d 02 	sts	0x027D, r24
    6034:	90 93 7e 02 	sts	0x027E, r25
    6038:	a0 93 7f 02 	sts	0x027F, r26
    603c:	b0 93 80 02 	sts	0x0280, r27
    6040:	60 91 7d 02 	lds	r22, 0x027D
    6044:	70 91 7e 02 	lds	r23, 0x027E
    6048:	80 91 7f 02 	lds	r24, 0x027F
    604c:	90 91 80 02 	lds	r25, 0x0280
    6050:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__fixsfsi>
    6054:	70 93 2b 02 	sts	0x022B, r23
    6058:	60 93 2a 02 	sts	0x022A, r22
    605c:	21 e0       	ldi	r18, 0x01	; 1
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	02 c0       	rjmp	.+4      	; 0x6066 <V1+0x2aa>

	while(1){
		rx1_flg = 0;
		gtc = 200;

		while(!rx1_flg) if(!gtc) {return 0;}
    6062:	20 e0       	ldi	r18, 0x00	; 0
    6064:	30 e0       	ldi	r19, 0x00	; 0
		pro[i][2] = str[i * 15 + 6]* 100 + str[i * 15 + 7]  *10 + str[i * 15 + 8];
		pro[i][3] = str[i * 15 + 9]* 100 + str[i * 15 + 10]  *10 + str[i * 15 + 11];
		pro[i][4] = str[i * 15 + 12]* 100 + str[i * 15 + 13]  *10 + str[i * 15 + 14];
	}
	LE return 1;
}
    6066:	c9 01       	movw	r24, r18
    6068:	c0 57       	subi	r28, 0x70	; 112
    606a:	de 4f       	sbci	r29, 0xFE	; 254
    606c:	0f b6       	in	r0, 0x3f	; 63
    606e:	f8 94       	cli
    6070:	de bf       	out	0x3e, r29	; 62
    6072:	0f be       	out	0x3f, r0	; 63
    6074:	cd bf       	out	0x3d, r28	; 61
    6076:	cf 91       	pop	r28
    6078:	df 91       	pop	r29
    607a:	1f 91       	pop	r17
    607c:	0f 91       	pop	r16
    607e:	ff 90       	pop	r15
    6080:	ef 90       	pop	r14
    6082:	df 90       	pop	r13
    6084:	cf 90       	pop	r12
    6086:	bf 90       	pop	r11
    6088:	af 90       	pop	r10
    608a:	08 95       	ret

0000608c <Camera_init>:
#include "Interface.h"

void Camera_init(void){
	unsigned char buff=0;
	while(1){	//快急鉴困 奴巴何磐
		putchar1(11);
    608c:	8b e0       	ldi	r24, 0x0B	; 11
    608e:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>
		while(!rx1_flg); 
    6092:	80 91 fe 01 	lds	r24, 0x01FE
    6096:	88 23       	and	r24, r24
    6098:	e1 f3       	breq	.-8      	; 0x6092 <Camera_init+0x6>
		buff=getchar1();
    609a:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
		if(buff){
    609e:	88 23       	and	r24, r24
    60a0:	a9 f3       	breq	.-22     	; 0x608c <Camera_init>
			buff=0;
			break;
		}
	}
	while(1){	//眠利 且 弥家 侨伎荐  255侨伎
		putchar1(17);
    60a2:	81 e1       	ldi	r24, 0x11	; 17
    60a4:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>
		putchar1(255);
    60a8:	8f ef       	ldi	r24, 0xFF	; 255
    60aa:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>
		while(!rx1_flg);
    60ae:	80 91 fe 01 	lds	r24, 0x01FE
    60b2:	88 23       	and	r24, r24
    60b4:	e1 f3       	breq	.-8      	; 0x60ae <Camera_init+0x22>
		buff=getchar1();
    60b6:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
		if(buff)break;
    60ba:	88 23       	and	r24, r24
    60bc:	91 f3       	breq	.-28     	; 0x60a2 <Camera_init+0x16>
	}
}
    60be:	08 95       	ret

000060c0 <Cmd>:

/// Cmd肺 捞抚 函版 
unsigned char Cmd(unsigned char color, unsigned char cmd)
{	
    60c0:	df 93       	push	r29
    60c2:	cf 93       	push	r28
    60c4:	00 d0       	rcall	.+0      	; 0x60c6 <Cmd+0x6>
    60c6:	cd b7       	in	r28, 0x3d	; 61
    60c8:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char buff=0, data=0;
    60ca:	19 82       	std	Y+1, r1	; 0x01
    60cc:	1a 82       	std	Y+2, r1	; 0x02
	
	data=cmd+(color*10);
    60ce:	88 0f       	add	r24, r24
    60d0:	98 2f       	mov	r25, r24
    60d2:	99 0f       	add	r25, r25
    60d4:	99 0f       	add	r25, r25
    60d6:	98 0f       	add	r25, r24
    60d8:	69 0f       	add	r22, r25
    60da:	6a 83       	std	Y+2, r22	; 0x02

	putchar1(data);
    60dc:	8a 81       	ldd	r24, Y+2	; 0x02
    60de:	0e 94 55 01 	call	0x2aa	; 0x2aa <putchar1>
	while(!rx1_flg);
    60e2:	80 91 fe 01 	lds	r24, 0x01FE
    60e6:	88 23       	and	r24, r24
    60e8:	e1 f3       	breq	.-8      	; 0x60e2 <Cmd+0x22>
	buff=getchar1();
    60ea:	0e 94 42 01 	call	0x284	; 0x284 <getchar1>
    60ee:	89 83       	std	Y+1, r24	; 0x01
	
	return buff;
    60f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    60f2:	0f 90       	pop	r0
    60f4:	0f 90       	pop	r0
    60f6:	cf 91       	pop	r28
    60f8:	df 91       	pop	r29
    60fa:	08 95       	ret

000060fc <Setting>:

/////////// Setting 眠啊
void Setting(unsigned char ins){
    60fc:	0f 93       	push	r16
    60fe:	1f 93       	push	r17
    6100:	cf 93       	push	r28
    6102:	df 93       	push	r29
    6104:	18 2f       	mov	r17, r24
	while(Cmd(0,ins+10) != (ins-10)){
    6106:	08 2f       	mov	r16, r24
    6108:	06 5f       	subi	r16, 0xF6	; 246
    610a:	c8 2f       	mov	r28, r24
    610c:	d0 e0       	ldi	r29, 0x00	; 0
    610e:	2a 97       	sbiw	r28, 0x0a	; 10
    6110:	04 c0       	rjmp	.+8      	; 0x611a <Setting+0x1e>
		Cmd(0,ins);
    6112:	80 e0       	ldi	r24, 0x00	; 0
    6114:	61 2f       	mov	r22, r17
    6116:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
	return buff;
}

/////////// Setting 眠啊
void Setting(unsigned char ins){
	while(Cmd(0,ins+10) != (ins-10)){
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	60 2f       	mov	r22, r16
    611e:	0e 94 60 30 	call	0x60c0	; 0x60c0 <Cmd>
    6122:	28 2f       	mov	r18, r24
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	2c 17       	cp	r18, r28
    6128:	3d 07       	cpc	r19, r29
    612a:	99 f7       	brne	.-26     	; 0x6112 <Setting+0x16>
		Cmd(0,ins);
	}
}
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	08 95       	ret

00006136 <Sensor_init>:
// Function  : IR, PSD 季辑甫 檬扁拳
// Parameter : 绝澜
// Return    : 绝澜
void Sensor_init(void)
{
    DDRE  &= ~0x1C;
    6136:	82 b1       	in	r24, 0x02	; 2
    6138:	83 7e       	andi	r24, 0xE3	; 227
    613a:	82 b9       	out	0x02, r24	; 2
    DDRG  &= ~0x18;
    613c:	e4 e6       	ldi	r30, 0x64	; 100
    613e:	f0 e0       	ldi	r31, 0x00	; 0
    6140:	80 81       	ld	r24, Z
    6142:	87 7e       	andi	r24, 0xE7	; 231
    6144:	80 83       	st	Z, r24

    UCSR0A = 0x00;
    6146:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x98;
    6148:	88 e9       	ldi	r24, 0x98	; 152
    614a:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = 0x06;
    614c:	86 e0       	ldi	r24, 0x06	; 6
    614e:	80 93 95 00 	sts	0x0095, r24
    UBRR0H = 0x00;
    6152:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 0x0F;
    6156:	8f e0       	ldi	r24, 0x0F	; 15
    6158:	89 b9       	out	0x09, r24	; 9

    sei();
    615a:	78 94       	sei
}
    615c:	08 95       	ret

0000615e <__vector_18>:

// Function  : USART甫 烹秦 傈价登绰 PSD 季辑蔼阑 傈开函荐俊 历厘窍绰 ISR
// Parameter : 绝澜
// Return    : 绝澜
ISR(USART0_RX_vect)
{
    615e:	1f 92       	push	r1
    6160:	0f 92       	push	r0
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	0f 92       	push	r0
    6166:	0b b6       	in	r0, 0x3b	; 59
    6168:	0f 92       	push	r0
    616a:	11 24       	eor	r1, r1
    616c:	1f 93       	push	r17
    616e:	2f 93       	push	r18
    6170:	3f 93       	push	r19
    6172:	4f 93       	push	r20
    6174:	5f 93       	push	r21
    6176:	6f 93       	push	r22
    6178:	7f 93       	push	r23
    617a:	8f 93       	push	r24
    617c:	9f 93       	push	r25
    617e:	af 93       	push	r26
    6180:	bf 93       	push	r27
    6182:	cf 93       	push	r28
    6184:	df 93       	push	r29
    6186:	ef 93       	push	r30
    6188:	ff 93       	push	r31
    volatile static unsigned char rx_cnt = 0;
    volatile static unsigned char chksum = 0;
    volatile static unsigned char buf[11] = {0, };
    uint8_t rxbuf = 0, i;

    rxbuf = UDR0;
    618a:	9c b1       	in	r25, 0x0c	; 12
    //荐脚肯丰 棺 俊矾 八免登瘤 臼阑矫
    while(!(UCSR0A & 0xB8));
    618c:	8b b1       	in	r24, 0x0b	; 11
    618e:	88 7b       	andi	r24, 0xB8	; 184
    6190:	e9 f3       	breq	.-6      	; 0x618c <__vector_18+0x2e>

    if(rxbuf == 0xFF)
    6192:	9f 3f       	cpi	r25, 0xFF	; 255
    6194:	21 f4       	brne	.+8      	; 0x619e <__vector_18+0x40>
    {
        //矫累 滚欺 荐脚
        rx_en = 1;
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	80 93 11 02 	sts	0x0211, r24
    619c:	70 c0       	rjmp	.+224    	; 0x627e <__vector_18+0x120>
    }
    else if(rx_en == 1)
    619e:	80 91 11 02 	lds	r24, 0x0211
    61a2:	81 30       	cpi	r24, 0x01	; 1
    61a4:	09 f0       	breq	.+2      	; 0x61a8 <__vector_18+0x4a>
    61a6:	6b c0       	rjmp	.+214    	; 0x627e <__vector_18+0x120>
    {
        //单捞磐 罐扁
        //0锅瘤何磐 PSD0 历厘
        buf[rx_cnt++] = rxbuf;
    61a8:	80 91 10 02 	lds	r24, 0x0210
    61ac:	e8 2f       	mov	r30, r24
    61ae:	f0 e0       	ldi	r31, 0x00	; 0
    61b0:	ec 5f       	subi	r30, 0xFC	; 252
    61b2:	fd 4f       	sbci	r31, 0xFD	; 253
    61b4:	90 83       	st	Z, r25
    61b6:	8f 5f       	subi	r24, 0xFF	; 255
    61b8:	80 93 10 02 	sts	0x0210, r24

        if(rx_cnt > 10)
    61bc:	80 91 10 02 	lds	r24, 0x0210
    61c0:	8b 30       	cpi	r24, 0x0B	; 11
    61c2:	08 f4       	brcc	.+2      	; 0x61c6 <__vector_18+0x68>
    61c4:	5c c0       	rjmp	.+184    	; 0x627e <__vector_18+0x120>
        {
            // PSD 10俺, 眉农级 1俺 荐脚 肯丰登搁
            //敲贰弊 府悸
            rx_en = rx_cnt = 0;
    61c6:	10 92 10 02 	sts	0x0210, r1
    61ca:	80 91 10 02 	lds	r24, 0x0210
    61ce:	80 93 11 02 	sts	0x0211, r24
    61d2:	80 e0       	ldi	r24, 0x00	; 0
    61d4:	90 e0       	ldi	r25, 0x00	; 0

            // 眉农级 拌魂
            for(i = 0 ; i < 10 ; i++)
                chksum += buf[i];
    61d6:	30 91 0f 02 	lds	r19, 0x020F
    61da:	fc 01       	movw	r30, r24
    61dc:	ec 5f       	subi	r30, 0xFC	; 252
    61de:	fd 4f       	sbci	r31, 0xFD	; 253
    61e0:	20 81       	ld	r18, Z
    61e2:	23 0f       	add	r18, r19
    61e4:	20 93 0f 02 	sts	0x020F, r18
    61e8:	01 96       	adiw	r24, 0x01	; 1
            // PSD 10俺, 眉农级 1俺 荐脚 肯丰登搁
            //敲贰弊 府悸
            rx_en = rx_cnt = 0;

            // 眉农级 拌魂
            for(i = 0 ; i < 10 ; i++)
    61ea:	8a 30       	cpi	r24, 0x0A	; 10
    61ec:	91 05       	cpc	r25, r1
    61ee:	99 f7       	brne	.-26     	; 0x61d6 <__vector_18+0x78>
                chksum += buf[i];

            //00~FE 捞骨肺 FF唱坷搁 +1 (坷幅规瘤)
            if(chksum == 0xFF)chksum++;
    61f0:	80 91 0f 02 	lds	r24, 0x020F
    61f4:	8f 3f       	cpi	r24, 0xFF	; 255
    61f6:	29 f4       	brne	.+10     	; 0x6202 <__vector_18+0xa4>
    61f8:	80 91 0f 02 	lds	r24, 0x020F
    61fc:	8f 5f       	subi	r24, 0xFF	; 255
    61fe:	80 93 0f 02 	sts	0x020F, r24

            // 眉农级捞 棵官弗瘤 眉农 饶 嘎栏搁 傈开函荐肺 捞悼
            if(chksum == buf[10])
    6202:	90 91 0f 02 	lds	r25, 0x020F
    6206:	80 91 0e 02 	lds	r24, 0x020E
    620a:	98 17       	cp	r25, r24
    620c:	b1 f5       	brne	.+108    	; 0x627a <__vector_18+0x11c>
    620e:	c0 e0       	ldi	r28, 0x00	; 0
    6210:	d0 e0       	ldi	r29, 0x00	; 0
                for(i = 0 ; i < 10 ; i++)
				{
                    if(buf[i] == 10) continue;
					psd[i] = buf[i];
					g_psd[i] = (27/((double)psd[i]/100) - 4.5);
					if(g_psd[i] > 80) g_psd[i] = 80;
    6212:	10 e5       	ldi	r17, 0x50	; 80

            // 眉农级捞 棵官弗瘤 眉农 饶 嘎栏搁 傈开函荐肺 捞悼
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
				{
                    if(buf[i] == 10) continue;
    6214:	fe 01       	movw	r30, r28
    6216:	ec 5f       	subi	r30, 0xFC	; 252
    6218:	fd 4f       	sbci	r31, 0xFD	; 253
    621a:	80 81       	ld	r24, Z
    621c:	8a 30       	cpi	r24, 0x0A	; 10
    621e:	49 f1       	breq	.+82     	; 0x6272 <__vector_18+0x114>
					psd[i] = buf[i];
    6220:	80 81       	ld	r24, Z
    6222:	fe 01       	movw	r30, r28
    6224:	ee 5c       	subi	r30, 0xCE	; 206
    6226:	fd 4f       	sbci	r31, 0xFD	; 253
    6228:	80 83       	st	Z, r24
					g_psd[i] = (27/((double)psd[i]/100) - 4.5);
    622a:	60 81       	ld	r22, Z
    622c:	70 e0       	ldi	r23, 0x00	; 0
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	0e 94 02 33 	call	0x6604	; 0x6604 <__floatunsisf>
    6236:	20 e0       	ldi	r18, 0x00	; 0
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	48 ec       	ldi	r20, 0xC8	; 200
    623c:	52 e4       	ldi	r21, 0x42	; 66
    623e:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    6242:	9b 01       	movw	r18, r22
    6244:	ac 01       	movw	r20, r24
    6246:	60 e0       	ldi	r22, 0x00	; 0
    6248:	70 e0       	ldi	r23, 0x00	; 0
    624a:	88 ed       	ldi	r24, 0xD8	; 216
    624c:	91 e4       	ldi	r25, 0x41	; 65
    624e:	0e 94 69 32 	call	0x64d2	; 0x64d2 <__divsf3>
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	40 e9       	ldi	r20, 0x90	; 144
    6258:	50 e4       	ldi	r21, 0x40	; 64
    625a:	0e 94 88 31 	call	0x6310	; 0x6310 <__subsf3>
    625e:	0e 94 d6 32 	call	0x65ac	; 0x65ac <__fixunssfsi>
    6262:	fe 01       	movw	r30, r28
    6264:	e2 5e       	subi	r30, 0xE2	; 226
    6266:	fd 4f       	sbci	r31, 0xFD	; 253
    6268:	60 83       	st	Z, r22
					if(g_psd[i] > 80) g_psd[i] = 80;
    626a:	80 81       	ld	r24, Z
    626c:	81 35       	cpi	r24, 0x51	; 81
    626e:	08 f0       	brcs	.+2      	; 0x6272 <__vector_18+0x114>
    6270:	10 83       	st	Z, r17
    6272:	21 96       	adiw	r28, 0x01	; 1
            //00~FE 捞骨肺 FF唱坷搁 +1 (坷幅规瘤)
            if(chksum == 0xFF)chksum++;

            // 眉农级捞 棵官弗瘤 眉农 饶 嘎栏搁 傈开函荐肺 捞悼
            if(chksum == buf[10])
                for(i = 0 ; i < 10 ; i++)
    6274:	ca 30       	cpi	r28, 0x0A	; 10
    6276:	d1 05       	cpc	r29, r1
    6278:	69 f6       	brne	.-102    	; 0x6214 <__vector_18+0xb6>
					g_psd[i] = (27/((double)psd[i]/100) - 4.5);
					if(g_psd[i] > 80) g_psd[i] = 80;
				}

            //眉农级 府悸
            chksum = 0;
    627a:	10 92 0f 02 	sts	0x020F, r1
    	}
    }
}
    627e:	ff 91       	pop	r31
    6280:	ef 91       	pop	r30
    6282:	df 91       	pop	r29
    6284:	cf 91       	pop	r28
    6286:	bf 91       	pop	r27
    6288:	af 91       	pop	r26
    628a:	9f 91       	pop	r25
    628c:	8f 91       	pop	r24
    628e:	7f 91       	pop	r23
    6290:	6f 91       	pop	r22
    6292:	5f 91       	pop	r21
    6294:	4f 91       	pop	r20
    6296:	3f 91       	pop	r19
    6298:	2f 91       	pop	r18
    629a:	1f 91       	pop	r17
    629c:	0f 90       	pop	r0
    629e:	0b be       	out	0x3b, r0	; 59
    62a0:	0f 90       	pop	r0
    62a2:	0f be       	out	0x3f, r0	; 63
    62a4:	0f 90       	pop	r0
    62a6:	1f 90       	pop	r1
    62a8:	18 95       	reti

000062aa <exit>:
    62aa:	f8 94       	cli
    62ac:	0c 94 9d 38 	jmp	0x713a	; 0x713a <_exit>

000062b0 <sprintf>:
    62b0:	0f 93       	push	r16
    62b2:	1f 93       	push	r17
    62b4:	df 93       	push	r29
    62b6:	cf 93       	push	r28
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
    62bc:	2e 97       	sbiw	r28, 0x0e	; 14
    62be:	0f b6       	in	r0, 0x3f	; 63
    62c0:	f8 94       	cli
    62c2:	de bf       	out	0x3e, r29	; 62
    62c4:	0f be       	out	0x3f, r0	; 63
    62c6:	cd bf       	out	0x3d, r28	; 61
    62c8:	0d 89       	ldd	r16, Y+21	; 0x15
    62ca:	1e 89       	ldd	r17, Y+22	; 0x16
    62cc:	86 e0       	ldi	r24, 0x06	; 6
    62ce:	8c 83       	std	Y+4, r24	; 0x04
    62d0:	1a 83       	std	Y+2, r17	; 0x02
    62d2:	09 83       	std	Y+1, r16	; 0x01
    62d4:	8f ef       	ldi	r24, 0xFF	; 255
    62d6:	9f e7       	ldi	r25, 0x7F	; 127
    62d8:	9e 83       	std	Y+6, r25	; 0x06
    62da:	8d 83       	std	Y+5, r24	; 0x05
    62dc:	9e 01       	movw	r18, r28
    62de:	27 5e       	subi	r18, 0xE7	; 231
    62e0:	3f 4f       	sbci	r19, 0xFF	; 255
    62e2:	ce 01       	movw	r24, r28
    62e4:	01 96       	adiw	r24, 0x01	; 1
    62e6:	6f 89       	ldd	r22, Y+23	; 0x17
    62e8:	78 8d       	ldd	r23, Y+24	; 0x18
    62ea:	a9 01       	movw	r20, r18
    62ec:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <vfprintf>
    62f0:	ef 81       	ldd	r30, Y+7	; 0x07
    62f2:	f8 85       	ldd	r31, Y+8	; 0x08
    62f4:	e0 0f       	add	r30, r16
    62f6:	f1 1f       	adc	r31, r17
    62f8:	10 82       	st	Z, r1
    62fa:	2e 96       	adiw	r28, 0x0e	; 14
    62fc:	0f b6       	in	r0, 0x3f	; 63
    62fe:	f8 94       	cli
    6300:	de bf       	out	0x3e, r29	; 62
    6302:	0f be       	out	0x3f, r0	; 63
    6304:	cd bf       	out	0x3d, r28	; 61
    6306:	cf 91       	pop	r28
    6308:	df 91       	pop	r29
    630a:	1f 91       	pop	r17
    630c:	0f 91       	pop	r16
    630e:	08 95       	ret

00006310 <__subsf3>:
    6310:	50 58       	subi	r21, 0x80	; 128

00006312 <__addsf3>:
    6312:	bb 27       	eor	r27, r27
    6314:	aa 27       	eor	r26, r26
    6316:	0e d0       	rcall	.+28     	; 0x6334 <__addsf3x>
    6318:	63 c2       	rjmp	.+1222   	; 0x67e0 <__fp_round>
    631a:	2c d2       	rcall	.+1112   	; 0x6774 <__fp_pscA>
    631c:	30 f0       	brcs	.+12     	; 0x632a <__addsf3+0x18>
    631e:	31 d2       	rcall	.+1122   	; 0x6782 <__fp_pscB>
    6320:	20 f0       	brcs	.+8      	; 0x632a <__addsf3+0x18>
    6322:	31 f4       	brne	.+12     	; 0x6330 <__addsf3+0x1e>
    6324:	9f 3f       	cpi	r25, 0xFF	; 255
    6326:	11 f4       	brne	.+4      	; 0x632c <__addsf3+0x1a>
    6328:	1e f4       	brtc	.+6      	; 0x6330 <__addsf3+0x1e>
    632a:	fc c1       	rjmp	.+1016   	; 0x6724 <__fp_nan>
    632c:	0e f4       	brtc	.+2      	; 0x6330 <__addsf3+0x1e>
    632e:	e0 95       	com	r30
    6330:	e7 fb       	bst	r30, 7
    6332:	c9 c1       	rjmp	.+914    	; 0x66c6 <__fp_inf>

00006334 <__addsf3x>:
    6334:	e9 2f       	mov	r30, r25
    6336:	76 d2       	rcall	.+1260   	; 0x6824 <__fp_split3>
    6338:	80 f3       	brcs	.-32     	; 0x631a <__addsf3+0x8>
    633a:	ba 17       	cp	r27, r26
    633c:	62 07       	cpc	r22, r18
    633e:	73 07       	cpc	r23, r19
    6340:	84 07       	cpc	r24, r20
    6342:	95 07       	cpc	r25, r21
    6344:	18 f0       	brcs	.+6      	; 0x634c <__addsf3x+0x18>
    6346:	71 f4       	brne	.+28     	; 0x6364 <__addsf3x+0x30>
    6348:	9e f5       	brtc	.+102    	; 0x63b0 <__addsf3x+0x7c>
    634a:	a5 c2       	rjmp	.+1354   	; 0x6896 <__fp_zero>
    634c:	0e f4       	brtc	.+2      	; 0x6350 <__addsf3x+0x1c>
    634e:	e0 95       	com	r30
    6350:	0b 2e       	mov	r0, r27
    6352:	ba 2f       	mov	r27, r26
    6354:	a0 2d       	mov	r26, r0
    6356:	0b 01       	movw	r0, r22
    6358:	b9 01       	movw	r22, r18
    635a:	90 01       	movw	r18, r0
    635c:	0c 01       	movw	r0, r24
    635e:	ca 01       	movw	r24, r20
    6360:	a0 01       	movw	r20, r0
    6362:	11 24       	eor	r1, r1
    6364:	ff 27       	eor	r31, r31
    6366:	59 1b       	sub	r21, r25
    6368:	99 f0       	breq	.+38     	; 0x6390 <__addsf3x+0x5c>
    636a:	59 3f       	cpi	r21, 0xF9	; 249
    636c:	50 f4       	brcc	.+20     	; 0x6382 <__addsf3x+0x4e>
    636e:	50 3e       	cpi	r21, 0xE0	; 224
    6370:	68 f1       	brcs	.+90     	; 0x63cc <__addsf3x+0x98>
    6372:	1a 16       	cp	r1, r26
    6374:	f0 40       	sbci	r31, 0x00	; 0
    6376:	a2 2f       	mov	r26, r18
    6378:	23 2f       	mov	r18, r19
    637a:	34 2f       	mov	r19, r20
    637c:	44 27       	eor	r20, r20
    637e:	58 5f       	subi	r21, 0xF8	; 248
    6380:	f3 cf       	rjmp	.-26     	; 0x6368 <__addsf3x+0x34>
    6382:	46 95       	lsr	r20
    6384:	37 95       	ror	r19
    6386:	27 95       	ror	r18
    6388:	a7 95       	ror	r26
    638a:	f0 40       	sbci	r31, 0x00	; 0
    638c:	53 95       	inc	r21
    638e:	c9 f7       	brne	.-14     	; 0x6382 <__addsf3x+0x4e>
    6390:	7e f4       	brtc	.+30     	; 0x63b0 <__addsf3x+0x7c>
    6392:	1f 16       	cp	r1, r31
    6394:	ba 0b       	sbc	r27, r26
    6396:	62 0b       	sbc	r22, r18
    6398:	73 0b       	sbc	r23, r19
    639a:	84 0b       	sbc	r24, r20
    639c:	ba f0       	brmi	.+46     	; 0x63cc <__addsf3x+0x98>
    639e:	91 50       	subi	r25, 0x01	; 1
    63a0:	a1 f0       	breq	.+40     	; 0x63ca <__addsf3x+0x96>
    63a2:	ff 0f       	add	r31, r31
    63a4:	bb 1f       	adc	r27, r27
    63a6:	66 1f       	adc	r22, r22
    63a8:	77 1f       	adc	r23, r23
    63aa:	88 1f       	adc	r24, r24
    63ac:	c2 f7       	brpl	.-16     	; 0x639e <__addsf3x+0x6a>
    63ae:	0e c0       	rjmp	.+28     	; 0x63cc <__addsf3x+0x98>
    63b0:	ba 0f       	add	r27, r26
    63b2:	62 1f       	adc	r22, r18
    63b4:	73 1f       	adc	r23, r19
    63b6:	84 1f       	adc	r24, r20
    63b8:	48 f4       	brcc	.+18     	; 0x63cc <__addsf3x+0x98>
    63ba:	87 95       	ror	r24
    63bc:	77 95       	ror	r23
    63be:	67 95       	ror	r22
    63c0:	b7 95       	ror	r27
    63c2:	f7 95       	ror	r31
    63c4:	9e 3f       	cpi	r25, 0xFE	; 254
    63c6:	08 f0       	brcs	.+2      	; 0x63ca <__addsf3x+0x96>
    63c8:	b3 cf       	rjmp	.-154    	; 0x6330 <__addsf3+0x1e>
    63ca:	93 95       	inc	r25
    63cc:	88 0f       	add	r24, r24
    63ce:	08 f0       	brcs	.+2      	; 0x63d2 <__addsf3x+0x9e>
    63d0:	99 27       	eor	r25, r25
    63d2:	ee 0f       	add	r30, r30
    63d4:	97 95       	ror	r25
    63d6:	87 95       	ror	r24
    63d8:	08 95       	ret
    63da:	cc d1       	rcall	.+920    	; 0x6774 <__fp_pscA>
    63dc:	58 f0       	brcs	.+22     	; 0x63f4 <__addsf3x+0xc0>
    63de:	80 e8       	ldi	r24, 0x80	; 128
    63e0:	91 e0       	ldi	r25, 0x01	; 1
    63e2:	09 f4       	brne	.+2      	; 0x63e6 <__addsf3x+0xb2>
    63e4:	9e ef       	ldi	r25, 0xFE	; 254
    63e6:	cd d1       	rcall	.+922    	; 0x6782 <__fp_pscB>
    63e8:	28 f0       	brcs	.+10     	; 0x63f4 <__addsf3x+0xc0>
    63ea:	40 e8       	ldi	r20, 0x80	; 128
    63ec:	51 e0       	ldi	r21, 0x01	; 1
    63ee:	59 f4       	brne	.+22     	; 0x6406 <atan2+0xe>
    63f0:	5e ef       	ldi	r21, 0xFE	; 254
    63f2:	09 c0       	rjmp	.+18     	; 0x6406 <atan2+0xe>
    63f4:	97 c1       	rjmp	.+814    	; 0x6724 <__fp_nan>
    63f6:	4f c2       	rjmp	.+1182   	; 0x6896 <__fp_zero>

000063f8 <atan2>:
    63f8:	e9 2f       	mov	r30, r25
    63fa:	e0 78       	andi	r30, 0x80	; 128
    63fc:	13 d2       	rcall	.+1062   	; 0x6824 <__fp_split3>
    63fe:	68 f3       	brcs	.-38     	; 0x63da <__addsf3x+0xa6>
    6400:	09 2e       	mov	r0, r25
    6402:	05 2a       	or	r0, r21
    6404:	c1 f3       	breq	.-16     	; 0x63f6 <__addsf3x+0xc2>
    6406:	26 17       	cp	r18, r22
    6408:	37 07       	cpc	r19, r23
    640a:	48 07       	cpc	r20, r24
    640c:	59 07       	cpc	r21, r25
    640e:	38 f0       	brcs	.+14     	; 0x641e <atan2+0x26>
    6410:	0e 2e       	mov	r0, r30
    6412:	07 f8       	bld	r0, 7
    6414:	e0 25       	eor	r30, r0
    6416:	69 f0       	breq	.+26     	; 0x6432 <atan2+0x3a>
    6418:	e0 25       	eor	r30, r0
    641a:	e0 64       	ori	r30, 0x40	; 64
    641c:	0a c0       	rjmp	.+20     	; 0x6432 <atan2+0x3a>
    641e:	ef 63       	ori	r30, 0x3F	; 63
    6420:	07 f8       	bld	r0, 7
    6422:	00 94       	com	r0
    6424:	07 fa       	bst	r0, 7
    6426:	db 01       	movw	r26, r22
    6428:	b9 01       	movw	r22, r18
    642a:	9d 01       	movw	r18, r26
    642c:	dc 01       	movw	r26, r24
    642e:	ca 01       	movw	r24, r20
    6430:	ad 01       	movw	r20, r26
    6432:	ef 93       	push	r30
    6434:	5d d0       	rcall	.+186    	; 0x64f0 <__divsf3_pse>
    6436:	d4 d1       	rcall	.+936    	; 0x67e0 <__fp_round>
    6438:	0a d0       	rcall	.+20     	; 0x644e <atan>
    643a:	5f 91       	pop	r21
    643c:	55 23       	and	r21, r21
    643e:	31 f0       	breq	.+12     	; 0x644c <atan2+0x54>
    6440:	2b ed       	ldi	r18, 0xDB	; 219
    6442:	3f e0       	ldi	r19, 0x0F	; 15
    6444:	49 e4       	ldi	r20, 0x49	; 73
    6446:	50 fd       	sbrc	r21, 0
    6448:	49 ec       	ldi	r20, 0xC9	; 201
    644a:	63 cf       	rjmp	.-314    	; 0x6312 <__addsf3>
    644c:	08 95       	ret

0000644e <atan>:
    644e:	df 93       	push	r29
    6450:	dd 27       	eor	r29, r29
    6452:	b9 2f       	mov	r27, r25
    6454:	bf 77       	andi	r27, 0x7F	; 127
    6456:	40 e8       	ldi	r20, 0x80	; 128
    6458:	5f e3       	ldi	r21, 0x3F	; 63
    645a:	16 16       	cp	r1, r22
    645c:	17 06       	cpc	r1, r23
    645e:	48 07       	cpc	r20, r24
    6460:	5b 07       	cpc	r21, r27
    6462:	10 f4       	brcc	.+4      	; 0x6468 <atan+0x1a>
    6464:	d9 2f       	mov	r29, r25
    6466:	83 d2       	rcall	.+1286   	; 0x696e <inverse>
    6468:	9f 93       	push	r25
    646a:	8f 93       	push	r24
    646c:	7f 93       	push	r23
    646e:	6f 93       	push	r22
    6470:	66 d3       	rcall	.+1740   	; 0x6b3e <square>
    6472:	ec e8       	ldi	r30, 0x8C	; 140
    6474:	f0 e0       	ldi	r31, 0x00	; 0
    6476:	59 d1       	rcall	.+690    	; 0x672a <__fp_powser>
    6478:	b3 d1       	rcall	.+870    	; 0x67e0 <__fp_round>
    647a:	2f 91       	pop	r18
    647c:	3f 91       	pop	r19
    647e:	4f 91       	pop	r20
    6480:	5f 91       	pop	r21
    6482:	be d2       	rcall	.+1404   	; 0x6a00 <__mulsf3x>
    6484:	dd 23       	and	r29, r29
    6486:	49 f0       	breq	.+18     	; 0x649a <atan+0x4c>
    6488:	90 58       	subi	r25, 0x80	; 128
    648a:	a2 ea       	ldi	r26, 0xA2	; 162
    648c:	2a ed       	ldi	r18, 0xDA	; 218
    648e:	3f e0       	ldi	r19, 0x0F	; 15
    6490:	49 ec       	ldi	r20, 0xC9	; 201
    6492:	5f e3       	ldi	r21, 0x3F	; 63
    6494:	d0 78       	andi	r29, 0x80	; 128
    6496:	5d 27       	eor	r21, r29
    6498:	4d df       	rcall	.-358    	; 0x6334 <__addsf3x>
    649a:	df 91       	pop	r29
    649c:	a1 c1       	rjmp	.+834    	; 0x67e0 <__fp_round>

0000649e <ceil>:
    649e:	e4 d1       	rcall	.+968    	; 0x6868 <__fp_trunc>
    64a0:	80 f0       	brcs	.+32     	; 0x64c2 <ceil+0x24>
    64a2:	9f 37       	cpi	r25, 0x7F	; 127
    64a4:	40 f4       	brcc	.+16     	; 0x64b6 <ceil+0x18>
    64a6:	91 11       	cpse	r25, r1
    64a8:	0e f4       	brtc	.+2      	; 0x64ac <ceil+0xe>
    64aa:	f6 c1       	rjmp	.+1004   	; 0x6898 <__fp_szero>
    64ac:	60 e0       	ldi	r22, 0x00	; 0
    64ae:	70 e0       	ldi	r23, 0x00	; 0
    64b0:	80 e8       	ldi	r24, 0x80	; 128
    64b2:	9f e3       	ldi	r25, 0x3F	; 63
    64b4:	08 95       	ret
    64b6:	26 f0       	brts	.+8      	; 0x64c0 <ceil+0x22>
    64b8:	1b 16       	cp	r1, r27
    64ba:	61 1d       	adc	r22, r1
    64bc:	71 1d       	adc	r23, r1
    64be:	81 1d       	adc	r24, r1
    64c0:	08 c1       	rjmp	.+528    	; 0x66d2 <__fp_mintl>
    64c2:	22 c1       	rjmp	.+580    	; 0x6708 <__fp_mpack>

000064c4 <__cmpsf2>:
    64c4:	dc d0       	rcall	.+440    	; 0x667e <__fp_cmp>
    64c6:	08 f4       	brcc	.+2      	; 0x64ca <__cmpsf2+0x6>
    64c8:	81 e0       	ldi	r24, 0x01	; 1
    64ca:	08 95       	ret

000064cc <cos>:
    64cc:	62 d1       	rcall	.+708    	; 0x6792 <__fp_rempio2>
    64ce:	e3 95       	inc	r30
    64d0:	98 c1       	rjmp	.+816    	; 0x6802 <__fp_sinus>

000064d2 <__divsf3>:
    64d2:	0c d0       	rcall	.+24     	; 0x64ec <__divsf3x>
    64d4:	85 c1       	rjmp	.+778    	; 0x67e0 <__fp_round>
    64d6:	55 d1       	rcall	.+682    	; 0x6782 <__fp_pscB>
    64d8:	40 f0       	brcs	.+16     	; 0x64ea <__divsf3+0x18>
    64da:	4c d1       	rcall	.+664    	; 0x6774 <__fp_pscA>
    64dc:	30 f0       	brcs	.+12     	; 0x64ea <__divsf3+0x18>
    64de:	21 f4       	brne	.+8      	; 0x64e8 <__divsf3+0x16>
    64e0:	5f 3f       	cpi	r21, 0xFF	; 255
    64e2:	19 f0       	breq	.+6      	; 0x64ea <__divsf3+0x18>
    64e4:	f0 c0       	rjmp	.+480    	; 0x66c6 <__fp_inf>
    64e6:	51 11       	cpse	r21, r1
    64e8:	d7 c1       	rjmp	.+942    	; 0x6898 <__fp_szero>
    64ea:	1c c1       	rjmp	.+568    	; 0x6724 <__fp_nan>

000064ec <__divsf3x>:
    64ec:	9b d1       	rcall	.+822    	; 0x6824 <__fp_split3>
    64ee:	98 f3       	brcs	.-26     	; 0x64d6 <__divsf3+0x4>

000064f0 <__divsf3_pse>:
    64f0:	99 23       	and	r25, r25
    64f2:	c9 f3       	breq	.-14     	; 0x64e6 <__divsf3+0x14>
    64f4:	55 23       	and	r21, r21
    64f6:	b1 f3       	breq	.-20     	; 0x64e4 <__divsf3+0x12>
    64f8:	95 1b       	sub	r25, r21
    64fa:	55 0b       	sbc	r21, r21
    64fc:	bb 27       	eor	r27, r27
    64fe:	aa 27       	eor	r26, r26
    6500:	62 17       	cp	r22, r18
    6502:	73 07       	cpc	r23, r19
    6504:	84 07       	cpc	r24, r20
    6506:	38 f0       	brcs	.+14     	; 0x6516 <__divsf3_pse+0x26>
    6508:	9f 5f       	subi	r25, 0xFF	; 255
    650a:	5f 4f       	sbci	r21, 0xFF	; 255
    650c:	22 0f       	add	r18, r18
    650e:	33 1f       	adc	r19, r19
    6510:	44 1f       	adc	r20, r20
    6512:	aa 1f       	adc	r26, r26
    6514:	a9 f3       	breq	.-22     	; 0x6500 <__divsf3_pse+0x10>
    6516:	33 d0       	rcall	.+102    	; 0x657e <__divsf3_pse+0x8e>
    6518:	0e 2e       	mov	r0, r30
    651a:	3a f0       	brmi	.+14     	; 0x652a <__divsf3_pse+0x3a>
    651c:	e0 e8       	ldi	r30, 0x80	; 128
    651e:	30 d0       	rcall	.+96     	; 0x6580 <__divsf3_pse+0x90>
    6520:	91 50       	subi	r25, 0x01	; 1
    6522:	50 40       	sbci	r21, 0x00	; 0
    6524:	e6 95       	lsr	r30
    6526:	00 1c       	adc	r0, r0
    6528:	ca f7       	brpl	.-14     	; 0x651c <__divsf3_pse+0x2c>
    652a:	29 d0       	rcall	.+82     	; 0x657e <__divsf3_pse+0x8e>
    652c:	fe 2f       	mov	r31, r30
    652e:	27 d0       	rcall	.+78     	; 0x657e <__divsf3_pse+0x8e>
    6530:	66 0f       	add	r22, r22
    6532:	77 1f       	adc	r23, r23
    6534:	88 1f       	adc	r24, r24
    6536:	bb 1f       	adc	r27, r27
    6538:	26 17       	cp	r18, r22
    653a:	37 07       	cpc	r19, r23
    653c:	48 07       	cpc	r20, r24
    653e:	ab 07       	cpc	r26, r27
    6540:	b0 e8       	ldi	r27, 0x80	; 128
    6542:	09 f0       	breq	.+2      	; 0x6546 <__divsf3_pse+0x56>
    6544:	bb 0b       	sbc	r27, r27
    6546:	80 2d       	mov	r24, r0
    6548:	bf 01       	movw	r22, r30
    654a:	ff 27       	eor	r31, r31
    654c:	93 58       	subi	r25, 0x83	; 131
    654e:	5f 4f       	sbci	r21, 0xFF	; 255
    6550:	2a f0       	brmi	.+10     	; 0x655c <__divsf3_pse+0x6c>
    6552:	9e 3f       	cpi	r25, 0xFE	; 254
    6554:	51 05       	cpc	r21, r1
    6556:	68 f0       	brcs	.+26     	; 0x6572 <__divsf3_pse+0x82>
    6558:	b6 c0       	rjmp	.+364    	; 0x66c6 <__fp_inf>
    655a:	9e c1       	rjmp	.+828    	; 0x6898 <__fp_szero>
    655c:	5f 3f       	cpi	r21, 0xFF	; 255
    655e:	ec f3       	brlt	.-6      	; 0x655a <__divsf3_pse+0x6a>
    6560:	98 3e       	cpi	r25, 0xE8	; 232
    6562:	dc f3       	brlt	.-10     	; 0x655a <__divsf3_pse+0x6a>
    6564:	86 95       	lsr	r24
    6566:	77 95       	ror	r23
    6568:	67 95       	ror	r22
    656a:	b7 95       	ror	r27
    656c:	f7 95       	ror	r31
    656e:	9f 5f       	subi	r25, 0xFF	; 255
    6570:	c9 f7       	brne	.-14     	; 0x6564 <__divsf3_pse+0x74>
    6572:	88 0f       	add	r24, r24
    6574:	91 1d       	adc	r25, r1
    6576:	96 95       	lsr	r25
    6578:	87 95       	ror	r24
    657a:	97 f9       	bld	r25, 7
    657c:	08 95       	ret
    657e:	e1 e0       	ldi	r30, 0x01	; 1
    6580:	66 0f       	add	r22, r22
    6582:	77 1f       	adc	r23, r23
    6584:	88 1f       	adc	r24, r24
    6586:	bb 1f       	adc	r27, r27
    6588:	62 17       	cp	r22, r18
    658a:	73 07       	cpc	r23, r19
    658c:	84 07       	cpc	r24, r20
    658e:	ba 07       	cpc	r27, r26
    6590:	20 f0       	brcs	.+8      	; 0x659a <__divsf3_pse+0xaa>
    6592:	62 1b       	sub	r22, r18
    6594:	73 0b       	sbc	r23, r19
    6596:	84 0b       	sbc	r24, r20
    6598:	ba 0b       	sbc	r27, r26
    659a:	ee 1f       	adc	r30, r30
    659c:	88 f7       	brcc	.-30     	; 0x6580 <__divsf3_pse+0x90>
    659e:	e0 95       	com	r30
    65a0:	08 95       	ret

000065a2 <__fixsfsi>:
    65a2:	04 d0       	rcall	.+8      	; 0x65ac <__fixunssfsi>
    65a4:	68 94       	set
    65a6:	b1 11       	cpse	r27, r1
    65a8:	77 c1       	rjmp	.+750    	; 0x6898 <__fp_szero>
    65aa:	08 95       	ret

000065ac <__fixunssfsi>:
    65ac:	43 d1       	rcall	.+646    	; 0x6834 <__fp_splitA>
    65ae:	88 f0       	brcs	.+34     	; 0x65d2 <__fixunssfsi+0x26>
    65b0:	9f 57       	subi	r25, 0x7F	; 127
    65b2:	90 f0       	brcs	.+36     	; 0x65d8 <__fixunssfsi+0x2c>
    65b4:	b9 2f       	mov	r27, r25
    65b6:	99 27       	eor	r25, r25
    65b8:	b7 51       	subi	r27, 0x17	; 23
    65ba:	a0 f0       	brcs	.+40     	; 0x65e4 <__fixunssfsi+0x38>
    65bc:	d1 f0       	breq	.+52     	; 0x65f2 <__fixunssfsi+0x46>
    65be:	66 0f       	add	r22, r22
    65c0:	77 1f       	adc	r23, r23
    65c2:	88 1f       	adc	r24, r24
    65c4:	99 1f       	adc	r25, r25
    65c6:	1a f0       	brmi	.+6      	; 0x65ce <__fixunssfsi+0x22>
    65c8:	ba 95       	dec	r27
    65ca:	c9 f7       	brne	.-14     	; 0x65be <__fixunssfsi+0x12>
    65cc:	12 c0       	rjmp	.+36     	; 0x65f2 <__fixunssfsi+0x46>
    65ce:	b1 30       	cpi	r27, 0x01	; 1
    65d0:	81 f0       	breq	.+32     	; 0x65f2 <__fixunssfsi+0x46>
    65d2:	61 d1       	rcall	.+706    	; 0x6896 <__fp_zero>
    65d4:	b1 e0       	ldi	r27, 0x01	; 1
    65d6:	08 95       	ret
    65d8:	5e c1       	rjmp	.+700    	; 0x6896 <__fp_zero>
    65da:	67 2f       	mov	r22, r23
    65dc:	78 2f       	mov	r23, r24
    65de:	88 27       	eor	r24, r24
    65e0:	b8 5f       	subi	r27, 0xF8	; 248
    65e2:	39 f0       	breq	.+14     	; 0x65f2 <__fixunssfsi+0x46>
    65e4:	b9 3f       	cpi	r27, 0xF9	; 249
    65e6:	cc f3       	brlt	.-14     	; 0x65da <__fixunssfsi+0x2e>
    65e8:	86 95       	lsr	r24
    65ea:	77 95       	ror	r23
    65ec:	67 95       	ror	r22
    65ee:	b3 95       	inc	r27
    65f0:	d9 f7       	brne	.-10     	; 0x65e8 <__fixunssfsi+0x3c>
    65f2:	3e f4       	brtc	.+14     	; 0x6602 <__fixunssfsi+0x56>
    65f4:	90 95       	com	r25
    65f6:	80 95       	com	r24
    65f8:	70 95       	com	r23
    65fa:	61 95       	neg	r22
    65fc:	7f 4f       	sbci	r23, 0xFF	; 255
    65fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6600:	9f 4f       	sbci	r25, 0xFF	; 255
    6602:	08 95       	ret

00006604 <__floatunsisf>:
    6604:	e8 94       	clt
    6606:	09 c0       	rjmp	.+18     	; 0x661a <__floatsisf+0x12>

00006608 <__floatsisf>:
    6608:	97 fb       	bst	r25, 7
    660a:	3e f4       	brtc	.+14     	; 0x661a <__floatsisf+0x12>
    660c:	90 95       	com	r25
    660e:	80 95       	com	r24
    6610:	70 95       	com	r23
    6612:	61 95       	neg	r22
    6614:	7f 4f       	sbci	r23, 0xFF	; 255
    6616:	8f 4f       	sbci	r24, 0xFF	; 255
    6618:	9f 4f       	sbci	r25, 0xFF	; 255
    661a:	99 23       	and	r25, r25
    661c:	a9 f0       	breq	.+42     	; 0x6648 <__floatsisf+0x40>
    661e:	f9 2f       	mov	r31, r25
    6620:	96 e9       	ldi	r25, 0x96	; 150
    6622:	bb 27       	eor	r27, r27
    6624:	93 95       	inc	r25
    6626:	f6 95       	lsr	r31
    6628:	87 95       	ror	r24
    662a:	77 95       	ror	r23
    662c:	67 95       	ror	r22
    662e:	b7 95       	ror	r27
    6630:	f1 11       	cpse	r31, r1
    6632:	f8 cf       	rjmp	.-16     	; 0x6624 <__floatsisf+0x1c>
    6634:	fa f4       	brpl	.+62     	; 0x6674 <__floatsisf+0x6c>
    6636:	bb 0f       	add	r27, r27
    6638:	11 f4       	brne	.+4      	; 0x663e <__floatsisf+0x36>
    663a:	60 ff       	sbrs	r22, 0
    663c:	1b c0       	rjmp	.+54     	; 0x6674 <__floatsisf+0x6c>
    663e:	6f 5f       	subi	r22, 0xFF	; 255
    6640:	7f 4f       	sbci	r23, 0xFF	; 255
    6642:	8f 4f       	sbci	r24, 0xFF	; 255
    6644:	9f 4f       	sbci	r25, 0xFF	; 255
    6646:	16 c0       	rjmp	.+44     	; 0x6674 <__floatsisf+0x6c>
    6648:	88 23       	and	r24, r24
    664a:	11 f0       	breq	.+4      	; 0x6650 <__floatsisf+0x48>
    664c:	96 e9       	ldi	r25, 0x96	; 150
    664e:	11 c0       	rjmp	.+34     	; 0x6672 <__floatsisf+0x6a>
    6650:	77 23       	and	r23, r23
    6652:	21 f0       	breq	.+8      	; 0x665c <__floatsisf+0x54>
    6654:	9e e8       	ldi	r25, 0x8E	; 142
    6656:	87 2f       	mov	r24, r23
    6658:	76 2f       	mov	r23, r22
    665a:	05 c0       	rjmp	.+10     	; 0x6666 <__floatsisf+0x5e>
    665c:	66 23       	and	r22, r22
    665e:	71 f0       	breq	.+28     	; 0x667c <__floatsisf+0x74>
    6660:	96 e8       	ldi	r25, 0x86	; 134
    6662:	86 2f       	mov	r24, r22
    6664:	70 e0       	ldi	r23, 0x00	; 0
    6666:	60 e0       	ldi	r22, 0x00	; 0
    6668:	2a f0       	brmi	.+10     	; 0x6674 <__floatsisf+0x6c>
    666a:	9a 95       	dec	r25
    666c:	66 0f       	add	r22, r22
    666e:	77 1f       	adc	r23, r23
    6670:	88 1f       	adc	r24, r24
    6672:	da f7       	brpl	.-10     	; 0x666a <__floatsisf+0x62>
    6674:	88 0f       	add	r24, r24
    6676:	96 95       	lsr	r25
    6678:	87 95       	ror	r24
    667a:	97 f9       	bld	r25, 7
    667c:	08 95       	ret

0000667e <__fp_cmp>:
    667e:	99 0f       	add	r25, r25
    6680:	00 08       	sbc	r0, r0
    6682:	55 0f       	add	r21, r21
    6684:	aa 0b       	sbc	r26, r26
    6686:	e0 e8       	ldi	r30, 0x80	; 128
    6688:	fe ef       	ldi	r31, 0xFE	; 254
    668a:	16 16       	cp	r1, r22
    668c:	17 06       	cpc	r1, r23
    668e:	e8 07       	cpc	r30, r24
    6690:	f9 07       	cpc	r31, r25
    6692:	c0 f0       	brcs	.+48     	; 0x66c4 <__fp_cmp+0x46>
    6694:	12 16       	cp	r1, r18
    6696:	13 06       	cpc	r1, r19
    6698:	e4 07       	cpc	r30, r20
    669a:	f5 07       	cpc	r31, r21
    669c:	98 f0       	brcs	.+38     	; 0x66c4 <__fp_cmp+0x46>
    669e:	62 1b       	sub	r22, r18
    66a0:	73 0b       	sbc	r23, r19
    66a2:	84 0b       	sbc	r24, r20
    66a4:	95 0b       	sbc	r25, r21
    66a6:	39 f4       	brne	.+14     	; 0x66b6 <__fp_cmp+0x38>
    66a8:	0a 26       	eor	r0, r26
    66aa:	61 f0       	breq	.+24     	; 0x66c4 <__fp_cmp+0x46>
    66ac:	23 2b       	or	r18, r19
    66ae:	24 2b       	or	r18, r20
    66b0:	25 2b       	or	r18, r21
    66b2:	21 f4       	brne	.+8      	; 0x66bc <__fp_cmp+0x3e>
    66b4:	08 95       	ret
    66b6:	0a 26       	eor	r0, r26
    66b8:	09 f4       	brne	.+2      	; 0x66bc <__fp_cmp+0x3e>
    66ba:	a1 40       	sbci	r26, 0x01	; 1
    66bc:	a6 95       	lsr	r26
    66be:	8f ef       	ldi	r24, 0xFF	; 255
    66c0:	81 1d       	adc	r24, r1
    66c2:	81 1d       	adc	r24, r1
    66c4:	08 95       	ret

000066c6 <__fp_inf>:
    66c6:	97 f9       	bld	r25, 7
    66c8:	9f 67       	ori	r25, 0x7F	; 127
    66ca:	80 e8       	ldi	r24, 0x80	; 128
    66cc:	70 e0       	ldi	r23, 0x00	; 0
    66ce:	60 e0       	ldi	r22, 0x00	; 0
    66d0:	08 95       	ret

000066d2 <__fp_mintl>:
    66d2:	88 23       	and	r24, r24
    66d4:	71 f4       	brne	.+28     	; 0x66f2 <__fp_mintl+0x20>
    66d6:	77 23       	and	r23, r23
    66d8:	21 f0       	breq	.+8      	; 0x66e2 <__fp_mintl+0x10>
    66da:	98 50       	subi	r25, 0x08	; 8
    66dc:	87 2b       	or	r24, r23
    66de:	76 2f       	mov	r23, r22
    66e0:	07 c0       	rjmp	.+14     	; 0x66f0 <__fp_mintl+0x1e>
    66e2:	66 23       	and	r22, r22
    66e4:	11 f4       	brne	.+4      	; 0x66ea <__fp_mintl+0x18>
    66e6:	99 27       	eor	r25, r25
    66e8:	0d c0       	rjmp	.+26     	; 0x6704 <__fp_mintl+0x32>
    66ea:	90 51       	subi	r25, 0x10	; 16
    66ec:	86 2b       	or	r24, r22
    66ee:	70 e0       	ldi	r23, 0x00	; 0
    66f0:	60 e0       	ldi	r22, 0x00	; 0
    66f2:	2a f0       	brmi	.+10     	; 0x66fe <__fp_mintl+0x2c>
    66f4:	9a 95       	dec	r25
    66f6:	66 0f       	add	r22, r22
    66f8:	77 1f       	adc	r23, r23
    66fa:	88 1f       	adc	r24, r24
    66fc:	da f7       	brpl	.-10     	; 0x66f4 <__fp_mintl+0x22>
    66fe:	88 0f       	add	r24, r24
    6700:	96 95       	lsr	r25
    6702:	87 95       	ror	r24
    6704:	97 f9       	bld	r25, 7
    6706:	08 95       	ret

00006708 <__fp_mpack>:
    6708:	9f 3f       	cpi	r25, 0xFF	; 255
    670a:	31 f0       	breq	.+12     	; 0x6718 <__fp_mpack_finite+0xc>

0000670c <__fp_mpack_finite>:
    670c:	91 50       	subi	r25, 0x01	; 1
    670e:	20 f4       	brcc	.+8      	; 0x6718 <__fp_mpack_finite+0xc>
    6710:	87 95       	ror	r24
    6712:	77 95       	ror	r23
    6714:	67 95       	ror	r22
    6716:	b7 95       	ror	r27
    6718:	88 0f       	add	r24, r24
    671a:	91 1d       	adc	r25, r1
    671c:	96 95       	lsr	r25
    671e:	87 95       	ror	r24
    6720:	97 f9       	bld	r25, 7
    6722:	08 95       	ret

00006724 <__fp_nan>:
    6724:	9f ef       	ldi	r25, 0xFF	; 255
    6726:	80 ec       	ldi	r24, 0xC0	; 192
    6728:	08 95       	ret

0000672a <__fp_powser>:
    672a:	df 93       	push	r29
    672c:	cf 93       	push	r28
    672e:	1f 93       	push	r17
    6730:	0f 93       	push	r16
    6732:	ff 92       	push	r15
    6734:	ef 92       	push	r14
    6736:	df 92       	push	r13
    6738:	7b 01       	movw	r14, r22
    673a:	8c 01       	movw	r16, r24
    673c:	68 94       	set
    673e:	05 c0       	rjmp	.+10     	; 0x674a <__fp_powser+0x20>
    6740:	da 2e       	mov	r13, r26
    6742:	ef 01       	movw	r28, r30
    6744:	5d d1       	rcall	.+698    	; 0x6a00 <__mulsf3x>
    6746:	fe 01       	movw	r30, r28
    6748:	e8 94       	clt
    674a:	a5 91       	lpm	r26, Z+
    674c:	25 91       	lpm	r18, Z+
    674e:	35 91       	lpm	r19, Z+
    6750:	45 91       	lpm	r20, Z+
    6752:	55 91       	lpm	r21, Z+
    6754:	ae f3       	brts	.-22     	; 0x6740 <__fp_powser+0x16>
    6756:	ef 01       	movw	r28, r30
    6758:	ed dd       	rcall	.-1062   	; 0x6334 <__addsf3x>
    675a:	fe 01       	movw	r30, r28
    675c:	97 01       	movw	r18, r14
    675e:	a8 01       	movw	r20, r16
    6760:	da 94       	dec	r13
    6762:	79 f7       	brne	.-34     	; 0x6742 <__fp_powser+0x18>
    6764:	df 90       	pop	r13
    6766:	ef 90       	pop	r14
    6768:	ff 90       	pop	r15
    676a:	0f 91       	pop	r16
    676c:	1f 91       	pop	r17
    676e:	cf 91       	pop	r28
    6770:	df 91       	pop	r29
    6772:	08 95       	ret

00006774 <__fp_pscA>:
    6774:	00 24       	eor	r0, r0
    6776:	0a 94       	dec	r0
    6778:	16 16       	cp	r1, r22
    677a:	17 06       	cpc	r1, r23
    677c:	18 06       	cpc	r1, r24
    677e:	09 06       	cpc	r0, r25
    6780:	08 95       	ret

00006782 <__fp_pscB>:
    6782:	00 24       	eor	r0, r0
    6784:	0a 94       	dec	r0
    6786:	12 16       	cp	r1, r18
    6788:	13 06       	cpc	r1, r19
    678a:	14 06       	cpc	r1, r20
    678c:	05 06       	cpc	r0, r21
    678e:	08 95       	ret
    6790:	c9 cf       	rjmp	.-110    	; 0x6724 <__fp_nan>

00006792 <__fp_rempio2>:
    6792:	50 d0       	rcall	.+160    	; 0x6834 <__fp_splitA>
    6794:	e8 f3       	brcs	.-6      	; 0x6790 <__fp_pscB+0xe>
    6796:	e8 94       	clt
    6798:	e0 e0       	ldi	r30, 0x00	; 0
    679a:	bb 27       	eor	r27, r27
    679c:	9f 57       	subi	r25, 0x7F	; 127
    679e:	f0 f0       	brcs	.+60     	; 0x67dc <__fp_rempio2+0x4a>
    67a0:	2a ed       	ldi	r18, 0xDA	; 218
    67a2:	3f e0       	ldi	r19, 0x0F	; 15
    67a4:	49 ec       	ldi	r20, 0xC9	; 201
    67a6:	06 c0       	rjmp	.+12     	; 0x67b4 <__fp_rempio2+0x22>
    67a8:	ee 0f       	add	r30, r30
    67aa:	bb 0f       	add	r27, r27
    67ac:	66 1f       	adc	r22, r22
    67ae:	77 1f       	adc	r23, r23
    67b0:	88 1f       	adc	r24, r24
    67b2:	28 f0       	brcs	.+10     	; 0x67be <__fp_rempio2+0x2c>
    67b4:	b2 3a       	cpi	r27, 0xA2	; 162
    67b6:	62 07       	cpc	r22, r18
    67b8:	73 07       	cpc	r23, r19
    67ba:	84 07       	cpc	r24, r20
    67bc:	28 f0       	brcs	.+10     	; 0x67c8 <__fp_rempio2+0x36>
    67be:	b2 5a       	subi	r27, 0xA2	; 162
    67c0:	62 0b       	sbc	r22, r18
    67c2:	73 0b       	sbc	r23, r19
    67c4:	84 0b       	sbc	r24, r20
    67c6:	e3 95       	inc	r30
    67c8:	9a 95       	dec	r25
    67ca:	72 f7       	brpl	.-36     	; 0x67a8 <__fp_rempio2+0x16>
    67cc:	80 38       	cpi	r24, 0x80	; 128
    67ce:	30 f4       	brcc	.+12     	; 0x67dc <__fp_rempio2+0x4a>
    67d0:	9a 95       	dec	r25
    67d2:	bb 0f       	add	r27, r27
    67d4:	66 1f       	adc	r22, r22
    67d6:	77 1f       	adc	r23, r23
    67d8:	88 1f       	adc	r24, r24
    67da:	d2 f7       	brpl	.-12     	; 0x67d0 <__fp_rempio2+0x3e>
    67dc:	90 48       	sbci	r25, 0x80	; 128
    67de:	96 cf       	rjmp	.-212    	; 0x670c <__fp_mpack_finite>

000067e0 <__fp_round>:
    67e0:	09 2e       	mov	r0, r25
    67e2:	03 94       	inc	r0
    67e4:	00 0c       	add	r0, r0
    67e6:	11 f4       	brne	.+4      	; 0x67ec <__fp_round+0xc>
    67e8:	88 23       	and	r24, r24
    67ea:	52 f0       	brmi	.+20     	; 0x6800 <__fp_round+0x20>
    67ec:	bb 0f       	add	r27, r27
    67ee:	40 f4       	brcc	.+16     	; 0x6800 <__fp_round+0x20>
    67f0:	bf 2b       	or	r27, r31
    67f2:	11 f4       	brne	.+4      	; 0x67f8 <__fp_round+0x18>
    67f4:	60 ff       	sbrs	r22, 0
    67f6:	04 c0       	rjmp	.+8      	; 0x6800 <__fp_round+0x20>
    67f8:	6f 5f       	subi	r22, 0xFF	; 255
    67fa:	7f 4f       	sbci	r23, 0xFF	; 255
    67fc:	8f 4f       	sbci	r24, 0xFF	; 255
    67fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6800:	08 95       	ret

00006802 <__fp_sinus>:
    6802:	ef 93       	push	r30
    6804:	e0 ff       	sbrs	r30, 0
    6806:	06 c0       	rjmp	.+12     	; 0x6814 <__fp_sinus+0x12>
    6808:	a2 ea       	ldi	r26, 0xA2	; 162
    680a:	2a ed       	ldi	r18, 0xDA	; 218
    680c:	3f e0       	ldi	r19, 0x0F	; 15
    680e:	49 ec       	ldi	r20, 0xC9	; 201
    6810:	5f eb       	ldi	r21, 0xBF	; 191
    6812:	90 dd       	rcall	.-1248   	; 0x6334 <__addsf3x>
    6814:	e5 df       	rcall	.-54     	; 0x67e0 <__fp_round>
    6816:	0f 90       	pop	r0
    6818:	03 94       	inc	r0
    681a:	01 fc       	sbrc	r0, 1
    681c:	90 58       	subi	r25, 0x80	; 128
    681e:	e9 eb       	ldi	r30, 0xB9	; 185
    6820:	f0 e0       	ldi	r31, 0x00	; 0
    6822:	47 c4       	rjmp	.+2190   	; 0x70b2 <__fp_powsodd>

00006824 <__fp_split3>:
    6824:	57 fd       	sbrc	r21, 7
    6826:	90 58       	subi	r25, 0x80	; 128
    6828:	44 0f       	add	r20, r20
    682a:	55 1f       	adc	r21, r21
    682c:	59 f0       	breq	.+22     	; 0x6844 <__fp_splitA+0x10>
    682e:	5f 3f       	cpi	r21, 0xFF	; 255
    6830:	71 f0       	breq	.+28     	; 0x684e <__fp_splitA+0x1a>
    6832:	47 95       	ror	r20

00006834 <__fp_splitA>:
    6834:	88 0f       	add	r24, r24
    6836:	97 fb       	bst	r25, 7
    6838:	99 1f       	adc	r25, r25
    683a:	61 f0       	breq	.+24     	; 0x6854 <__fp_splitA+0x20>
    683c:	9f 3f       	cpi	r25, 0xFF	; 255
    683e:	79 f0       	breq	.+30     	; 0x685e <__fp_splitA+0x2a>
    6840:	87 95       	ror	r24
    6842:	08 95       	ret
    6844:	12 16       	cp	r1, r18
    6846:	13 06       	cpc	r1, r19
    6848:	14 06       	cpc	r1, r20
    684a:	55 1f       	adc	r21, r21
    684c:	f2 cf       	rjmp	.-28     	; 0x6832 <__fp_split3+0xe>
    684e:	46 95       	lsr	r20
    6850:	f1 df       	rcall	.-30     	; 0x6834 <__fp_splitA>
    6852:	08 c0       	rjmp	.+16     	; 0x6864 <__fp_splitA+0x30>
    6854:	16 16       	cp	r1, r22
    6856:	17 06       	cpc	r1, r23
    6858:	18 06       	cpc	r1, r24
    685a:	99 1f       	adc	r25, r25
    685c:	f1 cf       	rjmp	.-30     	; 0x6840 <__fp_splitA+0xc>
    685e:	86 95       	lsr	r24
    6860:	71 05       	cpc	r23, r1
    6862:	61 05       	cpc	r22, r1
    6864:	08 94       	sec
    6866:	08 95       	ret

00006868 <__fp_trunc>:
    6868:	e5 df       	rcall	.-54     	; 0x6834 <__fp_splitA>
    686a:	a0 f0       	brcs	.+40     	; 0x6894 <__fp_trunc+0x2c>
    686c:	be e7       	ldi	r27, 0x7E	; 126
    686e:	b9 17       	cp	r27, r25
    6870:	88 f4       	brcc	.+34     	; 0x6894 <__fp_trunc+0x2c>
    6872:	bb 27       	eor	r27, r27
    6874:	9f 38       	cpi	r25, 0x8F	; 143
    6876:	60 f4       	brcc	.+24     	; 0x6890 <__fp_trunc+0x28>
    6878:	16 16       	cp	r1, r22
    687a:	b1 1d       	adc	r27, r1
    687c:	67 2f       	mov	r22, r23
    687e:	78 2f       	mov	r23, r24
    6880:	88 27       	eor	r24, r24
    6882:	98 5f       	subi	r25, 0xF8	; 248
    6884:	f7 cf       	rjmp	.-18     	; 0x6874 <__fp_trunc+0xc>
    6886:	86 95       	lsr	r24
    6888:	77 95       	ror	r23
    688a:	67 95       	ror	r22
    688c:	b1 1d       	adc	r27, r1
    688e:	93 95       	inc	r25
    6890:	96 39       	cpi	r25, 0x96	; 150
    6892:	c8 f3       	brcs	.-14     	; 0x6886 <__fp_trunc+0x1e>
    6894:	08 95       	ret

00006896 <__fp_zero>:
    6896:	e8 94       	clt

00006898 <__fp_szero>:
    6898:	bb 27       	eor	r27, r27
    689a:	66 27       	eor	r22, r22
    689c:	77 27       	eor	r23, r23
    689e:	cb 01       	movw	r24, r22
    68a0:	97 f9       	bld	r25, 7
    68a2:	08 95       	ret

000068a4 <__gesf2>:
    68a4:	ec de       	rcall	.-552    	; 0x667e <__fp_cmp>
    68a6:	08 f4       	brcc	.+2      	; 0x68aa <__gesf2+0x6>
    68a8:	8f ef       	ldi	r24, 0xFF	; 255
    68aa:	08 95       	ret
    68ac:	63 df       	rcall	.-314    	; 0x6774 <__fp_pscA>
    68ae:	19 f0       	breq	.+6      	; 0x68b6 <__gesf2+0x12>
    68b0:	68 df       	rcall	.-304    	; 0x6782 <__fp_pscB>
    68b2:	09 f0       	breq	.+2      	; 0x68b6 <__gesf2+0x12>
    68b4:	37 cf       	rjmp	.-402    	; 0x6724 <__fp_nan>
    68b6:	07 cf       	rjmp	.-498    	; 0x66c6 <__fp_inf>
    68b8:	b9 01       	movw	r22, r18
    68ba:	ca 01       	movw	r24, r20
    68bc:	25 cf       	rjmp	.-438    	; 0x6708 <__fp_mpack>

000068be <hypot>:
    68be:	9f 77       	andi	r25, 0x7F	; 127
    68c0:	5f 77       	andi	r21, 0x7F	; 127
    68c2:	b0 df       	rcall	.-160    	; 0x6824 <__fp_split3>
    68c4:	98 f3       	brcs	.-26     	; 0x68ac <__gesf2+0x8>
    68c6:	99 23       	and	r25, r25
    68c8:	b9 f3       	breq	.-18     	; 0x68b8 <__gesf2+0x14>
    68ca:	55 23       	and	r21, r21
    68cc:	b9 f3       	breq	.-18     	; 0x68bc <__gesf2+0x18>
    68ce:	ff 27       	eor	r31, r31
    68d0:	95 17       	cp	r25, r21
    68d2:	58 f4       	brcc	.+22     	; 0x68ea <hypot+0x2c>
    68d4:	e5 2f       	mov	r30, r21
    68d6:	e9 1b       	sub	r30, r25
    68d8:	ed 30       	cpi	r30, 0x0D	; 13
    68da:	70 f7       	brcc	.-36     	; 0x68b8 <__gesf2+0x14>
    68dc:	5e 3b       	cpi	r21, 0xBE	; 190
    68de:	10 f0       	brcs	.+4      	; 0x68e4 <hypot+0x26>
    68e0:	f1 e4       	ldi	r31, 0x41	; 65
    68e2:	1c c0       	rjmp	.+56     	; 0x691c <hypot+0x5e>
    68e4:	90 34       	cpi	r25, 0x40	; 64
    68e6:	e0 f4       	brcc	.+56     	; 0x6920 <hypot+0x62>
    68e8:	0a c0       	rjmp	.+20     	; 0x68fe <hypot+0x40>
    68ea:	e9 2f       	mov	r30, r25
    68ec:	e5 1b       	sub	r30, r21
    68ee:	ed 30       	cpi	r30, 0x0D	; 13
    68f0:	28 f7       	brcc	.-54     	; 0x68bc <__gesf2+0x18>
    68f2:	9e 3b       	cpi	r25, 0xBE	; 190
    68f4:	10 f0       	brcs	.+4      	; 0x68fa <hypot+0x3c>
    68f6:	f1 e4       	ldi	r31, 0x41	; 65
    68f8:	11 c0       	rjmp	.+34     	; 0x691c <hypot+0x5e>
    68fa:	50 34       	cpi	r21, 0x40	; 64
    68fc:	88 f4       	brcc	.+34     	; 0x6920 <hypot+0x62>
    68fe:	f9 ea       	ldi	r31, 0xA9	; 169
    6900:	88 23       	and	r24, r24
    6902:	2a f0       	brmi	.+10     	; 0x690e <hypot+0x50>
    6904:	9a 95       	dec	r25
    6906:	66 0f       	add	r22, r22
    6908:	77 1f       	adc	r23, r23
    690a:	88 1f       	adc	r24, r24
    690c:	da f7       	brpl	.-10     	; 0x6904 <hypot+0x46>
    690e:	44 23       	and	r20, r20
    6910:	2a f0       	brmi	.+10     	; 0x691c <hypot+0x5e>
    6912:	5a 95       	dec	r21
    6914:	22 0f       	add	r18, r18
    6916:	33 1f       	adc	r19, r19
    6918:	44 1f       	adc	r20, r20
    691a:	da f7       	brpl	.-10     	; 0x6912 <hypot+0x54>
    691c:	9f 1b       	sub	r25, r31
    691e:	5f 1b       	sub	r21, r31
    6920:	ff 93       	push	r31
    6922:	1f 93       	push	r17
    6924:	0f 93       	push	r16
    6926:	ff 92       	push	r15
    6928:	ef 92       	push	r14
    692a:	79 01       	movw	r14, r18
    692c:	8a 01       	movw	r16, r20
    692e:	bb 27       	eor	r27, r27
    6930:	ab 2f       	mov	r26, r27
    6932:	9b 01       	movw	r18, r22
    6934:	ac 01       	movw	r20, r24
    6936:	66 d0       	rcall	.+204    	; 0x6a04 <__mulsf3_pse>
    6938:	97 01       	movw	r18, r14
    693a:	a8 01       	movw	r20, r16
    693c:	bf 93       	push	r27
    693e:	7b 01       	movw	r14, r22
    6940:	8c 01       	movw	r16, r24
    6942:	aa 27       	eor	r26, r26
    6944:	ba 2f       	mov	r27, r26
    6946:	b9 01       	movw	r22, r18
    6948:	ca 01       	movw	r24, r20
    694a:	5c d0       	rcall	.+184    	; 0x6a04 <__mulsf3_pse>
    694c:	af 91       	pop	r26
    694e:	97 01       	movw	r18, r14
    6950:	a8 01       	movw	r20, r16
    6952:	ef 90       	pop	r14
    6954:	ff 90       	pop	r15
    6956:	0f 91       	pop	r16
    6958:	1f 91       	pop	r17
    695a:	ec dc       	rcall	.-1576   	; 0x6334 <__addsf3x>
    695c:	41 df       	rcall	.-382    	; 0x67e0 <__fp_round>
    695e:	b1 d0       	rcall	.+354    	; 0x6ac2 <sqrt>
    6960:	4f 91       	pop	r20
    6962:	40 ff       	sbrs	r20, 0
    6964:	08 95       	ret
    6966:	55 27       	eor	r21, r21
    6968:	47 fd       	sbrc	r20, 7
    696a:	50 95       	com	r21
    696c:	09 c0       	rjmp	.+18     	; 0x6980 <ldexp>

0000696e <inverse>:
    696e:	9b 01       	movw	r18, r22
    6970:	ac 01       	movw	r20, r24
    6972:	60 e0       	ldi	r22, 0x00	; 0
    6974:	70 e0       	ldi	r23, 0x00	; 0
    6976:	80 e8       	ldi	r24, 0x80	; 128
    6978:	9f e3       	ldi	r25, 0x3F	; 63
    697a:	ab cd       	rjmp	.-1194   	; 0x64d2 <__divsf3>
    697c:	a4 ce       	rjmp	.-696    	; 0x66c6 <__fp_inf>
    697e:	c4 ce       	rjmp	.-632    	; 0x6708 <__fp_mpack>

00006980 <ldexp>:
    6980:	59 df       	rcall	.-334    	; 0x6834 <__fp_splitA>
    6982:	e8 f3       	brcs	.-6      	; 0x697e <inverse+0x10>
    6984:	99 23       	and	r25, r25
    6986:	d9 f3       	breq	.-10     	; 0x697e <inverse+0x10>
    6988:	94 0f       	add	r25, r20
    698a:	51 1d       	adc	r21, r1
    698c:	bb f3       	brvs	.-18     	; 0x697c <inverse+0xe>
    698e:	91 50       	subi	r25, 0x01	; 1
    6990:	50 40       	sbci	r21, 0x00	; 0
    6992:	94 f0       	brlt	.+36     	; 0x69b8 <ldexp+0x38>
    6994:	59 f0       	breq	.+22     	; 0x69ac <ldexp+0x2c>
    6996:	88 23       	and	r24, r24
    6998:	32 f0       	brmi	.+12     	; 0x69a6 <ldexp+0x26>
    699a:	66 0f       	add	r22, r22
    699c:	77 1f       	adc	r23, r23
    699e:	88 1f       	adc	r24, r24
    69a0:	91 50       	subi	r25, 0x01	; 1
    69a2:	50 40       	sbci	r21, 0x00	; 0
    69a4:	c1 f7       	brne	.-16     	; 0x6996 <ldexp+0x16>
    69a6:	9e 3f       	cpi	r25, 0xFE	; 254
    69a8:	51 05       	cpc	r21, r1
    69aa:	44 f7       	brge	.-48     	; 0x697c <inverse+0xe>
    69ac:	88 0f       	add	r24, r24
    69ae:	91 1d       	adc	r25, r1
    69b0:	96 95       	lsr	r25
    69b2:	87 95       	ror	r24
    69b4:	97 f9       	bld	r25, 7
    69b6:	08 95       	ret
    69b8:	5f 3f       	cpi	r21, 0xFF	; 255
    69ba:	ac f0       	brlt	.+42     	; 0x69e6 <ldexp+0x66>
    69bc:	98 3e       	cpi	r25, 0xE8	; 232
    69be:	9c f0       	brlt	.+38     	; 0x69e6 <ldexp+0x66>
    69c0:	bb 27       	eor	r27, r27
    69c2:	86 95       	lsr	r24
    69c4:	77 95       	ror	r23
    69c6:	67 95       	ror	r22
    69c8:	b7 95       	ror	r27
    69ca:	08 f4       	brcc	.+2      	; 0x69ce <ldexp+0x4e>
    69cc:	b1 60       	ori	r27, 0x01	; 1
    69ce:	93 95       	inc	r25
    69d0:	c1 f7       	brne	.-16     	; 0x69c2 <ldexp+0x42>
    69d2:	bb 0f       	add	r27, r27
    69d4:	58 f7       	brcc	.-42     	; 0x69ac <ldexp+0x2c>
    69d6:	11 f4       	brne	.+4      	; 0x69dc <ldexp+0x5c>
    69d8:	60 ff       	sbrs	r22, 0
    69da:	e8 cf       	rjmp	.-48     	; 0x69ac <ldexp+0x2c>
    69dc:	6f 5f       	subi	r22, 0xFF	; 255
    69de:	7f 4f       	sbci	r23, 0xFF	; 255
    69e0:	8f 4f       	sbci	r24, 0xFF	; 255
    69e2:	9f 4f       	sbci	r25, 0xFF	; 255
    69e4:	e3 cf       	rjmp	.-58     	; 0x69ac <ldexp+0x2c>
    69e6:	58 cf       	rjmp	.-336    	; 0x6898 <__fp_szero>

000069e8 <__mulsf3>:
    69e8:	0b d0       	rcall	.+22     	; 0x6a00 <__mulsf3x>
    69ea:	fa ce       	rjmp	.-524    	; 0x67e0 <__fp_round>
    69ec:	c3 de       	rcall	.-634    	; 0x6774 <__fp_pscA>
    69ee:	28 f0       	brcs	.+10     	; 0x69fa <__mulsf3+0x12>
    69f0:	c8 de       	rcall	.-624    	; 0x6782 <__fp_pscB>
    69f2:	18 f0       	brcs	.+6      	; 0x69fa <__mulsf3+0x12>
    69f4:	95 23       	and	r25, r21
    69f6:	09 f0       	breq	.+2      	; 0x69fa <__mulsf3+0x12>
    69f8:	66 ce       	rjmp	.-820    	; 0x66c6 <__fp_inf>
    69fa:	94 ce       	rjmp	.-728    	; 0x6724 <__fp_nan>
    69fc:	11 24       	eor	r1, r1
    69fe:	4c cf       	rjmp	.-360    	; 0x6898 <__fp_szero>

00006a00 <__mulsf3x>:
    6a00:	11 df       	rcall	.-478    	; 0x6824 <__fp_split3>
    6a02:	a0 f3       	brcs	.-24     	; 0x69ec <__mulsf3+0x4>

00006a04 <__mulsf3_pse>:
    6a04:	95 9f       	mul	r25, r21
    6a06:	d1 f3       	breq	.-12     	; 0x69fc <__mulsf3+0x14>
    6a08:	95 0f       	add	r25, r21
    6a0a:	50 e0       	ldi	r21, 0x00	; 0
    6a0c:	55 1f       	adc	r21, r21
    6a0e:	62 9f       	mul	r22, r18
    6a10:	f0 01       	movw	r30, r0
    6a12:	72 9f       	mul	r23, r18
    6a14:	bb 27       	eor	r27, r27
    6a16:	f0 0d       	add	r31, r0
    6a18:	b1 1d       	adc	r27, r1
    6a1a:	63 9f       	mul	r22, r19
    6a1c:	aa 27       	eor	r26, r26
    6a1e:	f0 0d       	add	r31, r0
    6a20:	b1 1d       	adc	r27, r1
    6a22:	aa 1f       	adc	r26, r26
    6a24:	64 9f       	mul	r22, r20
    6a26:	66 27       	eor	r22, r22
    6a28:	b0 0d       	add	r27, r0
    6a2a:	a1 1d       	adc	r26, r1
    6a2c:	66 1f       	adc	r22, r22
    6a2e:	82 9f       	mul	r24, r18
    6a30:	22 27       	eor	r18, r18
    6a32:	b0 0d       	add	r27, r0
    6a34:	a1 1d       	adc	r26, r1
    6a36:	62 1f       	adc	r22, r18
    6a38:	73 9f       	mul	r23, r19
    6a3a:	b0 0d       	add	r27, r0
    6a3c:	a1 1d       	adc	r26, r1
    6a3e:	62 1f       	adc	r22, r18
    6a40:	83 9f       	mul	r24, r19
    6a42:	a0 0d       	add	r26, r0
    6a44:	61 1d       	adc	r22, r1
    6a46:	22 1f       	adc	r18, r18
    6a48:	74 9f       	mul	r23, r20
    6a4a:	33 27       	eor	r19, r19
    6a4c:	a0 0d       	add	r26, r0
    6a4e:	61 1d       	adc	r22, r1
    6a50:	23 1f       	adc	r18, r19
    6a52:	84 9f       	mul	r24, r20
    6a54:	60 0d       	add	r22, r0
    6a56:	21 1d       	adc	r18, r1
    6a58:	82 2f       	mov	r24, r18
    6a5a:	76 2f       	mov	r23, r22
    6a5c:	6a 2f       	mov	r22, r26
    6a5e:	11 24       	eor	r1, r1
    6a60:	9f 57       	subi	r25, 0x7F	; 127
    6a62:	50 40       	sbci	r21, 0x00	; 0
    6a64:	8a f0       	brmi	.+34     	; 0x6a88 <__mulsf3_pse+0x84>
    6a66:	e1 f0       	breq	.+56     	; 0x6aa0 <__mulsf3_pse+0x9c>
    6a68:	88 23       	and	r24, r24
    6a6a:	4a f0       	brmi	.+18     	; 0x6a7e <__mulsf3_pse+0x7a>
    6a6c:	ee 0f       	add	r30, r30
    6a6e:	ff 1f       	adc	r31, r31
    6a70:	bb 1f       	adc	r27, r27
    6a72:	66 1f       	adc	r22, r22
    6a74:	77 1f       	adc	r23, r23
    6a76:	88 1f       	adc	r24, r24
    6a78:	91 50       	subi	r25, 0x01	; 1
    6a7a:	50 40       	sbci	r21, 0x00	; 0
    6a7c:	a9 f7       	brne	.-22     	; 0x6a68 <__mulsf3_pse+0x64>
    6a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    6a80:	51 05       	cpc	r21, r1
    6a82:	70 f0       	brcs	.+28     	; 0x6aa0 <__mulsf3_pse+0x9c>
    6a84:	20 ce       	rjmp	.-960    	; 0x66c6 <__fp_inf>
    6a86:	08 cf       	rjmp	.-496    	; 0x6898 <__fp_szero>
    6a88:	5f 3f       	cpi	r21, 0xFF	; 255
    6a8a:	ec f3       	brlt	.-6      	; 0x6a86 <__mulsf3_pse+0x82>
    6a8c:	98 3e       	cpi	r25, 0xE8	; 232
    6a8e:	dc f3       	brlt	.-10     	; 0x6a86 <__mulsf3_pse+0x82>
    6a90:	86 95       	lsr	r24
    6a92:	77 95       	ror	r23
    6a94:	67 95       	ror	r22
    6a96:	b7 95       	ror	r27
    6a98:	f7 95       	ror	r31
    6a9a:	e7 95       	ror	r30
    6a9c:	9f 5f       	subi	r25, 0xFF	; 255
    6a9e:	c1 f7       	brne	.-16     	; 0x6a90 <__mulsf3_pse+0x8c>
    6aa0:	fe 2b       	or	r31, r30
    6aa2:	88 0f       	add	r24, r24
    6aa4:	91 1d       	adc	r25, r1
    6aa6:	96 95       	lsr	r25
    6aa8:	87 95       	ror	r24
    6aaa:	97 f9       	bld	r25, 7
    6aac:	08 95       	ret

00006aae <sin>:
    6aae:	9f 93       	push	r25
    6ab0:	70 de       	rcall	.-800    	; 0x6792 <__fp_rempio2>
    6ab2:	0f 90       	pop	r0
    6ab4:	07 fc       	sbrc	r0, 7
    6ab6:	ee 5f       	subi	r30, 0xFE	; 254
    6ab8:	a4 ce       	rjmp	.-696    	; 0x6802 <__fp_sinus>
    6aba:	11 f4       	brne	.+4      	; 0x6ac0 <sin+0x12>
    6abc:	0e f4       	brtc	.+2      	; 0x6ac0 <sin+0x12>
    6abe:	32 ce       	rjmp	.-924    	; 0x6724 <__fp_nan>
    6ac0:	23 ce       	rjmp	.-954    	; 0x6708 <__fp_mpack>

00006ac2 <sqrt>:
    6ac2:	b8 de       	rcall	.-656    	; 0x6834 <__fp_splitA>
    6ac4:	d0 f3       	brcs	.-12     	; 0x6aba <sin+0xc>
    6ac6:	99 23       	and	r25, r25
    6ac8:	d9 f3       	breq	.-10     	; 0x6ac0 <sin+0x12>
    6aca:	ce f3       	brts	.-14     	; 0x6abe <sin+0x10>
    6acc:	9f 57       	subi	r25, 0x7F	; 127
    6ace:	55 0b       	sbc	r21, r21
    6ad0:	87 ff       	sbrs	r24, 7
    6ad2:	e8 d2       	rcall	.+1488   	; 0x70a4 <__fp_norm2>
    6ad4:	00 24       	eor	r0, r0
    6ad6:	a0 e6       	ldi	r26, 0x60	; 96
    6ad8:	40 ea       	ldi	r20, 0xA0	; 160
    6ada:	90 01       	movw	r18, r0
    6adc:	80 58       	subi	r24, 0x80	; 128
    6ade:	56 95       	lsr	r21
    6ae0:	97 95       	ror	r25
    6ae2:	28 f4       	brcc	.+10     	; 0x6aee <sqrt+0x2c>
    6ae4:	80 5c       	subi	r24, 0xC0	; 192
    6ae6:	66 0f       	add	r22, r22
    6ae8:	77 1f       	adc	r23, r23
    6aea:	88 1f       	adc	r24, r24
    6aec:	20 f0       	brcs	.+8      	; 0x6af6 <sqrt+0x34>
    6aee:	26 17       	cp	r18, r22
    6af0:	37 07       	cpc	r19, r23
    6af2:	48 07       	cpc	r20, r24
    6af4:	30 f4       	brcc	.+12     	; 0x6b02 <sqrt+0x40>
    6af6:	62 1b       	sub	r22, r18
    6af8:	73 0b       	sbc	r23, r19
    6afa:	84 0b       	sbc	r24, r20
    6afc:	20 29       	or	r18, r0
    6afe:	31 29       	or	r19, r1
    6b00:	4a 2b       	or	r20, r26
    6b02:	a6 95       	lsr	r26
    6b04:	17 94       	ror	r1
    6b06:	07 94       	ror	r0
    6b08:	20 25       	eor	r18, r0
    6b0a:	31 25       	eor	r19, r1
    6b0c:	4a 27       	eor	r20, r26
    6b0e:	58 f7       	brcc	.-42     	; 0x6ae6 <sqrt+0x24>
    6b10:	66 0f       	add	r22, r22
    6b12:	77 1f       	adc	r23, r23
    6b14:	88 1f       	adc	r24, r24
    6b16:	20 f0       	brcs	.+8      	; 0x6b20 <sqrt+0x5e>
    6b18:	26 17       	cp	r18, r22
    6b1a:	37 07       	cpc	r19, r23
    6b1c:	48 07       	cpc	r20, r24
    6b1e:	30 f4       	brcc	.+12     	; 0x6b2c <sqrt+0x6a>
    6b20:	62 0b       	sbc	r22, r18
    6b22:	73 0b       	sbc	r23, r19
    6b24:	84 0b       	sbc	r24, r20
    6b26:	20 0d       	add	r18, r0
    6b28:	31 1d       	adc	r19, r1
    6b2a:	41 1d       	adc	r20, r1
    6b2c:	a0 95       	com	r26
    6b2e:	81 f7       	brne	.-32     	; 0x6b10 <sqrt+0x4e>
    6b30:	b9 01       	movw	r22, r18
    6b32:	84 2f       	mov	r24, r20
    6b34:	91 58       	subi	r25, 0x81	; 129
    6b36:	88 0f       	add	r24, r24
    6b38:	96 95       	lsr	r25
    6b3a:	87 95       	ror	r24
    6b3c:	08 95       	ret

00006b3e <square>:
    6b3e:	9b 01       	movw	r18, r22
    6b40:	ac 01       	movw	r20, r24
    6b42:	52 cf       	rjmp	.-348    	; 0x69e8 <__mulsf3>

00006b44 <vfprintf>:
    6b44:	2f 92       	push	r2
    6b46:	3f 92       	push	r3
    6b48:	4f 92       	push	r4
    6b4a:	5f 92       	push	r5
    6b4c:	6f 92       	push	r6
    6b4e:	7f 92       	push	r7
    6b50:	8f 92       	push	r8
    6b52:	9f 92       	push	r9
    6b54:	af 92       	push	r10
    6b56:	bf 92       	push	r11
    6b58:	cf 92       	push	r12
    6b5a:	df 92       	push	r13
    6b5c:	ef 92       	push	r14
    6b5e:	ff 92       	push	r15
    6b60:	0f 93       	push	r16
    6b62:	1f 93       	push	r17
    6b64:	df 93       	push	r29
    6b66:	cf 93       	push	r28
    6b68:	cd b7       	in	r28, 0x3d	; 61
    6b6a:	de b7       	in	r29, 0x3e	; 62
    6b6c:	2c 97       	sbiw	r28, 0x0c	; 12
    6b6e:	0f b6       	in	r0, 0x3f	; 63
    6b70:	f8 94       	cli
    6b72:	de bf       	out	0x3e, r29	; 62
    6b74:	0f be       	out	0x3f, r0	; 63
    6b76:	cd bf       	out	0x3d, r28	; 61
    6b78:	6c 01       	movw	r12, r24
    6b7a:	1b 01       	movw	r2, r22
    6b7c:	8a 01       	movw	r16, r20
    6b7e:	fc 01       	movw	r30, r24
    6b80:	17 82       	std	Z+7, r1	; 0x07
    6b82:	16 82       	std	Z+6, r1	; 0x06
    6b84:	83 81       	ldd	r24, Z+3	; 0x03
    6b86:	81 ff       	sbrs	r24, 1
    6b88:	d1 c1       	rjmp	.+930    	; 0x6f2c <vfprintf+0x3e8>
    6b8a:	2e 01       	movw	r4, r28
    6b8c:	08 94       	sec
    6b8e:	41 1c       	adc	r4, r1
    6b90:	51 1c       	adc	r5, r1
    6b92:	f6 01       	movw	r30, r12
    6b94:	93 81       	ldd	r25, Z+3	; 0x03
    6b96:	f1 01       	movw	r30, r2
    6b98:	93 fd       	sbrc	r25, 3
    6b9a:	85 91       	lpm	r24, Z+
    6b9c:	93 ff       	sbrs	r25, 3
    6b9e:	81 91       	ld	r24, Z+
    6ba0:	1f 01       	movw	r2, r30
    6ba2:	88 23       	and	r24, r24
    6ba4:	09 f4       	brne	.+2      	; 0x6ba8 <vfprintf+0x64>
    6ba6:	be c1       	rjmp	.+892    	; 0x6f24 <vfprintf+0x3e0>
    6ba8:	85 32       	cpi	r24, 0x25	; 37
    6baa:	39 f4       	brne	.+14     	; 0x6bba <vfprintf+0x76>
    6bac:	93 fd       	sbrc	r25, 3
    6bae:	85 91       	lpm	r24, Z+
    6bb0:	93 ff       	sbrs	r25, 3
    6bb2:	81 91       	ld	r24, Z+
    6bb4:	1f 01       	movw	r2, r30
    6bb6:	85 32       	cpi	r24, 0x25	; 37
    6bb8:	29 f4       	brne	.+10     	; 0x6bc4 <vfprintf+0x80>
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	b6 01       	movw	r22, r12
    6bbe:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6bc2:	e7 cf       	rjmp	.-50     	; 0x6b92 <vfprintf+0x4e>
    6bc4:	ee 24       	eor	r14, r14
    6bc6:	ff 24       	eor	r15, r15
    6bc8:	20 e0       	ldi	r18, 0x00	; 0
    6bca:	20 32       	cpi	r18, 0x20	; 32
    6bcc:	b0 f4       	brcc	.+44     	; 0x6bfa <vfprintf+0xb6>
    6bce:	8b 32       	cpi	r24, 0x2B	; 43
    6bd0:	69 f0       	breq	.+26     	; 0x6bec <vfprintf+0xa8>
    6bd2:	8c 32       	cpi	r24, 0x2C	; 44
    6bd4:	28 f4       	brcc	.+10     	; 0x6be0 <vfprintf+0x9c>
    6bd6:	80 32       	cpi	r24, 0x20	; 32
    6bd8:	51 f0       	breq	.+20     	; 0x6bee <vfprintf+0xaa>
    6bda:	83 32       	cpi	r24, 0x23	; 35
    6bdc:	71 f4       	brne	.+28     	; 0x6bfa <vfprintf+0xb6>
    6bde:	0b c0       	rjmp	.+22     	; 0x6bf6 <vfprintf+0xb2>
    6be0:	8d 32       	cpi	r24, 0x2D	; 45
    6be2:	39 f0       	breq	.+14     	; 0x6bf2 <vfprintf+0xae>
    6be4:	80 33       	cpi	r24, 0x30	; 48
    6be6:	49 f4       	brne	.+18     	; 0x6bfa <vfprintf+0xb6>
    6be8:	21 60       	ori	r18, 0x01	; 1
    6bea:	2c c0       	rjmp	.+88     	; 0x6c44 <vfprintf+0x100>
    6bec:	22 60       	ori	r18, 0x02	; 2
    6bee:	24 60       	ori	r18, 0x04	; 4
    6bf0:	29 c0       	rjmp	.+82     	; 0x6c44 <vfprintf+0x100>
    6bf2:	28 60       	ori	r18, 0x08	; 8
    6bf4:	27 c0       	rjmp	.+78     	; 0x6c44 <vfprintf+0x100>
    6bf6:	20 61       	ori	r18, 0x10	; 16
    6bf8:	25 c0       	rjmp	.+74     	; 0x6c44 <vfprintf+0x100>
    6bfa:	27 fd       	sbrc	r18, 7
    6bfc:	2c c0       	rjmp	.+88     	; 0x6c56 <vfprintf+0x112>
    6bfe:	38 2f       	mov	r19, r24
    6c00:	30 53       	subi	r19, 0x30	; 48
    6c02:	3a 30       	cpi	r19, 0x0A	; 10
    6c04:	98 f4       	brcc	.+38     	; 0x6c2c <vfprintf+0xe8>
    6c06:	26 ff       	sbrs	r18, 6
    6c08:	08 c0       	rjmp	.+16     	; 0x6c1a <vfprintf+0xd6>
    6c0a:	8e 2d       	mov	r24, r14
    6c0c:	88 0f       	add	r24, r24
    6c0e:	e8 2e       	mov	r14, r24
    6c10:	ee 0c       	add	r14, r14
    6c12:	ee 0c       	add	r14, r14
    6c14:	e8 0e       	add	r14, r24
    6c16:	e3 0e       	add	r14, r19
    6c18:	15 c0       	rjmp	.+42     	; 0x6c44 <vfprintf+0x100>
    6c1a:	8f 2d       	mov	r24, r15
    6c1c:	88 0f       	add	r24, r24
    6c1e:	f8 2e       	mov	r15, r24
    6c20:	ff 0c       	add	r15, r15
    6c22:	ff 0c       	add	r15, r15
    6c24:	f8 0e       	add	r15, r24
    6c26:	f3 0e       	add	r15, r19
    6c28:	20 62       	ori	r18, 0x20	; 32
    6c2a:	0c c0       	rjmp	.+24     	; 0x6c44 <vfprintf+0x100>
    6c2c:	8e 32       	cpi	r24, 0x2E	; 46
    6c2e:	21 f4       	brne	.+8      	; 0x6c38 <vfprintf+0xf4>
    6c30:	26 fd       	sbrc	r18, 6
    6c32:	78 c1       	rjmp	.+752    	; 0x6f24 <vfprintf+0x3e0>
    6c34:	20 64       	ori	r18, 0x40	; 64
    6c36:	06 c0       	rjmp	.+12     	; 0x6c44 <vfprintf+0x100>
    6c38:	8c 36       	cpi	r24, 0x6C	; 108
    6c3a:	11 f4       	brne	.+4      	; 0x6c40 <vfprintf+0xfc>
    6c3c:	20 68       	ori	r18, 0x80	; 128
    6c3e:	02 c0       	rjmp	.+4      	; 0x6c44 <vfprintf+0x100>
    6c40:	88 36       	cpi	r24, 0x68	; 104
    6c42:	49 f4       	brne	.+18     	; 0x6c56 <vfprintf+0x112>
    6c44:	f1 01       	movw	r30, r2
    6c46:	93 fd       	sbrc	r25, 3
    6c48:	85 91       	lpm	r24, Z+
    6c4a:	93 ff       	sbrs	r25, 3
    6c4c:	81 91       	ld	r24, Z+
    6c4e:	1f 01       	movw	r2, r30
    6c50:	88 23       	and	r24, r24
    6c52:	09 f0       	breq	.+2      	; 0x6c56 <vfprintf+0x112>
    6c54:	ba cf       	rjmp	.-140    	; 0x6bca <vfprintf+0x86>
    6c56:	98 2f       	mov	r25, r24
    6c58:	95 54       	subi	r25, 0x45	; 69
    6c5a:	93 30       	cpi	r25, 0x03	; 3
    6c5c:	18 f0       	brcs	.+6      	; 0x6c64 <vfprintf+0x120>
    6c5e:	90 52       	subi	r25, 0x20	; 32
    6c60:	93 30       	cpi	r25, 0x03	; 3
    6c62:	28 f4       	brcc	.+10     	; 0x6c6e <vfprintf+0x12a>
    6c64:	0c 5f       	subi	r16, 0xFC	; 252
    6c66:	1f 4f       	sbci	r17, 0xFF	; 255
    6c68:	ff e3       	ldi	r31, 0x3F	; 63
    6c6a:	f9 83       	std	Y+1, r31	; 0x01
    6c6c:	0d c0       	rjmp	.+26     	; 0x6c88 <vfprintf+0x144>
    6c6e:	83 36       	cpi	r24, 0x63	; 99
    6c70:	31 f0       	breq	.+12     	; 0x6c7e <vfprintf+0x13a>
    6c72:	83 37       	cpi	r24, 0x73	; 115
    6c74:	71 f0       	breq	.+28     	; 0x6c92 <vfprintf+0x14e>
    6c76:	83 35       	cpi	r24, 0x53	; 83
    6c78:	09 f0       	breq	.+2      	; 0x6c7c <vfprintf+0x138>
    6c7a:	60 c0       	rjmp	.+192    	; 0x6d3c <vfprintf+0x1f8>
    6c7c:	22 c0       	rjmp	.+68     	; 0x6cc2 <vfprintf+0x17e>
    6c7e:	f8 01       	movw	r30, r16
    6c80:	80 81       	ld	r24, Z
    6c82:	89 83       	std	Y+1, r24	; 0x01
    6c84:	0e 5f       	subi	r16, 0xFE	; 254
    6c86:	1f 4f       	sbci	r17, 0xFF	; 255
    6c88:	42 01       	movw	r8, r4
    6c8a:	71 e0       	ldi	r23, 0x01	; 1
    6c8c:	a7 2e       	mov	r10, r23
    6c8e:	b1 2c       	mov	r11, r1
    6c90:	16 c0       	rjmp	.+44     	; 0x6cbe <vfprintf+0x17a>
    6c92:	62 e0       	ldi	r22, 0x02	; 2
    6c94:	66 2e       	mov	r6, r22
    6c96:	71 2c       	mov	r7, r1
    6c98:	60 0e       	add	r6, r16
    6c9a:	71 1e       	adc	r7, r17
    6c9c:	f8 01       	movw	r30, r16
    6c9e:	80 80       	ld	r8, Z
    6ca0:	91 80       	ldd	r9, Z+1	; 0x01
    6ca2:	26 ff       	sbrs	r18, 6
    6ca4:	03 c0       	rjmp	.+6      	; 0x6cac <vfprintf+0x168>
    6ca6:	6e 2d       	mov	r22, r14
    6ca8:	70 e0       	ldi	r23, 0x00	; 0
    6caa:	02 c0       	rjmp	.+4      	; 0x6cb0 <vfprintf+0x16c>
    6cac:	6f ef       	ldi	r22, 0xFF	; 255
    6cae:	7f ef       	ldi	r23, 0xFF	; 255
    6cb0:	c4 01       	movw	r24, r8
    6cb2:	2c 87       	std	Y+12, r18	; 0x0c
    6cb4:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <strnlen>
    6cb8:	5c 01       	movw	r10, r24
    6cba:	83 01       	movw	r16, r6
    6cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    6cbe:	2f 77       	andi	r18, 0x7F	; 127
    6cc0:	17 c0       	rjmp	.+46     	; 0x6cf0 <vfprintf+0x1ac>
    6cc2:	52 e0       	ldi	r21, 0x02	; 2
    6cc4:	65 2e       	mov	r6, r21
    6cc6:	71 2c       	mov	r7, r1
    6cc8:	60 0e       	add	r6, r16
    6cca:	71 1e       	adc	r7, r17
    6ccc:	f8 01       	movw	r30, r16
    6cce:	80 80       	ld	r8, Z
    6cd0:	91 80       	ldd	r9, Z+1	; 0x01
    6cd2:	26 ff       	sbrs	r18, 6
    6cd4:	03 c0       	rjmp	.+6      	; 0x6cdc <vfprintf+0x198>
    6cd6:	6e 2d       	mov	r22, r14
    6cd8:	70 e0       	ldi	r23, 0x00	; 0
    6cda:	02 c0       	rjmp	.+4      	; 0x6ce0 <vfprintf+0x19c>
    6cdc:	6f ef       	ldi	r22, 0xFF	; 255
    6cde:	7f ef       	ldi	r23, 0xFF	; 255
    6ce0:	c4 01       	movw	r24, r8
    6ce2:	2c 87       	std	Y+12, r18	; 0x0c
    6ce4:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <strnlen_P>
    6ce8:	5c 01       	movw	r10, r24
    6cea:	2c 85       	ldd	r18, Y+12	; 0x0c
    6cec:	20 68       	ori	r18, 0x80	; 128
    6cee:	83 01       	movw	r16, r6
    6cf0:	23 fd       	sbrc	r18, 3
    6cf2:	20 c0       	rjmp	.+64     	; 0x6d34 <vfprintf+0x1f0>
    6cf4:	08 c0       	rjmp	.+16     	; 0x6d06 <vfprintf+0x1c2>
    6cf6:	80 e2       	ldi	r24, 0x20	; 32
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	b6 01       	movw	r22, r12
    6cfc:	2c 87       	std	Y+12, r18	; 0x0c
    6cfe:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6d02:	fa 94       	dec	r15
    6d04:	2c 85       	ldd	r18, Y+12	; 0x0c
    6d06:	8f 2d       	mov	r24, r15
    6d08:	90 e0       	ldi	r25, 0x00	; 0
    6d0a:	a8 16       	cp	r10, r24
    6d0c:	b9 06       	cpc	r11, r25
    6d0e:	98 f3       	brcs	.-26     	; 0x6cf6 <vfprintf+0x1b2>
    6d10:	11 c0       	rjmp	.+34     	; 0x6d34 <vfprintf+0x1f0>
    6d12:	f4 01       	movw	r30, r8
    6d14:	27 fd       	sbrc	r18, 7
    6d16:	85 91       	lpm	r24, Z+
    6d18:	27 ff       	sbrs	r18, 7
    6d1a:	81 91       	ld	r24, Z+
    6d1c:	4f 01       	movw	r8, r30
    6d1e:	90 e0       	ldi	r25, 0x00	; 0
    6d20:	b6 01       	movw	r22, r12
    6d22:	2c 87       	std	Y+12, r18	; 0x0c
    6d24:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6d28:	2c 85       	ldd	r18, Y+12	; 0x0c
    6d2a:	f1 10       	cpse	r15, r1
    6d2c:	fa 94       	dec	r15
    6d2e:	08 94       	sec
    6d30:	a1 08       	sbc	r10, r1
    6d32:	b1 08       	sbc	r11, r1
    6d34:	a1 14       	cp	r10, r1
    6d36:	b1 04       	cpc	r11, r1
    6d38:	61 f7       	brne	.-40     	; 0x6d12 <vfprintf+0x1ce>
    6d3a:	f1 c0       	rjmp	.+482    	; 0x6f1e <vfprintf+0x3da>
    6d3c:	84 36       	cpi	r24, 0x64	; 100
    6d3e:	11 f0       	breq	.+4      	; 0x6d44 <vfprintf+0x200>
    6d40:	89 36       	cpi	r24, 0x69	; 105
    6d42:	49 f5       	brne	.+82     	; 0x6d96 <vfprintf+0x252>
    6d44:	27 ff       	sbrs	r18, 7
    6d46:	08 c0       	rjmp	.+16     	; 0x6d58 <vfprintf+0x214>
    6d48:	f8 01       	movw	r30, r16
    6d4a:	60 81       	ld	r22, Z
    6d4c:	71 81       	ldd	r23, Z+1	; 0x01
    6d4e:	82 81       	ldd	r24, Z+2	; 0x02
    6d50:	93 81       	ldd	r25, Z+3	; 0x03
    6d52:	0c 5f       	subi	r16, 0xFC	; 252
    6d54:	1f 4f       	sbci	r17, 0xFF	; 255
    6d56:	09 c0       	rjmp	.+18     	; 0x6d6a <vfprintf+0x226>
    6d58:	f8 01       	movw	r30, r16
    6d5a:	60 81       	ld	r22, Z
    6d5c:	71 81       	ldd	r23, Z+1	; 0x01
    6d5e:	88 27       	eor	r24, r24
    6d60:	77 fd       	sbrc	r23, 7
    6d62:	80 95       	com	r24
    6d64:	98 2f       	mov	r25, r24
    6d66:	0e 5f       	subi	r16, 0xFE	; 254
    6d68:	1f 4f       	sbci	r17, 0xFF	; 255
    6d6a:	4f e6       	ldi	r20, 0x6F	; 111
    6d6c:	b4 2e       	mov	r11, r20
    6d6e:	b2 22       	and	r11, r18
    6d70:	97 ff       	sbrs	r25, 7
    6d72:	09 c0       	rjmp	.+18     	; 0x6d86 <vfprintf+0x242>
    6d74:	90 95       	com	r25
    6d76:	80 95       	com	r24
    6d78:	70 95       	com	r23
    6d7a:	61 95       	neg	r22
    6d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    6d80:	9f 4f       	sbci	r25, 0xFF	; 255
    6d82:	f0 e8       	ldi	r31, 0x80	; 128
    6d84:	bf 2a       	or	r11, r31
    6d86:	a2 01       	movw	r20, r4
    6d88:	2a e0       	ldi	r18, 0x0A	; 10
    6d8a:	30 e0       	ldi	r19, 0x00	; 0
    6d8c:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__ultoa_invert>
    6d90:	78 2e       	mov	r7, r24
    6d92:	74 18       	sub	r7, r4
    6d94:	45 c0       	rjmp	.+138    	; 0x6e20 <vfprintf+0x2dc>
    6d96:	85 37       	cpi	r24, 0x75	; 117
    6d98:	31 f4       	brne	.+12     	; 0x6da6 <vfprintf+0x262>
    6d9a:	3f ee       	ldi	r19, 0xEF	; 239
    6d9c:	b3 2e       	mov	r11, r19
    6d9e:	b2 22       	and	r11, r18
    6da0:	2a e0       	ldi	r18, 0x0A	; 10
    6da2:	30 e0       	ldi	r19, 0x00	; 0
    6da4:	25 c0       	rjmp	.+74     	; 0x6df0 <vfprintf+0x2ac>
    6da6:	99 ef       	ldi	r25, 0xF9	; 249
    6da8:	b9 2e       	mov	r11, r25
    6daa:	b2 22       	and	r11, r18
    6dac:	8f 36       	cpi	r24, 0x6F	; 111
    6dae:	c1 f0       	breq	.+48     	; 0x6de0 <vfprintf+0x29c>
    6db0:	80 37       	cpi	r24, 0x70	; 112
    6db2:	20 f4       	brcc	.+8      	; 0x6dbc <vfprintf+0x278>
    6db4:	88 35       	cpi	r24, 0x58	; 88
    6db6:	09 f0       	breq	.+2      	; 0x6dba <vfprintf+0x276>
    6db8:	b5 c0       	rjmp	.+362    	; 0x6f24 <vfprintf+0x3e0>
    6dba:	0d c0       	rjmp	.+26     	; 0x6dd6 <vfprintf+0x292>
    6dbc:	80 37       	cpi	r24, 0x70	; 112
    6dbe:	21 f0       	breq	.+8      	; 0x6dc8 <vfprintf+0x284>
    6dc0:	88 37       	cpi	r24, 0x78	; 120
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <vfprintf+0x282>
    6dc4:	af c0       	rjmp	.+350    	; 0x6f24 <vfprintf+0x3e0>
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <vfprintf+0x288>
    6dc8:	20 e1       	ldi	r18, 0x10	; 16
    6dca:	b2 2a       	or	r11, r18
    6dcc:	b4 fe       	sbrs	r11, 4
    6dce:	0b c0       	rjmp	.+22     	; 0x6de6 <vfprintf+0x2a2>
    6dd0:	84 e0       	ldi	r24, 0x04	; 4
    6dd2:	b8 2a       	or	r11, r24
    6dd4:	08 c0       	rjmp	.+16     	; 0x6de6 <vfprintf+0x2a2>
    6dd6:	b4 fe       	sbrs	r11, 4
    6dd8:	09 c0       	rjmp	.+18     	; 0x6dec <vfprintf+0x2a8>
    6dda:	e6 e0       	ldi	r30, 0x06	; 6
    6ddc:	be 2a       	or	r11, r30
    6dde:	06 c0       	rjmp	.+12     	; 0x6dec <vfprintf+0x2a8>
    6de0:	28 e0       	ldi	r18, 0x08	; 8
    6de2:	30 e0       	ldi	r19, 0x00	; 0
    6de4:	05 c0       	rjmp	.+10     	; 0x6df0 <vfprintf+0x2ac>
    6de6:	20 e1       	ldi	r18, 0x10	; 16
    6de8:	30 e0       	ldi	r19, 0x00	; 0
    6dea:	02 c0       	rjmp	.+4      	; 0x6df0 <vfprintf+0x2ac>
    6dec:	20 e1       	ldi	r18, 0x10	; 16
    6dee:	32 e0       	ldi	r19, 0x02	; 2
    6df0:	b7 fe       	sbrs	r11, 7
    6df2:	08 c0       	rjmp	.+16     	; 0x6e04 <vfprintf+0x2c0>
    6df4:	f8 01       	movw	r30, r16
    6df6:	60 81       	ld	r22, Z
    6df8:	71 81       	ldd	r23, Z+1	; 0x01
    6dfa:	82 81       	ldd	r24, Z+2	; 0x02
    6dfc:	93 81       	ldd	r25, Z+3	; 0x03
    6dfe:	0c 5f       	subi	r16, 0xFC	; 252
    6e00:	1f 4f       	sbci	r17, 0xFF	; 255
    6e02:	07 c0       	rjmp	.+14     	; 0x6e12 <vfprintf+0x2ce>
    6e04:	f8 01       	movw	r30, r16
    6e06:	60 81       	ld	r22, Z
    6e08:	71 81       	ldd	r23, Z+1	; 0x01
    6e0a:	80 e0       	ldi	r24, 0x00	; 0
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	0e 5f       	subi	r16, 0xFE	; 254
    6e10:	1f 4f       	sbci	r17, 0xFF	; 255
    6e12:	a2 01       	movw	r20, r4
    6e14:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <__ultoa_invert>
    6e18:	78 2e       	mov	r7, r24
    6e1a:	74 18       	sub	r7, r4
    6e1c:	ff e7       	ldi	r31, 0x7F	; 127
    6e1e:	bf 22       	and	r11, r31
    6e20:	b6 fe       	sbrs	r11, 6
    6e22:	0b c0       	rjmp	.+22     	; 0x6e3a <vfprintf+0x2f6>
    6e24:	2e ef       	ldi	r18, 0xFE	; 254
    6e26:	b2 22       	and	r11, r18
    6e28:	7e 14       	cp	r7, r14
    6e2a:	38 f4       	brcc	.+14     	; 0x6e3a <vfprintf+0x2f6>
    6e2c:	b4 fe       	sbrs	r11, 4
    6e2e:	07 c0       	rjmp	.+14     	; 0x6e3e <vfprintf+0x2fa>
    6e30:	b2 fc       	sbrc	r11, 2
    6e32:	05 c0       	rjmp	.+10     	; 0x6e3e <vfprintf+0x2fa>
    6e34:	8f ee       	ldi	r24, 0xEF	; 239
    6e36:	b8 22       	and	r11, r24
    6e38:	02 c0       	rjmp	.+4      	; 0x6e3e <vfprintf+0x2fa>
    6e3a:	a7 2c       	mov	r10, r7
    6e3c:	01 c0       	rjmp	.+2      	; 0x6e40 <vfprintf+0x2fc>
    6e3e:	ae 2c       	mov	r10, r14
    6e40:	8b 2d       	mov	r24, r11
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	b4 fe       	sbrs	r11, 4
    6e46:	0d c0       	rjmp	.+26     	; 0x6e62 <vfprintf+0x31e>
    6e48:	fe 01       	movw	r30, r28
    6e4a:	e7 0d       	add	r30, r7
    6e4c:	f1 1d       	adc	r31, r1
    6e4e:	20 81       	ld	r18, Z
    6e50:	20 33       	cpi	r18, 0x30	; 48
    6e52:	19 f4       	brne	.+6      	; 0x6e5a <vfprintf+0x316>
    6e54:	e9 ee       	ldi	r30, 0xE9	; 233
    6e56:	be 22       	and	r11, r30
    6e58:	09 c0       	rjmp	.+18     	; 0x6e6c <vfprintf+0x328>
    6e5a:	a3 94       	inc	r10
    6e5c:	b2 fe       	sbrs	r11, 2
    6e5e:	06 c0       	rjmp	.+12     	; 0x6e6c <vfprintf+0x328>
    6e60:	04 c0       	rjmp	.+8      	; 0x6e6a <vfprintf+0x326>
    6e62:	86 78       	andi	r24, 0x86	; 134
    6e64:	90 70       	andi	r25, 0x00	; 0
    6e66:	00 97       	sbiw	r24, 0x00	; 0
    6e68:	09 f0       	breq	.+2      	; 0x6e6c <vfprintf+0x328>
    6e6a:	a3 94       	inc	r10
    6e6c:	8b 2c       	mov	r8, r11
    6e6e:	99 24       	eor	r9, r9
    6e70:	b3 fc       	sbrc	r11, 3
    6e72:	14 c0       	rjmp	.+40     	; 0x6e9c <vfprintf+0x358>
    6e74:	b0 fe       	sbrs	r11, 0
    6e76:	0f c0       	rjmp	.+30     	; 0x6e96 <vfprintf+0x352>
    6e78:	af 14       	cp	r10, r15
    6e7a:	28 f4       	brcc	.+10     	; 0x6e86 <vfprintf+0x342>
    6e7c:	e7 2c       	mov	r14, r7
    6e7e:	ef 0c       	add	r14, r15
    6e80:	ea 18       	sub	r14, r10
    6e82:	af 2c       	mov	r10, r15
    6e84:	08 c0       	rjmp	.+16     	; 0x6e96 <vfprintf+0x352>
    6e86:	e7 2c       	mov	r14, r7
    6e88:	06 c0       	rjmp	.+12     	; 0x6e96 <vfprintf+0x352>
    6e8a:	80 e2       	ldi	r24, 0x20	; 32
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	b6 01       	movw	r22, r12
    6e90:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6e94:	a3 94       	inc	r10
    6e96:	af 14       	cp	r10, r15
    6e98:	c0 f3       	brcs	.-16     	; 0x6e8a <vfprintf+0x346>
    6e9a:	04 c0       	rjmp	.+8      	; 0x6ea4 <vfprintf+0x360>
    6e9c:	af 14       	cp	r10, r15
    6e9e:	10 f4       	brcc	.+4      	; 0x6ea4 <vfprintf+0x360>
    6ea0:	fa 18       	sub	r15, r10
    6ea2:	01 c0       	rjmp	.+2      	; 0x6ea6 <vfprintf+0x362>
    6ea4:	ff 24       	eor	r15, r15
    6ea6:	84 fe       	sbrs	r8, 4
    6ea8:	0f c0       	rjmp	.+30     	; 0x6ec8 <vfprintf+0x384>
    6eaa:	80 e3       	ldi	r24, 0x30	; 48
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	b6 01       	movw	r22, r12
    6eb0:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6eb4:	82 fe       	sbrs	r8, 2
    6eb6:	1f c0       	rjmp	.+62     	; 0x6ef6 <vfprintf+0x3b2>
    6eb8:	81 fe       	sbrs	r8, 1
    6eba:	03 c0       	rjmp	.+6      	; 0x6ec2 <vfprintf+0x37e>
    6ebc:	88 e5       	ldi	r24, 0x58	; 88
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	10 c0       	rjmp	.+32     	; 0x6ee2 <vfprintf+0x39e>
    6ec2:	88 e7       	ldi	r24, 0x78	; 120
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	0d c0       	rjmp	.+26     	; 0x6ee2 <vfprintf+0x39e>
    6ec8:	c4 01       	movw	r24, r8
    6eca:	86 78       	andi	r24, 0x86	; 134
    6ecc:	90 70       	andi	r25, 0x00	; 0
    6ece:	00 97       	sbiw	r24, 0x00	; 0
    6ed0:	91 f0       	breq	.+36     	; 0x6ef6 <vfprintf+0x3b2>
    6ed2:	81 fc       	sbrc	r8, 1
    6ed4:	02 c0       	rjmp	.+4      	; 0x6eda <vfprintf+0x396>
    6ed6:	80 e2       	ldi	r24, 0x20	; 32
    6ed8:	01 c0       	rjmp	.+2      	; 0x6edc <vfprintf+0x398>
    6eda:	8b e2       	ldi	r24, 0x2B	; 43
    6edc:	b7 fc       	sbrc	r11, 7
    6ede:	8d e2       	ldi	r24, 0x2D	; 45
    6ee0:	90 e0       	ldi	r25, 0x00	; 0
    6ee2:	b6 01       	movw	r22, r12
    6ee4:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6ee8:	06 c0       	rjmp	.+12     	; 0x6ef6 <vfprintf+0x3b2>
    6eea:	80 e3       	ldi	r24, 0x30	; 48
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	b6 01       	movw	r22, r12
    6ef0:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6ef4:	ea 94       	dec	r14
    6ef6:	7e 14       	cp	r7, r14
    6ef8:	c0 f3       	brcs	.-16     	; 0x6eea <vfprintf+0x3a6>
    6efa:	7a 94       	dec	r7
    6efc:	f2 01       	movw	r30, r4
    6efe:	e7 0d       	add	r30, r7
    6f00:	f1 1d       	adc	r31, r1
    6f02:	80 81       	ld	r24, Z
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	b6 01       	movw	r22, r12
    6f08:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6f0c:	77 20       	and	r7, r7
    6f0e:	a9 f7       	brne	.-22     	; 0x6efa <vfprintf+0x3b6>
    6f10:	06 c0       	rjmp	.+12     	; 0x6f1e <vfprintf+0x3da>
    6f12:	80 e2       	ldi	r24, 0x20	; 32
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	b6 01       	movw	r22, r12
    6f18:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <fputc>
    6f1c:	fa 94       	dec	r15
    6f1e:	ff 20       	and	r15, r15
    6f20:	c1 f7       	brne	.-16     	; 0x6f12 <vfprintf+0x3ce>
    6f22:	37 ce       	rjmp	.-914    	; 0x6b92 <vfprintf+0x4e>
    6f24:	f6 01       	movw	r30, r12
    6f26:	26 81       	ldd	r18, Z+6	; 0x06
    6f28:	37 81       	ldd	r19, Z+7	; 0x07
    6f2a:	02 c0       	rjmp	.+4      	; 0x6f30 <vfprintf+0x3ec>
    6f2c:	2f ef       	ldi	r18, 0xFF	; 255
    6f2e:	3f ef       	ldi	r19, 0xFF	; 255
    6f30:	c9 01       	movw	r24, r18
    6f32:	2c 96       	adiw	r28, 0x0c	; 12
    6f34:	0f b6       	in	r0, 0x3f	; 63
    6f36:	f8 94       	cli
    6f38:	de bf       	out	0x3e, r29	; 62
    6f3a:	0f be       	out	0x3f, r0	; 63
    6f3c:	cd bf       	out	0x3d, r28	; 61
    6f3e:	cf 91       	pop	r28
    6f40:	df 91       	pop	r29
    6f42:	1f 91       	pop	r17
    6f44:	0f 91       	pop	r16
    6f46:	ff 90       	pop	r15
    6f48:	ef 90       	pop	r14
    6f4a:	df 90       	pop	r13
    6f4c:	cf 90       	pop	r12
    6f4e:	bf 90       	pop	r11
    6f50:	af 90       	pop	r10
    6f52:	9f 90       	pop	r9
    6f54:	8f 90       	pop	r8
    6f56:	7f 90       	pop	r7
    6f58:	6f 90       	pop	r6
    6f5a:	5f 90       	pop	r5
    6f5c:	4f 90       	pop	r4
    6f5e:	3f 90       	pop	r3
    6f60:	2f 90       	pop	r2
    6f62:	08 95       	ret

00006f64 <strnlen_P>:
    6f64:	fc 01       	movw	r30, r24
    6f66:	05 90       	lpm	r0, Z+
    6f68:	61 50       	subi	r22, 0x01	; 1
    6f6a:	70 40       	sbci	r23, 0x00	; 0
    6f6c:	01 10       	cpse	r0, r1
    6f6e:	d8 f7       	brcc	.-10     	; 0x6f66 <strnlen_P+0x2>
    6f70:	80 95       	com	r24
    6f72:	90 95       	com	r25
    6f74:	8e 0f       	add	r24, r30
    6f76:	9f 1f       	adc	r25, r31
    6f78:	08 95       	ret

00006f7a <strnlen>:
    6f7a:	fc 01       	movw	r30, r24
    6f7c:	61 50       	subi	r22, 0x01	; 1
    6f7e:	70 40       	sbci	r23, 0x00	; 0
    6f80:	01 90       	ld	r0, Z+
    6f82:	01 10       	cpse	r0, r1
    6f84:	d8 f7       	brcc	.-10     	; 0x6f7c <strnlen+0x2>
    6f86:	80 95       	com	r24
    6f88:	90 95       	com	r25
    6f8a:	8e 0f       	add	r24, r30
    6f8c:	9f 1f       	adc	r25, r31
    6f8e:	08 95       	ret

00006f90 <fputc>:
    6f90:	0f 93       	push	r16
    6f92:	1f 93       	push	r17
    6f94:	cf 93       	push	r28
    6f96:	df 93       	push	r29
    6f98:	8c 01       	movw	r16, r24
    6f9a:	eb 01       	movw	r28, r22
    6f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f9e:	81 ff       	sbrs	r24, 1
    6fa0:	1b c0       	rjmp	.+54     	; 0x6fd8 <fputc+0x48>
    6fa2:	82 ff       	sbrs	r24, 2
    6fa4:	0d c0       	rjmp	.+26     	; 0x6fc0 <fputc+0x30>
    6fa6:	2e 81       	ldd	r18, Y+6	; 0x06
    6fa8:	3f 81       	ldd	r19, Y+7	; 0x07
    6faa:	8c 81       	ldd	r24, Y+4	; 0x04
    6fac:	9d 81       	ldd	r25, Y+5	; 0x05
    6fae:	28 17       	cp	r18, r24
    6fb0:	39 07       	cpc	r19, r25
    6fb2:	64 f4       	brge	.+24     	; 0x6fcc <fputc+0x3c>
    6fb4:	e8 81       	ld	r30, Y
    6fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    6fb8:	01 93       	st	Z+, r16
    6fba:	f9 83       	std	Y+1, r31	; 0x01
    6fbc:	e8 83       	st	Y, r30
    6fbe:	06 c0       	rjmp	.+12     	; 0x6fcc <fputc+0x3c>
    6fc0:	e8 85       	ldd	r30, Y+8	; 0x08
    6fc2:	f9 85       	ldd	r31, Y+9	; 0x09
    6fc4:	80 2f       	mov	r24, r16
    6fc6:	09 95       	icall
    6fc8:	00 97       	sbiw	r24, 0x00	; 0
    6fca:	31 f4       	brne	.+12     	; 0x6fd8 <fputc+0x48>
    6fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    6fce:	9f 81       	ldd	r25, Y+7	; 0x07
    6fd0:	01 96       	adiw	r24, 0x01	; 1
    6fd2:	9f 83       	std	Y+7, r25	; 0x07
    6fd4:	8e 83       	std	Y+6, r24	; 0x06
    6fd6:	02 c0       	rjmp	.+4      	; 0x6fdc <fputc+0x4c>
    6fd8:	0f ef       	ldi	r16, 0xFF	; 255
    6fda:	1f ef       	ldi	r17, 0xFF	; 255
    6fdc:	c8 01       	movw	r24, r16
    6fde:	df 91       	pop	r29
    6fe0:	cf 91       	pop	r28
    6fe2:	1f 91       	pop	r17
    6fe4:	0f 91       	pop	r16
    6fe6:	08 95       	ret

00006fe8 <__ultoa_invert>:
    6fe8:	fa 01       	movw	r30, r20
    6fea:	aa 27       	eor	r26, r26
    6fec:	28 30       	cpi	r18, 0x08	; 8
    6fee:	51 f1       	breq	.+84     	; 0x7044 <__ultoa_invert+0x5c>
    6ff0:	20 31       	cpi	r18, 0x10	; 16
    6ff2:	81 f1       	breq	.+96     	; 0x7054 <__ultoa_invert+0x6c>
    6ff4:	e8 94       	clt
    6ff6:	6f 93       	push	r22
    6ff8:	6e 7f       	andi	r22, 0xFE	; 254
    6ffa:	6e 5f       	subi	r22, 0xFE	; 254
    6ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    7000:	9f 4f       	sbci	r25, 0xFF	; 255
    7002:	af 4f       	sbci	r26, 0xFF	; 255
    7004:	b1 e0       	ldi	r27, 0x01	; 1
    7006:	3e d0       	rcall	.+124    	; 0x7084 <__ultoa_invert+0x9c>
    7008:	b4 e0       	ldi	r27, 0x04	; 4
    700a:	3c d0       	rcall	.+120    	; 0x7084 <__ultoa_invert+0x9c>
    700c:	67 0f       	add	r22, r23
    700e:	78 1f       	adc	r23, r24
    7010:	89 1f       	adc	r24, r25
    7012:	9a 1f       	adc	r25, r26
    7014:	a1 1d       	adc	r26, r1
    7016:	68 0f       	add	r22, r24
    7018:	79 1f       	adc	r23, r25
    701a:	8a 1f       	adc	r24, r26
    701c:	91 1d       	adc	r25, r1
    701e:	a1 1d       	adc	r26, r1
    7020:	6a 0f       	add	r22, r26
    7022:	71 1d       	adc	r23, r1
    7024:	81 1d       	adc	r24, r1
    7026:	91 1d       	adc	r25, r1
    7028:	a1 1d       	adc	r26, r1
    702a:	20 d0       	rcall	.+64     	; 0x706c <__ultoa_invert+0x84>
    702c:	09 f4       	brne	.+2      	; 0x7030 <__ultoa_invert+0x48>
    702e:	68 94       	set
    7030:	3f 91       	pop	r19
    7032:	2a e0       	ldi	r18, 0x0A	; 10
    7034:	26 9f       	mul	r18, r22
    7036:	11 24       	eor	r1, r1
    7038:	30 19       	sub	r19, r0
    703a:	30 5d       	subi	r19, 0xD0	; 208
    703c:	31 93       	st	Z+, r19
    703e:	de f6       	brtc	.-74     	; 0x6ff6 <__ultoa_invert+0xe>
    7040:	cf 01       	movw	r24, r30
    7042:	08 95       	ret
    7044:	46 2f       	mov	r20, r22
    7046:	47 70       	andi	r20, 0x07	; 7
    7048:	40 5d       	subi	r20, 0xD0	; 208
    704a:	41 93       	st	Z+, r20
    704c:	b3 e0       	ldi	r27, 0x03	; 3
    704e:	0f d0       	rcall	.+30     	; 0x706e <__ultoa_invert+0x86>
    7050:	c9 f7       	brne	.-14     	; 0x7044 <__ultoa_invert+0x5c>
    7052:	f6 cf       	rjmp	.-20     	; 0x7040 <__ultoa_invert+0x58>
    7054:	46 2f       	mov	r20, r22
    7056:	4f 70       	andi	r20, 0x0F	; 15
    7058:	40 5d       	subi	r20, 0xD0	; 208
    705a:	4a 33       	cpi	r20, 0x3A	; 58
    705c:	18 f0       	brcs	.+6      	; 0x7064 <__ultoa_invert+0x7c>
    705e:	49 5d       	subi	r20, 0xD9	; 217
    7060:	31 fd       	sbrc	r19, 1
    7062:	40 52       	subi	r20, 0x20	; 32
    7064:	41 93       	st	Z+, r20
    7066:	02 d0       	rcall	.+4      	; 0x706c <__ultoa_invert+0x84>
    7068:	a9 f7       	brne	.-22     	; 0x7054 <__ultoa_invert+0x6c>
    706a:	ea cf       	rjmp	.-44     	; 0x7040 <__ultoa_invert+0x58>
    706c:	b4 e0       	ldi	r27, 0x04	; 4
    706e:	a6 95       	lsr	r26
    7070:	97 95       	ror	r25
    7072:	87 95       	ror	r24
    7074:	77 95       	ror	r23
    7076:	67 95       	ror	r22
    7078:	ba 95       	dec	r27
    707a:	c9 f7       	brne	.-14     	; 0x706e <__ultoa_invert+0x86>
    707c:	00 97       	sbiw	r24, 0x00	; 0
    707e:	61 05       	cpc	r22, r1
    7080:	71 05       	cpc	r23, r1
    7082:	08 95       	ret
    7084:	9b 01       	movw	r18, r22
    7086:	ac 01       	movw	r20, r24
    7088:	0a 2e       	mov	r0, r26
    708a:	06 94       	lsr	r0
    708c:	57 95       	ror	r21
    708e:	47 95       	ror	r20
    7090:	37 95       	ror	r19
    7092:	27 95       	ror	r18
    7094:	ba 95       	dec	r27
    7096:	c9 f7       	brne	.-14     	; 0x708a <__ultoa_invert+0xa2>
    7098:	62 0f       	add	r22, r18
    709a:	73 1f       	adc	r23, r19
    709c:	84 1f       	adc	r24, r20
    709e:	95 1f       	adc	r25, r21
    70a0:	a0 1d       	adc	r26, r0
    70a2:	08 95       	ret

000070a4 <__fp_norm2>:
    70a4:	91 50       	subi	r25, 0x01	; 1
    70a6:	50 40       	sbci	r21, 0x00	; 0
    70a8:	66 0f       	add	r22, r22
    70aa:	77 1f       	adc	r23, r23
    70ac:	88 1f       	adc	r24, r24
    70ae:	d2 f7       	brpl	.-12     	; 0x70a4 <__fp_norm2>
    70b0:	08 95       	ret

000070b2 <__fp_powsodd>:
    70b2:	9f 93       	push	r25
    70b4:	8f 93       	push	r24
    70b6:	7f 93       	push	r23
    70b8:	6f 93       	push	r22
    70ba:	ff 93       	push	r31
    70bc:	ef 93       	push	r30
    70be:	9b 01       	movw	r18, r22
    70c0:	ac 01       	movw	r20, r24
    70c2:	92 dc       	rcall	.-1756   	; 0x69e8 <__mulsf3>
    70c4:	ef 91       	pop	r30
    70c6:	ff 91       	pop	r31
    70c8:	30 db       	rcall	.-2464   	; 0x672a <__fp_powser>
    70ca:	2f 91       	pop	r18
    70cc:	3f 91       	pop	r19
    70ce:	4f 91       	pop	r20
    70d0:	5f 91       	pop	r21
    70d2:	8a cc       	rjmp	.-1772   	; 0x69e8 <__mulsf3>

000070d4 <__udivmodqi4>:
    70d4:	99 1b       	sub	r25, r25
    70d6:	79 e0       	ldi	r23, 0x09	; 9
    70d8:	04 c0       	rjmp	.+8      	; 0x70e2 <__udivmodqi4_ep>

000070da <__udivmodqi4_loop>:
    70da:	99 1f       	adc	r25, r25
    70dc:	96 17       	cp	r25, r22
    70de:	08 f0       	brcs	.+2      	; 0x70e2 <__udivmodqi4_ep>
    70e0:	96 1b       	sub	r25, r22

000070e2 <__udivmodqi4_ep>:
    70e2:	88 1f       	adc	r24, r24
    70e4:	7a 95       	dec	r23
    70e6:	c9 f7       	brne	.-14     	; 0x70da <__udivmodqi4_loop>
    70e8:	80 95       	com	r24
    70ea:	08 95       	ret

000070ec <__divmodhi4>:
    70ec:	97 fb       	bst	r25, 7
    70ee:	09 2e       	mov	r0, r25
    70f0:	07 26       	eor	r0, r23
    70f2:	0a d0       	rcall	.+20     	; 0x7108 <__divmodhi4_neg1>
    70f4:	77 fd       	sbrc	r23, 7
    70f6:	04 d0       	rcall	.+8      	; 0x7100 <__divmodhi4_neg2>
    70f8:	0c d0       	rcall	.+24     	; 0x7112 <__udivmodhi4>
    70fa:	06 d0       	rcall	.+12     	; 0x7108 <__divmodhi4_neg1>
    70fc:	00 20       	and	r0, r0
    70fe:	1a f4       	brpl	.+6      	; 0x7106 <__divmodhi4_exit>

00007100 <__divmodhi4_neg2>:
    7100:	70 95       	com	r23
    7102:	61 95       	neg	r22
    7104:	7f 4f       	sbci	r23, 0xFF	; 255

00007106 <__divmodhi4_exit>:
    7106:	08 95       	ret

00007108 <__divmodhi4_neg1>:
    7108:	f6 f7       	brtc	.-4      	; 0x7106 <__divmodhi4_exit>
    710a:	90 95       	com	r25
    710c:	81 95       	neg	r24
    710e:	9f 4f       	sbci	r25, 0xFF	; 255
    7110:	08 95       	ret

00007112 <__udivmodhi4>:
    7112:	aa 1b       	sub	r26, r26
    7114:	bb 1b       	sub	r27, r27
    7116:	51 e1       	ldi	r21, 0x11	; 17
    7118:	07 c0       	rjmp	.+14     	; 0x7128 <__udivmodhi4_ep>

0000711a <__udivmodhi4_loop>:
    711a:	aa 1f       	adc	r26, r26
    711c:	bb 1f       	adc	r27, r27
    711e:	a6 17       	cp	r26, r22
    7120:	b7 07       	cpc	r27, r23
    7122:	10 f0       	brcs	.+4      	; 0x7128 <__udivmodhi4_ep>
    7124:	a6 1b       	sub	r26, r22
    7126:	b7 0b       	sbc	r27, r23

00007128 <__udivmodhi4_ep>:
    7128:	88 1f       	adc	r24, r24
    712a:	99 1f       	adc	r25, r25
    712c:	5a 95       	dec	r21
    712e:	a9 f7       	brne	.-22     	; 0x711a <__udivmodhi4_loop>
    7130:	80 95       	com	r24
    7132:	90 95       	com	r25
    7134:	bc 01       	movw	r22, r24
    7136:	cd 01       	movw	r24, r26
    7138:	08 95       	ret

0000713a <_exit>:
    713a:	f8 94       	cli

0000713c <__stop_program>:
    713c:	ff cf       	rjmp	.-2      	; 0x713c <__stop_program>
