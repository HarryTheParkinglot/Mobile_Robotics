#include "Interface.h"

#define cw wa = 0;
#define ar acf =cacf= 0;
#define set pos[0] = pos[1] = pos[2] = 0; gyro = rearGyro = 0;
#define V3 while(!Cmd(0,19));
#define SV1 while(!Cmd(0,18));
#define reset bar_1 = bar_2 = bar_3 = bar_4 = bar_5 = 0;
#define wait if(key) {SS(); while(SW2); while(!SW2);}
#define lcs lcd_clear_screen();
int key= 0, key_puck = 0;

int R=0, B=0, t=0;
int p[4], p3[4], p4[4];
int T1[3];
int i=0;

#define  ab86(x) 		  AB(0,0,6,193,8,129,x,30);
#define  ab13(x) 		  AB(0,0,1,177,3,177,x,0);
#define  ab45(x) wa = 90; AB(0,0,4,221,5,180,x,30); cw
#define ab413(x)		  AB(4,230,1,177,3,177,x,30);
#define ab645(x) wa = 90; AB(6,159,4,211,5,177,x,30); cw
#define ab345(x) wa = 90; AB(3,121,4,222,5,191,x,30); cw

int main(void)
{ 

    Interface_init();

	write_gyro(0x1E, 1); 
	write_gyro(0x1E, 5); 
	write_gyro(0x1E, 20);

	write_gyro(0x1E, 16); 

	Camera_init();
	Setting(11);
	TM(50);
	V3

	_delay_ms(500);

	set

	LED_ON(3);
	_delay_ms(100);
	LED_OFF(3);

	while(1)
	{		
	    if(SW1)
		{
			key--;
			LED_ON(3);
			_delay_ms(100);
			LED_OFF(3);

		}
	    if(SW3)
		{
			key++;
			LED_ON(3);
			_delay_ms(100);
			LED_OFF(3);

		}
		
		
	    if(SW2)
		{
			lcd_clear_screen();
			LED_ON(3);
			_delay_ms(100);
			LED_OFF(3);

			switch(key)
			{
case 0:
case 1:

ar ab45(30);

CPsd(12,1,5,3,12,0,40,50);
CPsd(10,1,5,5,12,0,40,0);
CPsd(8,1,1000,3,12,30,40,0);
Drift(0,39,-91,30,-40);

CPsd(12,1,5,3,11,0,40,50);
CPsd(10,1,5,5,11,0,40,0);
CPsd(1,1,1000,3,11,30,40,0);
Axis(0,20,0,40,0);
Axis(-16,35,0,30,-40);

ar TB(T(103,2),0,140,115);

/*
At(70,70); //P3구역 스캔 
SS(); SV1 V1(); V3
for(i=0; i<9; i++){
   if(!pro[i][1]) continue;
   if((abs(pro[i][1]-165)<20) && (abs(pro[i][2]-87)<20)) p3[3] = pro[i][0];
   if((abs(pro[i][1]-67)<20) && (abs(pro[i][2]-103)<20)) p3[2] = pro[i][0];
   if((abs(pro[i][1]-86)<20) && (abs(pro[i][2]-161)<20)) p3[1] = pro[i][0];
}
At(-70,70); 
*/
//P구역 스캔
ar TB(T(103,2),0,140,115); _delay_ms(100);
SS(); SV1 V1(); V3
for(i=0; i<9; i++){
   if(!pro[i][1]) continue;
   if((abs(pro[i][1]-95)<20) && (abs(pro[i][2]-103)<20)) p[1] = pro[i][0]; //1
   if((abs(pro[i][1]-140)<20) && (abs(pro[i][2]-115)<20)) p[2] = pro[i][0]; //2
   if((abs(pro[i][1]-182)<20) &&  (abs(pro[i][2]-99)<20)) p[3] = pro[i][0]; //3
}
if(p[1]==1) B++; else R++;
if(p[2]==1) B++; else R++;
if(p[3]==1) B++; else R++;
if(R<B) t=1; 	 else t=2;

lcs lcd(0,0,"T: %d",t);
lcd(1,0,"P: %d %d %d",p[1],p[2],p[3]);
lcd(2,0,"P3: %d %d %d",p3[1],p3[2],p3[3]);

if(p[1]==t){  //P구역 퍽 처리
   At(9,60);
   Axis(0,20,0,30,140);
   Axis(0,-20,0,30,140);
   At(-9,60);
}if(p[2]==t){
   Axis(0,15,0,30,140);
   Axis(0,-15,0,30,140);
}if(p[3]==t){
   At(-9,60);
   Axis(0,20,0,30,140);
   Axis(0,-20,0,30,140);
   At(9,60);
}
Ot(-23,90,70,40,50); wa=-20;
CPsd(12,6,-5,3,18,0,40,0);
CPsd(10,6,-5,5,18,0,40,0);
CPsd(6,6,-1000,3,18,20,40,0);
MovePsd(0,5,0,-40,0,10,40,0);
Axis(0,-4,0,30,-40);

/*
Drift(-5,0,-35,10,120);

SS(); SV1 V1(); V3 //P4구역 스캔
for(i=0; i<9; i++){
   if(!pro[i][1]) continue;
   if((abs(pro[i][1]-204)<20) && (abs(pro[i][2]-91)<20)) p4[1] = pro[i][0];
   if((abs(pro[i][1]-149)<20) && (abs(pro[i][2]-137)<20)) p4[2] = pro[i][0];
   if((abs(pro[i][1]-58)<20) && (abs(pro[i][2]-103)<20)) p4[3] = pro[i][0];
}
lcd(3,0,"P4: %d %d %d",p4[1],p4[2],p4[3]); _delay_ms(200);

Drift(5,5,50,10,120); */

At(105,100); cw;
CPsd(12,1,10,3,13,0,20,30); 
CPsd(10,1,5,5,13,0,20,-30);

SS(); SV1 V1(); V3 //5구역 스캔
for(i=0; i<9; i++){
   if(!pro[i][1]) continue;
   if((abs(pro[i][1]-95)<20) && (abs(pro[i][2]-132)<20)) p[1] = pro[i][0];
   if((abs(pro[i][1]-168)<20) && (abs(pro[i][2]-134)<20)) p[2] = pro[i][0];
   if((abs(pro[i][1]-232)<20) && (abs(pro[i][2]-130)<20)) p[3] = pro[i][0];
}
if(p[1]==t){
   At(9,30);
   Axis(0,10,0,30,140);
   Axis(0,-10,0,30,140);
   At(-9,30);
}if(p[2]==t){
   At(-5,30);	
   Axis(0,10,0,30,140);
   Axis(0,-10,0,30,140);
   At(5,30);
}if(p[3]==t){
   At(-18,50);
   Axis(0,12,0,30,140);
   Axis(0,-12,0,30,140);
   At(18,50);
}
Drift(30,-15,90,30,140);
Drift(0,31,91,30,140);
CPsd(12,8,50,3,13,0,40,50);		reset
CPsd(10,8,30,5,13,0,40,-50);	T1[1] = bar_5;	lcd(3,14,"T1: %d",T1[1]);

At(20,40); wa=20;
CPsd(12,5,-40,3,11,0,30,40);

CPsd(10,5,-60,5,11,0,30,-40);
Drift(0,20,70,30,140); cw;

Axis(0,2,0,10,120);
ar ab45(30);

CPsd(12,8,2,3,14,0,40,50);
CPsd(10,8,2,5,14,0,40,0);
CPsd(8,8,100,3,14,30,40,0);
Axis(0,60,0,40,0);
CPsd(12,8,2,3,14,0,40,0);
CPsd(10,8,2,5,14,0,40,0);
CPsd(8,8,100,3,14,30,40,0);
Drift(1,39,-90,30,-40);
ar ab13(30);

/*
if(p4[1]==p4[2]){
	CPsd(10,5,-25,5,11,0,30,-40); //1
	Drift(0,30,70,30,140); wa=-90;
	CPsd(12,3,6,3,15,0,20,30);
	CPsd(10,3,6,5,15,0,20,-30); cw;
	At(-70,80); wa=20; //2
	CPsd(12,5,-15,3,11,0,30,40);
	CPsd(10,5,-10,5,11,0,30,0);
	Drift(0,-20,-20,30,-40); wa=-90;
	Axis(0,30,0,20,-30); cw;

	Ad(27,5,90,30,140,30);
}
else if(p4[1]==p4[3]){
	CPsd(10,5,-25,5,11,0,30,-40); //1
	Drift(0,30,70,30,140); wa=90;
	CPsd(12,3,-7,3,15,0,20,30);
	CPsd(10,3,-7,5,15,0,20,-30); cw;

	At(-70,80); wa=20; //3
	CPsd(12,5,-30,3,11,0,30,40);
	CPsd(10,5,-30,5,11,0,30,-40);
	Drift(0,20,70,30,140); cw;
	CPsd(12,8,1,3,16,0,30,40);
	CPsd(10,8,1,5,16,0,30,0);
	CPsd(8,8,100,3,16,30,30,0);
	Ad(0,30,-90,30,-40,50);	wa=-90;
	Axis(0,-20,0,20,-30); cw;
	Drift(30,0,90,30,140);
}
else if(p4[2]==p4[3]){
	CPsd(10,5,-60,5,11,0,30,-40); //2
	Drift(0,20,70,30,140); cw; wa=90;
	Axis(0,25,0,20,140); 
	CPsd(12,3,-20,3,15,0,20,30); 
	CPsd(10,3,-15,5,15,0,20,-30); cw;

	CPsd(12,8,1,3,16,0,30,40); //3
	CPsd(10,8,1,5,16,0,30,0);
	CPsd(8,8,100,3,16,30,30,0);
	Ad(0,30,-90,30,-40,50);	wa=-90;
	Axis(0,-20,0,20,-30); cw;

	Drift(30,0,90,30,140);
}
ar ab45(30);

CPsd(12,8,2,3,14,0,40,50);
CPsd(10,8,2,5,14,0,40,0);
CPsd(8,8,100,3,14,30,40,0);

if(p3[1]==p3[2]){
	Drift(-2,30,90,30,-40);
	Drift(40,1,70,30,40); wa=-20;
	CPsd(12,4,-7,3,14,0,40,0);
	CPsd(10,4,-7,5,14,0,40,0);
	Drift(0,-40,20,40,-50); cw;
	ar ab45(30);

	Axis(-32,0,0,30,140); //2
	Axis(32,0,0,30,140);

	CPsd(12,1,2,3,11,0,30,40); //1
	CPsd(10,1,2,5,11,0,30,0);
	CPsd(1,1,100,3,11,20,30,0);
	Ad(0,20,90,30,-40,80);
	Axis(-13,0,0,30,140);
	Ad(30,0,90,30,140,30);

	CPsd(12,8,2,3,14,0,40,40);
	CPsd(10,8,2,5,14,0,40,0);
	CPsd(8,8,100,3,14,30,40,0);
	Drift(1,40,-90,30,-40);
	ar ab13(30);
}
else{
	Axis(0,60,0,40,0);
	CPsd(12,8,2,3,15,0,40,0);
	CPsd(10,8,2,5,15,0,40,0);
	CPsd(8,8,100,3,15,30,40,0);
	Drift(1,40,-90,30,-40);
	ar ab13(30);

	if(p3[1]==p3[3]){
		CPsd(12,1,2,3,13,0,30,40);
		CPsd(10,1,2,5,13,0,30,0);
		CPsd(8,1,100,3,13,20,30,0); 
		Ad(-1,20,-90,30,-40,80);	wa=-90;
		Axis(0,-11,0,30,140); cw;
		Ad(-30,0,-90,30,140,40);

		CPsd(12,8,2,3,15,0,30,40);
		CPsd(10,8,2,5,15,0,30,0);
		CPsd(1,8,100,3,15,30,30,0); 
		Drift(0,38,90,30,-40);

		CPsd(12,1,2,3,10,0,30,40);
		CPsd(10,1,2,5,10,0,30,0);
		CPsd(1,1,100,3,10,30,30,0); 
		Ad(1,20,90,30,-40,40);
		Axis(-15,0,0,30,140);

		Ad(30,0,90,30,140,30);

		CPsd(12,8,2,3,14,0,40,40);
		CPsd(10,8,2,5,14,0,40,0);
		CPsd(8,8,100,3,14,30,40,0);
		Drift(1,38,-90,30,-40);
		ar ab13(30);
	}
	if(p3[2]==p3[3]){
		wa=-90;
		Axis(0,-30,0,30,140);
		Axis(0,30,0,30,140); cw;
	
		CPsd(12,1,2,3,13,0,30,40);
		CPsd(10,1,2,5,13,0,30,0);
		CPsd(8,1,100,3,13,20,30,0); 
		Ad(-1,20,-90,30,-40,80);	wa=-90;
		Axis(0,-11,0,30,140); cw;

		At(70,70); wa=-20;
		CPsd(12,4,-2,3,14,0,30,40); 
		CPsd(10,4,-2,5,14,0,30,0);
		CPsd(-7,4,-100,3,14,20,30,0);
		Drift(0,-35,20,30,-40);
		ar ab13(30); cw;

	}
}*/
CPsd(12,8,2,3,13,0,40,50);
CPsd(10,8,2,5,13,0,40,0);
CPsd(8,8,100,3,13,20,40,0); reset
CPsd(12,1,45,5,12,0,40,0); T1[2] = bar_5; lcd(3,14,"T1: %d",T1[2]);

if(T1[1] < T1[2]){
	CPsd(10,1,10,3,12,0,40,0); 
	Drift(0,30,-90,30,-40);
}
else{ 
	CPsd(10,1,2,3,12,0,40,-50);

	At(-20,40); wa=-20;
	CPsd(12,4,-10,3,14,0,30,40); 
	CPsd(10,4,-10,5,14,0,30,0);
	CPsd(8,4,-100,3,14,30,30,-40);
	Ad(1,5,-70,30,40,100); cw;
	Ad(-30,0,-90,30,140,30); 
 
	CPsd(12,8,20,3,15,0,40,50);
	CPsd(10,8,20,5,15,0,40,0);
	CPsd(1,8,100,3,15,30,40,0);
	Drift(-1,35,90,30,-40);

	CPsd(12,1,2,3,11,0,40,50);
	CPsd(10,1,2,5,11,0,40,0);
	CPsd(1,1,100,3,11,30,40,0);
	Axis(-1,60,0,40,0);
	CPsd(12,1,2,3,11,0,40,0);
	CPsd(10,1,2,5,11,0,40,0);
	CPsd(1,1,100,3,11,25,40,0);
	Drift(0,36,90,30,-40);

	CPsd(12,8,70,3,16,0,40,50);
	CPsd(10,8,60,5,16,0,40,0);
	Drift(-1,35,90,30,-40);	
	Axis(-1,1,0,10,120); ar ab645(30);

	Axis(0,40,0,40,40);
	CPsd(12,8,2,3,16,0,40,0);
	CPsd(10,8,2,5,16,0,40,0);
	CPsd(8,8,100,3,16,30,40,0);
	Axis(-2,40,0,40,0);
	Drift(-2,30,90,30,-40);	ar ab86(30);

	Drift(-1,45,90,30,140); 
}

//A1구역 처리
Axis(0,1,0,10,120);
ar ab45(30);
ar TB(T(103,2),0,144,99);
ar ab45(30);

if(T(103,2) == 1){
	Ad(0,20,20,30,140,70);
	At(-40,40);
	At(20,40);
	Axis(0,-20,0,30,140);
}
else{
	Ad(0,20,-20,30,140,70);
	At(40,40);
	At(-20,40);
	Axis(0,-20,0,30,140);
}
ar ab45(30);

Axis(-45,30,0,30,140);
CPsd(12,8,2,3,16,0,40,50);
CPsd(10,8,2,5,16,0,40,0);
CPsd(8,8,100,3,16,30,40,0);
Axis(0,40,0,40,0);
Ot(25,-90,-90,30,0);
Ad(0,20,-90,30,-40,120);

//A2구역 처리
ar ab45(30);
ar TB(T(103,2),0,144,99);
ar ab45(30);

if(T(103,2) == 1){
	Ad(0,20,20,30,140,70);
	At(-40,40);
	At(20,40);
	Axis(0,-20,0,30,140);
}
else{
	Ad(0,20,-20,30,140,70);
	At(40,40);
	At(-20,40);
	Axis(0,-20,0,30,140);
}
At(-90,90);
Axis(-25,50,0,30,40);	reset
Avoid(0,11,14,0,20,30,0);

if(bar_5 == 1){
	Drift(0,25,-45,30,0); wa = -45;
	Drift(30,10,50,30,-40); cw;
	Axis(-1,1,0,10,120); ar ab645(30);

	CPsd(12,8,10,3,14,0,30,40);
	CPsd(10,8,5,5,14,0,30,-40);

	SS(); SV1 V1(); V3 //2구역 스캔 
	for(i=0; i<9; i++){
	   if(!pro[i][1]) continue;
	   if((abs(pro[i][1]-75)<20) && (abs(pro[i][2]-140)<20)) p[1] = pro[i][0]; //1
	   if((abs(pro[i][1]-143)<20) && (abs(pro[i][2]-141)<20)) p[2] = pro[i][0]; //2
	   if((abs(pro[i][1]-216)<20) &&  (abs(pro[i][2]-140)<20)) p[3] = pro[i][0]; //3
	}
	if(p[1]==t){  //2구역 퍽 처리
	   At(15,60); wa=15;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(-15,60); cw;
	}if(p[2]==t){
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	}if(p[3]==t){
	   At(-17,60); wa=-17;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(17,60);
	}
	At(-20,80); wa = -20;
	CPsd(12,6,-5,3,14,0,30,40);
	CPsd(10,6,-5,5,14,0,30,0);
	Axis(0,-5,0,30,-40);
	Drift(-30,-2,-20,30,140);	wa=-40;
	Axis(0,-20,0,30,140);	cw;
	At(80,60); wa=40;
	Ot(22,90,-40,30,140); cw;
	CPsd(12,1,2,3,13,0,30,40);
	CPsd(10,1,2,5,13,0,30,0);
	CPsd(1,1,100,3,13,30,30,0);
	Drift(-1,35,90,30,-40);
	Axis(-1,1,0,10,120);	ar ab645(30);
	CPsd(12,8,10,3,15,0,30,40);
	CPsd(10,8,10,5,15,0,30,0);
	Drift(-1,35,90,30,-40);
	Axis(-1,1,0,10,120);	ar ab645(30);
	CPsd(12,8,2,3,15,0,30,40);
	CPsd(10,8,2,5,15,0,30,0);
	CPsd(8,8,100,3,15,30,30,0);
	Drift(1,40,-90,30,-40);	

	Axis(1,1,0,10,120);	ar ab345(30);
	Drift(-2,55,-90,30,140);
	Axis(2,2,0,10,120);	ar ab413(30);

	CPsd(12,1,10,3,11,0,30,40);
	CPsd(10,1,5,5,11,0,30,-40);

	SS(); SV1 V1(); V3 //1구역 스캔 
	for(i=0; i<9; i++){
	   if(!pro[i][1]) continue;
	   if((abs(pro[i][1]-75)<20) && (abs(pro[i][2]-140)<20)) p[1] = pro[i][0]; //1
	   if((abs(pro[i][1]-143)<20) && (abs(pro[i][2]-141)<20)) p[2] = pro[i][0]; //2
	   if((abs(pro[i][1]-216)<20) &&  (abs(pro[i][2]-140)<20)) p[3] = pro[i][0]; //3
	}
	if(p[1]==t){  //1구역 퍽 처리
	   At(15,60); wa=15;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(-15,60); cw;
	}if(p[2]==t){
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	}if(p[3]==t){
	   At(-17,60); wa=-17;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(17,60);
	}
	At(20,80); wa = 20;
	CPsd(12,3,-5,3,13,0,30,40);
	CPsd(10,3,-5,5,13,0,30,0);
	Axis(0,-5,0,30,-40);
	Drift(29,-2,20,30,140);	wa=40;
	Axis(0,-20,0,30,40);
	Drift(0,-30,-40,30,-40); 
	Drift(-30,0,-90,30,140); cw;
	Axis(1,1,0,10,120);	ar ab345(30);
}
else{
	Axis(0,1,0,30,-40);
	Ot(-25,-90,-70,30,40);
	CPsd(12,5,-5,3,13,0,40,0); wa=20;
	CPsd(10,5,-5,5,13,0,40,0);
	CPsd(5,5,-100,3,13,30,40,0);
	Drift(0,-55,-20,40,-50); cw; ar ab345(30);
	
	Drift(0,30,90,30,140);

	Avoid(0,11,14,0,25,30,40);
	Drift(0,25,45,30,0); wa = 45;
	Drift(-30,7,-50,30,-40); cw;
	Axis(1,1,0,10,120); ar ab413(30);

	CPsd(12,1,10,3,11,0,30,40);
	CPsd(10,1,5,5,11,0,30,-40);

	SS(); SV1 V1(); V3 //1구역 스캔 
	for(i=0; i<9; i++){
	   if(!pro[i][1]) continue;
	   if((abs(pro[i][1]-75)<20) && (abs(pro[i][2]-140)<20)) p[1] = pro[i][0]; //1
	   if((abs(pro[i][1]-143)<20) && (abs(pro[i][2]-141)<20)) p[2] = pro[i][0]; //2
	   if((abs(pro[i][1]-216)<20) &&  (abs(pro[i][2]-140)<20)) p[3] = pro[i][0]; //3
	}if(p[1]==t){  //1구역 퍽 처리
	   At(15,60); wa=15;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(-15,60); cw;
	}if(p[2]==t){
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	}if(p[3]==t){
	   At(-17,60); wa=-17;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(17,60);
	}
	At(20,80); wa = 20;
	CPsd(12,3,-5,3,13,0,30,40);
	CPsd(10,3,-5,5,13,0,30,0);
	Axis(0,-5,0,30,-40);

	Drift(30,-2,20,30,140);	wa=40;
	Axis(0,-20,0,30,140);	cw;
	At(-80,60); wa=-40;
	Ot(22,-90,40,30,140); cw;
	Axis(0,5,0,30,40);
	Drift(1,35,-90,30,-40);
	Axis(1,1,0,10,120);	ar ab345(30);
	CPsd(12,1,10,3,12,0,30,40);
	CPsd(10,1,10,5,12,0,30,0);
	Drift(1,35,-90,30,-40);
	Axis(1,1,0,10,120);	ar ab345(30);
	CPsd(12,1,2,3,13,0,30,40);
	CPsd(10,1,2,5,13,0,30,0);
	CPsd(1,1,100,3,13,30,30,0);
	Drift(1,40,90,30,-40);

	Axis(-1,1,0,10,120);	ar ab645(30);
	Drift(0,55,90,30,140);
	Axis(-2,2,0,10,120);	ar ab645(30);
	
	CPsd(12,8,10,3,14,0,30,40);
	CPsd(10,8,5,5,14,0,30,-40);

	SS(); SV1 V1(); V3 //2구역 스캔 
	for(i=0; i<9; i++){
	   if(!pro[i][1]) continue;
	   if((abs(pro[i][1]-75)<20) && (abs(pro[i][2]-140)<20)) p[1] = pro[i][0]; //1
	   if((abs(pro[i][1]-143)<20) && (abs(pro[i][2]-141)<20)) p[2] = pro[i][0]; //2
	   if((abs(pro[i][1]-216)<20) &&  (abs(pro[i][2]-140)<20)) p[3] = pro[i][0]; //3
	}if(p[1]==t){  //2구역 퍽 처리
	   At(15,60); wa=15;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(-15,60); cw;
	}if(p[2]==t){
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	}if(p[3]==t){
	   At(-17,60); wa=-17;
	   Axis(0,15,0,30,140);
	   Axis(0,-15,0,30,140);
	   At(17,60);
	}
	At(-20,80); wa = -20;
	CPsd(12,6,-5,3,14,0,30,40);
	CPsd(10,6,-5,5,14,0,30,0);
	Axis(0,-5,0,30,-40);
	Drift(-28,-2,-20,30,140);	wa=-40; 
	Drift(0,-30,40,30,40); 	cw;
	Ot(-20,-90,-70,30,0);
	CPsd(12,5,-5,3,13,0,40,0); wa=20;
	CPsd(10,5,-5,5,13,0,40,0);
	CPsd(5,5,-100,3,13,30,40,0);
	Drift(0,-55,-20,40,-50); cw; 
	ar ab345(30);
}

if(T1[1] < T1[2]){
	Axis(0,30,0,40,50);
	CPsd(12,8,5,3,16,0,40,0);
	CPsd(10,8,5,5,16,0,40,0);
	CPsd(8,8,100,3,16,30,40,0);
	Axis(0,30,0,40,0);
	Drift(0,35,-90,30,-40); ar ab13(30);

	CPsd(12,1,60,3,11,0,40,50);
	CPsd(10,1,60,5,11,0,40,0);
	CPsd(8,1,100,3,11,30,40,0);
	Drift(1,40,-90,30,-40);

	CPsd(12,8,2,3,14,0,40,50);
	CPsd(10,8,2,5,14,0,40,0);
	CPsd(8,8,100,3,14,30,40,0);
	Axis(0,60,0,40,0);
	CPsd(12,8,2,3,14,0,40,0);
	CPsd(10,8,2,5,14,0,40,0);
	CPsd(8,8,100,3,14,30,40,0);
	Drift(1,40,-70,30,-40); 
}
else{
	case 3:

	Drift(40,0,70,30,40); wa=-20;
	CPsd(12,4,-60,3,15,0,30,0); 
	CPsd(10,4,-60,5,15,0,30,0);
	CPsd(-6,4,-100,3,15,20,30,0); cw;
	Axis(0,-1,0,30,-40);
	At(40,60);
}

if(g_psd[4] > 30){
	wa=20;
	CPsd(12,3,-5,3,14,0,30,40); 
	CPsd(10,3,-5,5,14,0,30,0);
	CPsd(-4,3,-100,3,14,7,30,0);
	Axis(0,-1,0,30,-40);
	
	if(g_psd[7]<10){
		At(-20,40);
		LED_ON(3);
		_delay_ms(1000);
		LED_OFF(3);
		break;
	}
 
	Drift(50,0,50,30,140); wa = -20;
	Drift(-50,0,-70,30,140);
}
else{
	wa=20;
	Drift(50,-3,50,30,140); wa = -20;
	Drift(-45,3,-50,30,140);
	
	Ad(-3,0,-40,10,120,40); 
	if(g_psd[5]<20){
		Drift(-50,0,-70,30,140); cw;
		Drift(50,-1,90,30,140);
	}
	else{
		CPsd(12,6,-5,3,13,0,30,40); 
		CPsd(10,6,-5,5,13,0,30,0);
		CPsd(-5,6,-100,3,13,7,30,0);
		Axis(0,-1,0,30,-40);
		At(20,40);
	}

}

LED_ON(3);
_delay_ms(1000);
LED_OFF(3);

break;

while(!SW2);
while(SW2);

			}
		}

		if(key){
			lcd(0,0,"%03d %03d %03d %03d %03d",g_psd[2],g_psd[1],g_psd[0],g_psd[8],g_psd[7]);
			lcd(1,0,"%03d %03d     %03d %03d",g_psd[3],g_psd[4],g_psd[5],g_psd[6]);
		}
		else{
			lcd(0,0,"%03d %03d %03d %03d %03d",psd[2],psd[1],psd[0],psd[8],psd[7]);
			lcd(1,0,"%03d %03d     %03d %03d",psd[3],psd[4],psd[5],psd[6]);
		}
		key_puck = abs(key) %9;

		get_gyro();
		lcd(2,0,"C%d X%3d Y%3d S%2d",key_puck,Cmd(key_puck,102),Cmd(key_puck,103),Cmd(key_puck,104));		
		lcd(3,0,"%d%d%d%d%d| G%04d",IR_4,IR_1,IR_2,IR_3,IR_5,(int)gyro);
		lcd(3,16,"k:%02d",key);
	}
}
